/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type CreateReseller = {
    /**
     * AuthKey of Reseller child created
     */
    authKey: string;
    /**
     * Id of Reseller child created
     */
    id?: number | undefined;
};

/** @internal */
export namespace CreateReseller$ {
    export type Inbound = {
        authKey: string;
        id?: number | undefined;
    };

    export const inboundSchema: z.ZodType<CreateReseller, z.ZodTypeDef, Inbound> = z
        .object({
            authKey: z.string(),
            id: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                authKey: v.authKey,
                ...(v.id === undefined ? null : { id: v.id }),
            };
        });

    export type Outbound = {
        authKey: string;
        id?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateReseller> = z
        .object({
            authKey: z.string(),
            id: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                authKey: v.authKey,
                ...(v.id === undefined ? null : { id: v.id }),
            };
        });
}
