/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * File data that is uploaded
 */
export type FileData = {
    /**
     * Account id of user which created the file
     */
    authorId?: string | undefined;
    /**
     * Company id linked to a file
     */
    companyId?: string | undefined;
    /**
     * Contact id of contact on which file is uploaded
     */
    contactId?: number | undefined;
    /**
     * File created date/time
     */
    createdAt?: Date | undefined;
    /**
     * Deal id linked to a file
     */
    dealId?: string | undefined;
    /**
     * Name of uploaded file
     */
    name?: string | undefined;
    /**
     * Size of file in bytes
     */
    size?: number | undefined;
};

/** @internal */
export namespace FileData$ {
    export type Inbound = {
        authorId?: string | undefined;
        companyId?: string | undefined;
        contactId?: number | undefined;
        createdAt?: string | undefined;
        dealId?: string | undefined;
        name?: string | undefined;
        size?: number | undefined;
    };

    export const inboundSchema: z.ZodType<FileData, z.ZodTypeDef, Inbound> = z
        .object({
            authorId: z.string().optional(),
            companyId: z.string().optional(),
            contactId: z.number().int().optional(),
            createdAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            dealId: z.string().optional(),
            name: z.string().optional(),
            size: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.authorId === undefined ? null : { authorId: v.authorId }),
                ...(v.companyId === undefined ? null : { companyId: v.companyId }),
                ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.dealId === undefined ? null : { dealId: v.dealId }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.size === undefined ? null : { size: v.size }),
            };
        });

    export type Outbound = {
        authorId?: string | undefined;
        companyId?: string | undefined;
        contactId?: number | undefined;
        createdAt?: string | undefined;
        dealId?: string | undefined;
        name?: string | undefined;
        size?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FileData> = z
        .object({
            authorId: z.string().optional(),
            companyId: z.string().optional(),
            contactId: z.number().int().optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            dealId: z.string().optional(),
            name: z.string().optional(),
            size: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.authorId === undefined ? null : { authorId: v.authorId }),
                ...(v.companyId === undefined ? null : { companyId: v.companyId }),
                ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.dealId === undefined ? null : { dealId: v.dealId }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.size === undefined ? null : { size: v.size }),
            };
        });
}
