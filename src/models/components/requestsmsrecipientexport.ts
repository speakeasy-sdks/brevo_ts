/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Filter the recipients based on how they interacted with the campaign
 */
export enum RequestSmsRecipientExportRecipientsType {
    All = "all",
    Delivered = "delivered",
    Answered = "answered",
    SoftBounces = "softBounces",
    HardBounces = "hardBounces",
    Unsubscribed = "unsubscribed",
}

export type RequestSmsRecipientExport = {
    /**
     * URL that will be called once the export process is finished. For reference, https://help.brevo.com/hc/en-us/articles/360007666479
     */
    notifyURL?: string | undefined;
    /**
     * Filter the recipients based on how they interacted with the campaign
     */
    recipientsType: RequestSmsRecipientExportRecipientsType;
};

/** @internal */
export const RequestSmsRecipientExportRecipientsType$ = z.nativeEnum(
    RequestSmsRecipientExportRecipientsType
);

/** @internal */
export namespace RequestSmsRecipientExport$ {
    export type Inbound = {
        notifyURL?: string | undefined;
        recipientsType: RequestSmsRecipientExportRecipientsType;
    };

    export const inboundSchema: z.ZodType<RequestSmsRecipientExport, z.ZodTypeDef, Inbound> = z
        .object({
            notifyURL: z.string().optional(),
            recipientsType: RequestSmsRecipientExportRecipientsType$,
        })
        .transform((v) => {
            return {
                ...(v.notifyURL === undefined ? null : { notifyURL: v.notifyURL }),
                recipientsType: v.recipientsType,
            };
        });

    export type Outbound = {
        notifyURL?: string | undefined;
        recipientsType: RequestSmsRecipientExportRecipientsType;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RequestSmsRecipientExport> = z
        .object({
            notifyURL: z.string().optional(),
            recipientsType: RequestSmsRecipientExportRecipientsType$,
        })
        .transform((v) => {
            return {
                ...(v.notifyURL === undefined ? null : { notifyURL: v.notifyURL }),
                recipientsType: v.recipientsType,
            };
        });
}
