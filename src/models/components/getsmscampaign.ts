/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type GetSmsCampaignRecipients = {
    exclusionLists: Array<number>;
    lists: Array<number>;
};

export type GetSmsCampaignStatistics = {
    /**
     * Number of replies to the SMS
     */
    answered: number;
    /**
     * Number of delivered SMS
     */
    delivered: number;
    /**
     * Number of hardbounced SMS
     */
    hardBounces: number;
    /**
     * Number of processing SMS
     */
    processing: number;
    /**
     * Number of sent SMS
     */
    sent: number;
    /**
     * Number of softbounced SMS
     */
    softBounces: number;
    /**
     * Number of unsubscription SMS
     */
    unsubscriptions: number;
};

/**
 * Status of the SMS Campaign
 */
export enum GetSmsCampaignStatus {
    Draft = "draft",
    Sent = "sent",
    Archive = "archive",
    Queued = "queued",
    Suspended = "suspended",
    InProcess = "inProcess",
}

export type GetSmsCampaign = {
    /**
     * Content of the SMS Campaign
     */
    content: string;
    /**
     * Creation UTC date-time of the SMS campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)
     */
    createdAt: string;
    /**
     * ID of the SMS Campaign
     */
    id: number;
    /**
     * UTC date-time of last modification of the SMS campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)
     */
    modifiedAt: string;
    /**
     * Name of the SMS Campaign
     */
    name: string;
    recipients: GetSmsCampaignRecipients;
    /**
     * UTC date-time on which SMS campaign is scheduled. Should be in YYYY-MM-DDTHH:mm:ss.SSSZ format
     */
    scheduledAt?: string | undefined;
    /**
     * Sender of the SMS Campaign
     */
    sender: string;
    statistics: GetSmsCampaignStatistics;
    /**
     * Status of the SMS Campaign
     */
    status: GetSmsCampaignStatus;
};

/** @internal */
export namespace GetSmsCampaignRecipients$ {
    export type Inbound = {
        exclusionLists: Array<number>;
        lists: Array<number>;
    };

    export const inboundSchema: z.ZodType<GetSmsCampaignRecipients, z.ZodTypeDef, Inbound> = z
        .object({
            exclusionLists: z.array(z.number().int()),
            lists: z.array(z.number().int()),
        })
        .transform((v) => {
            return {
                exclusionLists: v.exclusionLists,
                lists: v.lists,
            };
        });

    export type Outbound = {
        exclusionLists: Array<number>;
        lists: Array<number>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetSmsCampaignRecipients> = z
        .object({
            exclusionLists: z.array(z.number().int()),
            lists: z.array(z.number().int()),
        })
        .transform((v) => {
            return {
                exclusionLists: v.exclusionLists,
                lists: v.lists,
            };
        });
}

/** @internal */
export namespace GetSmsCampaignStatistics$ {
    export type Inbound = {
        answered: number;
        delivered: number;
        hardBounces: number;
        processing: number;
        sent: number;
        softBounces: number;
        unsubscriptions: number;
    };

    export const inboundSchema: z.ZodType<GetSmsCampaignStatistics, z.ZodTypeDef, Inbound> = z
        .object({
            answered: z.number().int(),
            delivered: z.number().int(),
            hardBounces: z.number().int(),
            processing: z.number().int(),
            sent: z.number().int(),
            softBounces: z.number().int(),
            unsubscriptions: z.number().int(),
        })
        .transform((v) => {
            return {
                answered: v.answered,
                delivered: v.delivered,
                hardBounces: v.hardBounces,
                processing: v.processing,
                sent: v.sent,
                softBounces: v.softBounces,
                unsubscriptions: v.unsubscriptions,
            };
        });

    export type Outbound = {
        answered: number;
        delivered: number;
        hardBounces: number;
        processing: number;
        sent: number;
        softBounces: number;
        unsubscriptions: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetSmsCampaignStatistics> = z
        .object({
            answered: z.number().int(),
            delivered: z.number().int(),
            hardBounces: z.number().int(),
            processing: z.number().int(),
            sent: z.number().int(),
            softBounces: z.number().int(),
            unsubscriptions: z.number().int(),
        })
        .transform((v) => {
            return {
                answered: v.answered,
                delivered: v.delivered,
                hardBounces: v.hardBounces,
                processing: v.processing,
                sent: v.sent,
                softBounces: v.softBounces,
                unsubscriptions: v.unsubscriptions,
            };
        });
}

/** @internal */
export const GetSmsCampaignStatus$ = z.nativeEnum(GetSmsCampaignStatus);

/** @internal */
export namespace GetSmsCampaign$ {
    export type Inbound = {
        content: string;
        createdAt: string;
        id: number;
        modifiedAt: string;
        name: string;
        recipients: GetSmsCampaignRecipients$.Inbound;
        scheduledAt?: string | undefined;
        sender: string;
        statistics: GetSmsCampaignStatistics$.Inbound;
        status: GetSmsCampaignStatus;
    };

    export const inboundSchema: z.ZodType<GetSmsCampaign, z.ZodTypeDef, Inbound> = z
        .object({
            content: z.string(),
            createdAt: z.string(),
            id: z.number().int(),
            modifiedAt: z.string(),
            name: z.string(),
            recipients: z.lazy(() => GetSmsCampaignRecipients$.inboundSchema),
            scheduledAt: z.string().optional(),
            sender: z.string(),
            statistics: z.lazy(() => GetSmsCampaignStatistics$.inboundSchema),
            status: GetSmsCampaignStatus$,
        })
        .transform((v) => {
            return {
                content: v.content,
                createdAt: v.createdAt,
                id: v.id,
                modifiedAt: v.modifiedAt,
                name: v.name,
                recipients: v.recipients,
                ...(v.scheduledAt === undefined ? null : { scheduledAt: v.scheduledAt }),
                sender: v.sender,
                statistics: v.statistics,
                status: v.status,
            };
        });

    export type Outbound = {
        content: string;
        createdAt: string;
        id: number;
        modifiedAt: string;
        name: string;
        recipients: GetSmsCampaignRecipients$.Outbound;
        scheduledAt?: string | undefined;
        sender: string;
        statistics: GetSmsCampaignStatistics$.Outbound;
        status: GetSmsCampaignStatus;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetSmsCampaign> = z
        .object({
            content: z.string(),
            createdAt: z.string(),
            id: z.number().int(),
            modifiedAt: z.string(),
            name: z.string(),
            recipients: z.lazy(() => GetSmsCampaignRecipients$.outboundSchema),
            scheduledAt: z.string().optional(),
            sender: z.string(),
            statistics: z.lazy(() => GetSmsCampaignStatistics$.outboundSchema),
            status: GetSmsCampaignStatus$,
        })
        .transform((v) => {
            return {
                content: v.content,
                createdAt: v.createdAt,
                id: v.id,
                modifiedAt: v.modifiedAt,
                name: v.name,
                recipients: v.recipients,
                ...(v.scheduledAt === undefined ? null : { scheduledAt: v.scheduledAt }),
                sender: v.sender,
                statistics: v.statistics,
                status: v.status,
            };
        });
}
