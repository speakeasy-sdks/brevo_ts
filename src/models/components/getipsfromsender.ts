/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { GetIpFromSender, GetIpFromSender$ } from "./getipfromsender";
import * as z from "zod";

export type GetIpsFromSender = {
    /**
     * Dedicated IP(s) linked to a sender
     */
    ips: Array<GetIpFromSender>;
};

/** @internal */
export namespace GetIpsFromSender$ {
    export type Inbound = {
        ips: Array<GetIpFromSender$.Inbound>;
    };

    export const inboundSchema: z.ZodType<GetIpsFromSender, z.ZodTypeDef, Inbound> = z
        .object({
            ips: z.array(GetIpFromSender$.inboundSchema),
        })
        .transform((v) => {
            return {
                ips: v.ips,
            };
        });

    export type Outbound = {
        ips: Array<GetIpFromSender$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetIpsFromSender> = z
        .object({
            ips: z.array(GetIpFromSender$.outboundSchema),
        })
        .transform((v) => {
            return {
                ips: v.ips,
            };
        });
}
