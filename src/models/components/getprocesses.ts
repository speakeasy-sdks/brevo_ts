/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { GetProcess, GetProcess$ } from "./getprocess";
import * as z from "zod";

export type GetProcesses = {
    /**
     * Number of processes available on your account
     */
    count?: number | undefined;
    /**
     * List of processes available on your account
     */
    processes?: Array<GetProcess> | undefined;
};

/** @internal */
export namespace GetProcesses$ {
    export type Inbound = {
        count?: number | undefined;
        processes?: Array<GetProcess$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<GetProcesses, z.ZodTypeDef, Inbound> = z
        .object({
            count: z.number().int().optional(),
            processes: z.array(GetProcess$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.count === undefined ? null : { count: v.count }),
                ...(v.processes === undefined ? null : { processes: v.processes }),
            };
        });

    export type Outbound = {
        count?: number | undefined;
        processes?: Array<GetProcess$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProcesses> = z
        .object({
            count: z.number().int().optional(),
            processes: z.array(GetProcess$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.count === undefined ? null : { count: v.count }),
                ...(v.processes === undefined ? null : { processes: v.processes }),
            };
        });
}
