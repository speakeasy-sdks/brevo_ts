/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type Domains = {
    /**
     * Status of domain authentication (true=authenticated, false=non authenticated)
     */
    authenticated: boolean;
    /**
     * Domain name
     */
    domainName: string;
    /**
     * Id of the domain
     */
    id: number;
    /**
     * Dedicated IP associated with domain
     */
    ip?: string | undefined;
    /**
     * Status of domain verification (true=verified, false=non verified)
     */
    verified: boolean;
};

export type GetDomainsList = {
    /**
     * List of the domains available in your account
     */
    domains?: Array<Domains> | undefined;
};

/** @internal */
export namespace Domains$ {
    export type Inbound = {
        authenticated: boolean;
        domain_name: string;
        id: number;
        ip?: string | undefined;
        verified: boolean;
    };

    export const inboundSchema: z.ZodType<Domains, z.ZodTypeDef, Inbound> = z
        .object({
            authenticated: z.boolean(),
            domain_name: z.string(),
            id: z.number().int(),
            ip: z.string().optional(),
            verified: z.boolean(),
        })
        .transform((v) => {
            return {
                authenticated: v.authenticated,
                domainName: v.domain_name,
                id: v.id,
                ...(v.ip === undefined ? null : { ip: v.ip }),
                verified: v.verified,
            };
        });

    export type Outbound = {
        authenticated: boolean;
        domain_name: string;
        id: number;
        ip?: string | undefined;
        verified: boolean;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Domains> = z
        .object({
            authenticated: z.boolean(),
            domainName: z.string(),
            id: z.number().int(),
            ip: z.string().optional(),
            verified: z.boolean(),
        })
        .transform((v) => {
            return {
                authenticated: v.authenticated,
                domain_name: v.domainName,
                id: v.id,
                ...(v.ip === undefined ? null : { ip: v.ip }),
                verified: v.verified,
            };
        });
}

/** @internal */
export namespace GetDomainsList$ {
    export type Inbound = {
        domains?: Array<Domains$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<GetDomainsList, z.ZodTypeDef, Inbound> = z
        .object({
            domains: z.array(z.lazy(() => Domains$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.domains === undefined ? null : { domains: v.domains }),
            };
        });

    export type Outbound = {
        domains?: Array<Domains$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetDomainsList> = z
        .object({
            domains: z.array(z.lazy(() => Domains$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.domains === undefined ? null : { domains: v.domains }),
            };
        });
}
