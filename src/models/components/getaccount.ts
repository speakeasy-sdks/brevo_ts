/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { RFCDate } from "../../types";
import { z } from "zod";

/**
 * Address informations
 */
export type Address = {
    /**
     * City information
     */
    city: string;
    /**
     * Country information
     */
    country: string;
    /**
     * Street information
     */
    street: string;
    /**
     * Zip Code information
     */
    zipCode: string;
};

export type MarketingAutomation = {
    /**
     * Status of Marketing Automation Plateform activation for your account (true=enabled, false=disabled)
     */
    enabled: boolean;
    /**
     * Marketing Automation Tracker ID
     */
    key?: string | undefined;
};

/**
 * This is the type of the credit, "Send Limit" is one of the possible types of credit of a user. "Send Limit" implies the total number of emails you can send to the subscribers in your account.
 */
export enum CreditsType {
    SendLimit = "sendLimit",
}

/**
 * Displays the plan type of the user
 */
export enum GetAccountType {
    PayAsYouGo = "payAsYouGo",
    Free = "free",
    Subscription = "subscription",
    Sms = "sms",
    Reseller = "reseller",
}

export type Plan = {
    /**
     * Remaining credits of the user
     */
    credits: number;
    /**
     * This is the type of the credit, "Send Limit" is one of the possible types of credit of a user. "Send Limit" implies the total number of emails you can send to the subscribers in your account.
     */
    creditsType: CreditsType;
    /**
     * Date of the period from which the plan will end (only available for "subscription" and "reseller" plan type)
     */
    endDate?: RFCDate | undefined;
    /**
     * Date of the period from which the plan will start (only available for "subscription" and "reseller" plan type)
     */
    startDate?: RFCDate | undefined;
    /**
     * Displays the plan type of the user
     */
    type: GetAccountType;
    /**
     * Only in case of reseller account. It implies the total number of child accounts you can add to your account.
     */
    userLimit?: number | undefined;
};

/**
 * Data regarding the transactional email account
 */
export type Data = {
    /**
     * Port used for SMTP Relay
     */
    port: number;
    /**
     * URL of the SMTP Relay
     */
    relay: string;
    /**
     * Email to use as login on transactional platform
     */
    userName: string;
};

/**
 * Information about your transactional email account
 */
export type Relay = {
    /**
     * Data regarding the transactional email account
     */
    data: Data;
    /**
     * Status of your transactional email Account (true=Enabled, false=Disabled)
     */
    enabled: boolean;
};

export type GetAccount = {
    /**
     * Address informations
     */
    address: Address;
    /**
     * Name of the company
     */
    companyName: string;
    /**
     * Login Email
     */
    email: string;
    /**
     * First Name
     */
    firstName: string;
    /**
     * Last Name
     */
    lastName: string;
    marketingAutomation?: MarketingAutomation | undefined;
    /**
     * Information about your plans and credits
     */
    plan: Array<Plan>;
    /**
     * Information about your transactional email account
     */
    relay: Relay;
};

/** @internal */
export namespace Address$ {
    export type Inbound = {
        city: string;
        country: string;
        street: string;
        zipCode: string;
    };

    export const inboundSchema: z.ZodType<Address, z.ZodTypeDef, Inbound> = z
        .object({
            city: z.string(),
            country: z.string(),
            street: z.string(),
            zipCode: z.string(),
        })
        .transform((v) => {
            return {
                city: v.city,
                country: v.country,
                street: v.street,
                zipCode: v.zipCode,
            };
        });

    export type Outbound = {
        city: string;
        country: string;
        street: string;
        zipCode: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Address> = z
        .object({
            city: z.string(),
            country: z.string(),
            street: z.string(),
            zipCode: z.string(),
        })
        .transform((v) => {
            return {
                city: v.city,
                country: v.country,
                street: v.street,
                zipCode: v.zipCode,
            };
        });
}

/** @internal */
export namespace MarketingAutomation$ {
    export type Inbound = {
        enabled: boolean;
        key?: string | undefined;
    };

    export const inboundSchema: z.ZodType<MarketingAutomation, z.ZodTypeDef, Inbound> = z
        .object({
            enabled: z.boolean(),
            key: z.string().optional(),
        })
        .transform((v) => {
            return {
                enabled: v.enabled,
                ...(v.key === undefined ? null : { key: v.key }),
            };
        });

    export type Outbound = {
        enabled: boolean;
        key?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MarketingAutomation> = z
        .object({
            enabled: z.boolean(),
            key: z.string().optional(),
        })
        .transform((v) => {
            return {
                enabled: v.enabled,
                ...(v.key === undefined ? null : { key: v.key }),
            };
        });
}

/** @internal */
export const CreditsType$ = z.nativeEnum(CreditsType);

/** @internal */
export const GetAccountType$ = z.nativeEnum(GetAccountType);

/** @internal */
export namespace Plan$ {
    export type Inbound = {
        credits: number;
        creditsType: CreditsType;
        endDate?: string | undefined;
        startDate?: string | undefined;
        type: GetAccountType;
        userLimit?: number | undefined;
    };

    export const inboundSchema: z.ZodType<Plan, z.ZodTypeDef, Inbound> = z
        .object({
            credits: z.number(),
            creditsType: CreditsType$,
            endDate: z
                .string()
                .transform((v) => new RFCDate(v))
                .optional(),
            startDate: z
                .string()
                .transform((v) => new RFCDate(v))
                .optional(),
            type: GetAccountType$,
            userLimit: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                credits: v.credits,
                creditsType: v.creditsType,
                ...(v.endDate === undefined ? null : { endDate: v.endDate }),
                ...(v.startDate === undefined ? null : { startDate: v.startDate }),
                type: v.type,
                ...(v.userLimit === undefined ? null : { userLimit: v.userLimit }),
            };
        });

    export type Outbound = {
        credits: number;
        creditsType: CreditsType;
        endDate?: string | undefined;
        startDate?: string | undefined;
        type: GetAccountType;
        userLimit?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Plan> = z
        .object({
            credits: z.number(),
            creditsType: CreditsType$,
            endDate: z
                .instanceof(RFCDate)
                .transform((v) => v.toString())
                .optional(),
            startDate: z
                .instanceof(RFCDate)
                .transform((v) => v.toString())
                .optional(),
            type: GetAccountType$,
            userLimit: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                credits: v.credits,
                creditsType: v.creditsType,
                ...(v.endDate === undefined ? null : { endDate: v.endDate }),
                ...(v.startDate === undefined ? null : { startDate: v.startDate }),
                type: v.type,
                ...(v.userLimit === undefined ? null : { userLimit: v.userLimit }),
            };
        });
}

/** @internal */
export namespace Data$ {
    export type Inbound = {
        port: number;
        relay: string;
        userName: string;
    };

    export const inboundSchema: z.ZodType<Data, z.ZodTypeDef, Inbound> = z
        .object({
            port: z.number().int(),
            relay: z.string(),
            userName: z.string(),
        })
        .transform((v) => {
            return {
                port: v.port,
                relay: v.relay,
                userName: v.userName,
            };
        });

    export type Outbound = {
        port: number;
        relay: string;
        userName: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Data> = z
        .object({
            port: z.number().int(),
            relay: z.string(),
            userName: z.string(),
        })
        .transform((v) => {
            return {
                port: v.port,
                relay: v.relay,
                userName: v.userName,
            };
        });
}

/** @internal */
export namespace Relay$ {
    export type Inbound = {
        data: Data$.Inbound;
        enabled: boolean;
    };

    export const inboundSchema: z.ZodType<Relay, z.ZodTypeDef, Inbound> = z
        .object({
            data: z.lazy(() => Data$.inboundSchema),
            enabled: z.boolean(),
        })
        .transform((v) => {
            return {
                data: v.data,
                enabled: v.enabled,
            };
        });

    export type Outbound = {
        data: Data$.Outbound;
        enabled: boolean;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Relay> = z
        .object({
            data: z.lazy(() => Data$.outboundSchema),
            enabled: z.boolean(),
        })
        .transform((v) => {
            return {
                data: v.data,
                enabled: v.enabled,
            };
        });
}

/** @internal */
export namespace GetAccount$ {
    export type Inbound = {
        address: Address$.Inbound;
        companyName: string;
        email: string;
        firstName: string;
        lastName: string;
        marketingAutomation?: MarketingAutomation$.Inbound | undefined;
        plan: Array<Plan$.Inbound>;
        relay: Relay$.Inbound;
    };

    export const inboundSchema: z.ZodType<GetAccount, z.ZodTypeDef, Inbound> = z
        .object({
            address: z.lazy(() => Address$.inboundSchema),
            companyName: z.string(),
            email: z.string(),
            firstName: z.string(),
            lastName: z.string(),
            marketingAutomation: z.lazy(() => MarketingAutomation$.inboundSchema).optional(),
            plan: z.array(z.lazy(() => Plan$.inboundSchema)),
            relay: z.lazy(() => Relay$.inboundSchema),
        })
        .transform((v) => {
            return {
                address: v.address,
                companyName: v.companyName,
                email: v.email,
                firstName: v.firstName,
                lastName: v.lastName,
                ...(v.marketingAutomation === undefined
                    ? null
                    : { marketingAutomation: v.marketingAutomation }),
                plan: v.plan,
                relay: v.relay,
            };
        });

    export type Outbound = {
        address: Address$.Outbound;
        companyName: string;
        email: string;
        firstName: string;
        lastName: string;
        marketingAutomation?: MarketingAutomation$.Outbound | undefined;
        plan: Array<Plan$.Outbound>;
        relay: Relay$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAccount> = z
        .object({
            address: z.lazy(() => Address$.outboundSchema),
            companyName: z.string(),
            email: z.string(),
            firstName: z.string(),
            lastName: z.string(),
            marketingAutomation: z.lazy(() => MarketingAutomation$.outboundSchema).optional(),
            plan: z.array(z.lazy(() => Plan$.outboundSchema)),
            relay: z.lazy(() => Relay$.outboundSchema),
        })
        .transform((v) => {
            return {
                address: v.address,
                companyName: v.companyName,
                email: v.email,
                firstName: v.firstName,
                lastName: v.lastName,
                ...(v.marketingAutomation === undefined
                    ? null
                    : { marketingAutomation: v.marketingAutomation }),
                plan: v.plan,
                relay: v.relay,
            };
        });
}
