/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Billing details of an order.
 */
export type Billing = {
    /**
     * Full billing address.
     */
    address?: string | undefined;
    /**
     * Exact city of the address.
     */
    city?: string | undefined;
    /**
     * Billing country 2-letter ISO code.
     */
    countryCode?: string | undefined;
    /**
     * How the visitor will pay for the item(s), e.g. paypal, check, etc.
     */
    paymentMethod?: string | undefined;
    /**
     * Phone number to contact for further details about the order, Mandatory if "email" field is not passed.
     */
    phone?: string | undefined;
    /**
     * Postcode for delivery and billing.
     */
    postCode?: string | undefined;
    /**
     * Exact region (state/province) for delivery and billing.
     */
    region?: string | undefined;
};

/**
 * Details for the Products in an order.
 */
export type OrderProducts = {
    /**
     * The price of a unit of product
     */
    price: number;
    /**
     * ID of the product.
     */
    productId: string;
    /**
     * How many pieces of the product the visitor has added to the cart.
     */
    quantity: number;
    /**
     * Product ID of the red color shirts.
     */
    variantId?: string | undefined;
};

export type Order = {
    /**
     * Total amount of the order, including all shipping expenses, tax and the price of items.
     */
    amount: number;
    /**
     * Billing details of an order.
     */
    billing?: Billing | undefined;
    /**
     * Coupons applied to the order. Stored case insensitive.
     */
    coupons?: Array<string> | undefined;
    /**
     * Event occurrence UTC date-time (YYYY-MM-DDTHH:mm:ssZ), when order is actually created.
     */
    createdAt: string;
    /**
     * Email of the contact, Mandatory if "phone" field is not passed in "billing" parameter.
     */
    email?: string | undefined;
    /**
     * Unique ID of the order.
     */
    id: string;
    products: Array<OrderProducts>;
    /**
     * State of the order.
     */
    status: string;
    /**
     * Event updated UTC date-time (YYYY-MM-DDTHH:mm:ssZ), when the status of the order is actually changed/updated.
     */
    updatedAt: string;
};

/** @internal */
export namespace Billing$ {
    export type Inbound = {
        address?: string | undefined;
        city?: string | undefined;
        countryCode?: string | undefined;
        paymentMethod?: string | undefined;
        phone?: string | undefined;
        postCode?: string | undefined;
        region?: string | undefined;
    };

    export const inboundSchema: z.ZodType<Billing, z.ZodTypeDef, Inbound> = z
        .object({
            address: z.string().optional(),
            city: z.string().optional(),
            countryCode: z.string().optional(),
            paymentMethod: z.string().optional(),
            phone: z.string().optional(),
            postCode: z.string().optional(),
            region: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.paymentMethod === undefined ? null : { paymentMethod: v.paymentMethod }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.postCode === undefined ? null : { postCode: v.postCode }),
                ...(v.region === undefined ? null : { region: v.region }),
            };
        });

    export type Outbound = {
        address?: string | undefined;
        city?: string | undefined;
        countryCode?: string | undefined;
        paymentMethod?: string | undefined;
        phone?: string | undefined;
        postCode?: string | undefined;
        region?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Billing> = z
        .object({
            address: z.string().optional(),
            city: z.string().optional(),
            countryCode: z.string().optional(),
            paymentMethod: z.string().optional(),
            phone: z.string().optional(),
            postCode: z.string().optional(),
            region: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.paymentMethod === undefined ? null : { paymentMethod: v.paymentMethod }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.postCode === undefined ? null : { postCode: v.postCode }),
                ...(v.region === undefined ? null : { region: v.region }),
            };
        });
}

/** @internal */
export namespace OrderProducts$ {
    export type Inbound = {
        price: number;
        productId: string;
        quantity: number;
        variantId?: string | undefined;
    };

    export const inboundSchema: z.ZodType<OrderProducts, z.ZodTypeDef, Inbound> = z
        .object({
            price: z.number(),
            productId: z.string(),
            quantity: z.number(),
            variantId: z.string().optional(),
        })
        .transform((v) => {
            return {
                price: v.price,
                productId: v.productId,
                quantity: v.quantity,
                ...(v.variantId === undefined ? null : { variantId: v.variantId }),
            };
        });

    export type Outbound = {
        price: number;
        productId: string;
        quantity: number;
        variantId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, OrderProducts> = z
        .object({
            price: z.number(),
            productId: z.string(),
            quantity: z.number(),
            variantId: z.string().optional(),
        })
        .transform((v) => {
            return {
                price: v.price,
                productId: v.productId,
                quantity: v.quantity,
                ...(v.variantId === undefined ? null : { variantId: v.variantId }),
            };
        });
}

/** @internal */
export namespace Order$ {
    export type Inbound = {
        amount: number;
        billing?: Billing$.Inbound | undefined;
        coupons?: Array<string> | undefined;
        createdAt: string;
        email?: string | undefined;
        id: string;
        products: Array<OrderProducts$.Inbound>;
        status: string;
        updatedAt: string;
    };

    export const inboundSchema: z.ZodType<Order, z.ZodTypeDef, Inbound> = z
        .object({
            amount: z.number(),
            billing: z.lazy(() => Billing$.inboundSchema).optional(),
            coupons: z.array(z.string()).optional(),
            createdAt: z.string(),
            email: z.string().optional(),
            id: z.string(),
            products: z.array(z.lazy(() => OrderProducts$.inboundSchema)),
            status: z.string(),
            updatedAt: z.string(),
        })
        .transform((v) => {
            return {
                amount: v.amount,
                ...(v.billing === undefined ? null : { billing: v.billing }),
                ...(v.coupons === undefined ? null : { coupons: v.coupons }),
                createdAt: v.createdAt,
                ...(v.email === undefined ? null : { email: v.email }),
                id: v.id,
                products: v.products,
                status: v.status,
                updatedAt: v.updatedAt,
            };
        });

    export type Outbound = {
        amount: number;
        billing?: Billing$.Outbound | undefined;
        coupons?: Array<string> | undefined;
        createdAt: string;
        email?: string | undefined;
        id: string;
        products: Array<OrderProducts$.Outbound>;
        status: string;
        updatedAt: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Order> = z
        .object({
            amount: z.number(),
            billing: z.lazy(() => Billing$.outboundSchema).optional(),
            coupons: z.array(z.string()).optional(),
            createdAt: z.string(),
            email: z.string().optional(),
            id: z.string(),
            products: z.array(z.lazy(() => OrderProducts$.outboundSchema)),
            status: z.string(),
            updatedAt: z.string(),
        })
        .transform((v) => {
            return {
                amount: v.amount,
                ...(v.billing === undefined ? null : { billing: v.billing }),
                ...(v.coupons === undefined ? null : { coupons: v.coupons }),
                createdAt: v.createdAt,
                ...(v.email === undefined ? null : { email: v.email }),
                id: v.id,
                products: v.products,
                status: v.status,
                updatedAt: v.updatedAt,
            };
        });
}
