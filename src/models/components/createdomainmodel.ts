/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type BrevoCode = {
    hostName?: string | undefined;
    status?: boolean | undefined;
    type?: string | undefined;
    value?: string | undefined;
};

export type DkimRecord = {
    hostName?: string | undefined;
    status?: boolean | undefined;
    type?: string | undefined;
    value?: string | undefined;
};

export type DnsRecords = {
    brevoCode?: BrevoCode | undefined;
    dkimRecord?: DkimRecord | undefined;
};

export type CreateDomainModel = {
    dnsRecords?: DnsRecords | undefined;
    /**
     * Domain
     */
    domainName?: string | undefined;
    /**
     * ID of the Domain created
     */
    id: number;
    /**
     * Success message
     */
    message?: string | undefined;
};

/** @internal */
export namespace BrevoCode$ {
    export type Inbound = {
        host_name?: string | undefined;
        status?: boolean | undefined;
        type?: string | undefined;
        value?: string | undefined;
    };

    export const inboundSchema: z.ZodType<BrevoCode, z.ZodTypeDef, Inbound> = z
        .object({
            host_name: z.string().optional(),
            status: z.boolean().optional(),
            type: z.string().optional(),
            value: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.host_name === undefined ? null : { hostName: v.host_name }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });

    export type Outbound = {
        host_name?: string | undefined;
        status?: boolean | undefined;
        type?: string | undefined;
        value?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, BrevoCode> = z
        .object({
            hostName: z.string().optional(),
            status: z.boolean().optional(),
            type: z.string().optional(),
            value: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.hostName === undefined ? null : { host_name: v.hostName }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });
}

/** @internal */
export namespace DkimRecord$ {
    export type Inbound = {
        host_name?: string | undefined;
        status?: boolean | undefined;
        type?: string | undefined;
        value?: string | undefined;
    };

    export const inboundSchema: z.ZodType<DkimRecord, z.ZodTypeDef, Inbound> = z
        .object({
            host_name: z.string().optional(),
            status: z.boolean().optional(),
            type: z.string().optional(),
            value: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.host_name === undefined ? null : { hostName: v.host_name }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });

    export type Outbound = {
        host_name?: string | undefined;
        status?: boolean | undefined;
        type?: string | undefined;
        value?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DkimRecord> = z
        .object({
            hostName: z.string().optional(),
            status: z.boolean().optional(),
            type: z.string().optional(),
            value: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.hostName === undefined ? null : { host_name: v.hostName }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });
}

/** @internal */
export namespace DnsRecords$ {
    export type Inbound = {
        brevo_code?: BrevoCode$.Inbound | undefined;
        dkim_record?: DkimRecord$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<DnsRecords, z.ZodTypeDef, Inbound> = z
        .object({
            brevo_code: z.lazy(() => BrevoCode$.inboundSchema).optional(),
            dkim_record: z.lazy(() => DkimRecord$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.brevo_code === undefined ? null : { brevoCode: v.brevo_code }),
                ...(v.dkim_record === undefined ? null : { dkimRecord: v.dkim_record }),
            };
        });

    export type Outbound = {
        brevo_code?: BrevoCode$.Outbound | undefined;
        dkim_record?: DkimRecord$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DnsRecords> = z
        .object({
            brevoCode: z.lazy(() => BrevoCode$.outboundSchema).optional(),
            dkimRecord: z.lazy(() => DkimRecord$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.brevoCode === undefined ? null : { brevo_code: v.brevoCode }),
                ...(v.dkimRecord === undefined ? null : { dkim_record: v.dkimRecord }),
            };
        });
}

/** @internal */
export namespace CreateDomainModel$ {
    export type Inbound = {
        dns_records?: DnsRecords$.Inbound | undefined;
        domain_name?: string | undefined;
        id: number;
        message?: string | undefined;
    };

    export const inboundSchema: z.ZodType<CreateDomainModel, z.ZodTypeDef, Inbound> = z
        .object({
            dns_records: z.lazy(() => DnsRecords$.inboundSchema).optional(),
            domain_name: z.string().optional(),
            id: z.number().int(),
            message: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.dns_records === undefined ? null : { dnsRecords: v.dns_records }),
                ...(v.domain_name === undefined ? null : { domainName: v.domain_name }),
                id: v.id,
                ...(v.message === undefined ? null : { message: v.message }),
            };
        });

    export type Outbound = {
        dns_records?: DnsRecords$.Outbound | undefined;
        domain_name?: string | undefined;
        id: number;
        message?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateDomainModel> = z
        .object({
            dnsRecords: z.lazy(() => DnsRecords$.outboundSchema).optional(),
            domainName: z.string().optional(),
            id: z.number().int(),
            message: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.dnsRecords === undefined ? null : { dns_records: v.dnsRecords }),
                ...(v.domainName === undefined ? null : { domain_name: v.domainName }),
                id: v.id,
                ...(v.message === undefined ? null : { message: v.message }),
            };
        });
}
