/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

/**
 * Account details of user which created the note
 */
export type AuthorId = {};

/**
 * Note Details
 */
export type Note = {
    /**
     * Account details of user which created the note
     */
    authorId?: AuthorId | undefined;
    /**
     * Contact ids linked to a note
     */
    contactIds?: Array<number> | undefined;
    /**
     * Note created date/time
     */
    createdAt?: Date | undefined;
    /**
     * Deal ids linked to a note
     */
    dealIds?: Array<string> | undefined;
    /**
     * Unique note Id
     */
    id?: string | undefined;
    /**
     * Text content of a note
     */
    text: string;
    /**
     * Note updated date/time
     */
    updatedAt?: Date | undefined;
};

/** @internal */
export namespace AuthorId$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<AuthorId, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AuthorId> = z.object({});
}

/** @internal */
export namespace Note$ {
    export type Inbound = {
        authorId?: AuthorId$.Inbound | undefined;
        contactIds?: Array<number> | undefined;
        createdAt?: string | undefined;
        dealIds?: Array<string> | undefined;
        id?: string | undefined;
        text: string;
        updatedAt?: string | undefined;
    };

    export const inboundSchema: z.ZodType<Note, z.ZodTypeDef, Inbound> = z
        .object({
            authorId: z.lazy(() => AuthorId$.inboundSchema).optional(),
            contactIds: z.array(z.number().int()).optional(),
            createdAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            dealIds: z.array(z.string()).optional(),
            id: z.string().optional(),
            text: z.string(),
            updatedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.authorId === undefined ? null : { authorId: v.authorId }),
                ...(v.contactIds === undefined ? null : { contactIds: v.contactIds }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.dealIds === undefined ? null : { dealIds: v.dealIds }),
                ...(v.id === undefined ? null : { id: v.id }),
                text: v.text,
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
            };
        });

    export type Outbound = {
        authorId?: AuthorId$.Outbound | undefined;
        contactIds?: Array<number> | undefined;
        createdAt?: string | undefined;
        dealIds?: Array<string> | undefined;
        id?: string | undefined;
        text: string;
        updatedAt?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Note> = z
        .object({
            authorId: z.lazy(() => AuthorId$.outboundSchema).optional(),
            contactIds: z.array(z.number().int()).optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            dealIds: z.array(z.string()).optional(),
            id: z.string().optional(),
            text: z.string(),
            updatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.authorId === undefined ? null : { authorId: v.authorId }),
                ...(v.contactIds === undefined ? null : { contactIds: v.contactIds }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.dealIds === undefined ? null : { dealIds: v.dealIds }),
                ...(v.id === undefined ? null : { id: v.id }),
                text: v.text,
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
            };
        });
}
