/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Order, Order$ } from "./order";
import * as z from "zod";

export type OrderBatch = {
    /**
     * Notify Url provided by client to get the status of batch request
     */
    notifyUrl?: string | undefined;
    /**
     * array of order objects
     */
    orders: Array<Order>;
};

/** @internal */
export namespace OrderBatch$ {
    export type Inbound = {
        notifyUrl?: string | undefined;
        orders: Array<Order$.Inbound>;
    };

    export const inboundSchema: z.ZodType<OrderBatch, z.ZodTypeDef, Inbound> = z
        .object({
            notifyUrl: z.string().optional(),
            orders: z.array(Order$.inboundSchema),
        })
        .transform((v) => {
            return {
                ...(v.notifyUrl === undefined ? null : { notifyUrl: v.notifyUrl }),
                orders: v.orders,
            };
        });

    export type Outbound = {
        notifyUrl?: string | undefined;
        orders: Array<Order$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, OrderBatch> = z
        .object({
            notifyUrl: z.string().optional(),
            orders: z.array(Order$.outboundSchema),
        })
        .transform((v) => {
            return {
                ...(v.notifyUrl === undefined ? null : { notifyUrl: v.notifyUrl }),
                orders: v.orders,
            };
        });
}
