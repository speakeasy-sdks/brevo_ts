/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * **Mandatory if neither actionForEmailCampaigns nor actionForSmsCampaigns is passed.** This will export the contacts on the basis of provided action applied on contacts as per the list id.
 *
 * @remarks
 * * **allContacts** - Fetch the list of all contacts for a particular list.
 * * **subscribed & unsubscribed** - Fetch the list of subscribed / unsubscribed (blacklisted via any means) contacts for a particular list.
 * * **unsubscribedPerList** - Fetch the list of contacts that are unsubscribed from a particular list only.
 *
 */
export enum ActionForContacts {
    AllContacts = "allContacts",
    Subscribed = "subscribed",
    Unsubscribed = "unsubscribed",
    UnsubscribedPerList = "unsubscribedPerList",
}

/**
 * **Mandatory if neither actionForContacts nor actionForSmsCampaigns is passed.** This will export the contacts on the basis of provided action applied on email campaigns.
 *
 * @remarks
 * * **openers & nonOpeners** - emailCampaignId is mandatory. Fetch the list of readers / non-readers for a particular email campaign.
 * * **clickers & nonClickers** - emailCampaignId is mandatory. Fetch the list of clickers / non-clickers for a particular email campaign.
 * * **unsubscribed** - emailCampaignId is mandatory. Fetch the list of all unsubscribed (blacklisted via any means) contacts for a particular email campaign.
 * * **hardBounces & softBounces** - emailCampaignId is optional. Fetch the list of hard bounces / soft bounces for a particular / all email campaign(s).
 *
 */
export enum ActionForEmailCampaigns {
    Openers = "openers",
    NonOpeners = "nonOpeners",
    Clickers = "clickers",
    NonClickers = "nonClickers",
    Unsubscribed = "unsubscribed",
    HardBounces = "hardBounces",
    SoftBounces = "softBounces",
}

/**
 * **Mandatory if neither actionForContacts nor actionForEmailCampaigns is passed.** This will export the contacts on the basis of provided action applied on sms campaigns.
 *
 * @remarks
 * * **unsubscribed** - Fetch the list of all unsubscribed (blacklisted via any means) contacts for all / particular sms campaigns.
 * * **hardBounces & softBounces** - Fetch the list of hard bounces / soft bounces for all / particular sms campaigns.
 *
 */
export enum ActionForSmsCampaigns {
    HardBounces = "hardBounces",
    SoftBounces = "softBounces",
    Unsubscribed = "unsubscribed",
}

/**
 * Set the filter for the contacts to be exported.
 *
 * @remarks
 *
 */
export type CustomContactFilter = {
    /**
     * **Mandatory if neither actionForEmailCampaigns nor actionForSmsCampaigns is passed.** This will export the contacts on the basis of provided action applied on contacts as per the list id.
     *
     * @remarks
     * * **allContacts** - Fetch the list of all contacts for a particular list.
     * * **subscribed & unsubscribed** - Fetch the list of subscribed / unsubscribed (blacklisted via any means) contacts for a particular list.
     * * **unsubscribedPerList** - Fetch the list of contacts that are unsubscribed from a particular list only.
     *
     */
    actionForContacts?: ActionForContacts | undefined;
    /**
     * **Mandatory if neither actionForContacts nor actionForSmsCampaigns is passed.** This will export the contacts on the basis of provided action applied on email campaigns.
     *
     * @remarks
     * * **openers & nonOpeners** - emailCampaignId is mandatory. Fetch the list of readers / non-readers for a particular email campaign.
     * * **clickers & nonClickers** - emailCampaignId is mandatory. Fetch the list of clickers / non-clickers for a particular email campaign.
     * * **unsubscribed** - emailCampaignId is mandatory. Fetch the list of all unsubscribed (blacklisted via any means) contacts for a particular email campaign.
     * * **hardBounces & softBounces** - emailCampaignId is optional. Fetch the list of hard bounces / soft bounces for a particular / all email campaign(s).
     *
     */
    actionForEmailCampaigns?: ActionForEmailCampaigns | undefined;
    /**
     * **Mandatory if neither actionForContacts nor actionForEmailCampaigns is passed.** This will export the contacts on the basis of provided action applied on sms campaigns.
     *
     * @remarks
     * * **unsubscribed** - Fetch the list of all unsubscribed (blacklisted via any means) contacts for all / particular sms campaigns.
     * * **hardBounces & softBounces** - Fetch the list of hard bounces / soft bounces for all / particular sms campaigns.
     *
     */
    actionForSmsCampaigns?: ActionForSmsCampaigns | undefined;
    /**
     * Considered only if **actionForEmailCampaigns** is passed, ignored otherwise. **Mandatory if action is one of the following - openers, nonOpeners, clickers, nonClickers, unsubscribed.**
     *
     * @remarks
     * The id of the email campaign for which the corresponding action shall be applied in the filter.
     *
     */
    emailCampaignId?: number | undefined;
    /**
     * **Mandatory if actionForContacts is passed, ignored otherwise.** Id of the list for which the corresponding action shall be applied in the filter.
     *
     * @remarks
     *
     */
    listId?: number | undefined;
    /**
     * Considered only if **actionForSmsCampaigns** is passed, ignored otherwise. The id of sms campaign for which the corresponding action shall be applied in the filter.
     *
     * @remarks
     *
     */
    smsCampaignId?: number | undefined;
};

export type RequestContactExport = {
    /**
     * Set the filter for the contacts to be exported.
     *
     * @remarks
     *
     */
    customContactFilter: CustomContactFilter;
    /**
     * List of all the attributes that you want to export. **These attributes must be present in your contact database.** For example:
     *
     * @remarks
     * **['fname', 'lname', 'email']**
     *
     */
    exportAttributes?: Array<string> | undefined;
    /**
     * Webhook that will be called once the export process is finished. For reference, https://help.brevo.com/hc/en-us/articles/360007666479
     */
    notifyUrl?: string | undefined;
};

/** @internal */
export const ActionForContacts$ = z.nativeEnum(ActionForContacts);

/** @internal */
export const ActionForEmailCampaigns$ = z.nativeEnum(ActionForEmailCampaigns);

/** @internal */
export const ActionForSmsCampaigns$ = z.nativeEnum(ActionForSmsCampaigns);

/** @internal */
export namespace CustomContactFilter$ {
    export type Inbound = {
        actionForContacts?: ActionForContacts | undefined;
        actionForEmailCampaigns?: ActionForEmailCampaigns | undefined;
        actionForSmsCampaigns?: ActionForSmsCampaigns | undefined;
        emailCampaignId?: number | undefined;
        listId?: number | undefined;
        smsCampaignId?: number | undefined;
    };

    export const inboundSchema: z.ZodType<CustomContactFilter, z.ZodTypeDef, Inbound> = z
        .object({
            actionForContacts: ActionForContacts$.optional(),
            actionForEmailCampaigns: ActionForEmailCampaigns$.optional(),
            actionForSmsCampaigns: ActionForSmsCampaigns$.optional(),
            emailCampaignId: z.number().int().optional(),
            listId: z.number().int().optional(),
            smsCampaignId: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.actionForContacts === undefined
                    ? null
                    : { actionForContacts: v.actionForContacts }),
                ...(v.actionForEmailCampaigns === undefined
                    ? null
                    : { actionForEmailCampaigns: v.actionForEmailCampaigns }),
                ...(v.actionForSmsCampaigns === undefined
                    ? null
                    : { actionForSmsCampaigns: v.actionForSmsCampaigns }),
                ...(v.emailCampaignId === undefined
                    ? null
                    : { emailCampaignId: v.emailCampaignId }),
                ...(v.listId === undefined ? null : { listId: v.listId }),
                ...(v.smsCampaignId === undefined ? null : { smsCampaignId: v.smsCampaignId }),
            };
        });

    export type Outbound = {
        actionForContacts?: ActionForContacts | undefined;
        actionForEmailCampaigns?: ActionForEmailCampaigns | undefined;
        actionForSmsCampaigns?: ActionForSmsCampaigns | undefined;
        emailCampaignId?: number | undefined;
        listId?: number | undefined;
        smsCampaignId?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CustomContactFilter> = z
        .object({
            actionForContacts: ActionForContacts$.optional(),
            actionForEmailCampaigns: ActionForEmailCampaigns$.optional(),
            actionForSmsCampaigns: ActionForSmsCampaigns$.optional(),
            emailCampaignId: z.number().int().optional(),
            listId: z.number().int().optional(),
            smsCampaignId: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.actionForContacts === undefined
                    ? null
                    : { actionForContacts: v.actionForContacts }),
                ...(v.actionForEmailCampaigns === undefined
                    ? null
                    : { actionForEmailCampaigns: v.actionForEmailCampaigns }),
                ...(v.actionForSmsCampaigns === undefined
                    ? null
                    : { actionForSmsCampaigns: v.actionForSmsCampaigns }),
                ...(v.emailCampaignId === undefined
                    ? null
                    : { emailCampaignId: v.emailCampaignId }),
                ...(v.listId === undefined ? null : { listId: v.listId }),
                ...(v.smsCampaignId === undefined ? null : { smsCampaignId: v.smsCampaignId }),
            };
        });
}

/** @internal */
export namespace RequestContactExport$ {
    export type Inbound = {
        customContactFilter: CustomContactFilter$.Inbound;
        exportAttributes?: Array<string> | undefined;
        notifyUrl?: string | undefined;
    };

    export const inboundSchema: z.ZodType<RequestContactExport, z.ZodTypeDef, Inbound> = z
        .object({
            customContactFilter: z.lazy(() => CustomContactFilter$.inboundSchema),
            exportAttributes: z.array(z.string()).optional(),
            notifyUrl: z.string().optional(),
        })
        .transform((v) => {
            return {
                customContactFilter: v.customContactFilter,
                ...(v.exportAttributes === undefined
                    ? null
                    : { exportAttributes: v.exportAttributes }),
                ...(v.notifyUrl === undefined ? null : { notifyUrl: v.notifyUrl }),
            };
        });

    export type Outbound = {
        customContactFilter: CustomContactFilter$.Outbound;
        exportAttributes?: Array<string> | undefined;
        notifyUrl?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RequestContactExport> = z
        .object({
            customContactFilter: z.lazy(() => CustomContactFilter$.outboundSchema),
            exportAttributes: z.array(z.string()).optional(),
            notifyUrl: z.string().optional(),
        })
        .transform((v) => {
            return {
                customContactFilter: v.customContactFilter,
                ...(v.exportAttributes === undefined
                    ? null
                    : { exportAttributes: v.exportAttributes }),
                ...(v.notifyUrl === undefined ? null : { notifyUrl: v.notifyUrl }),
            };
        });
}
