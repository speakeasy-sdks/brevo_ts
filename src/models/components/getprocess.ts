/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

/**
 * Status of the process
 */
export enum GetProcessStatus {
    Queued = "queued",
    InProcess = "in_process",
    Completed = "completed",
}

export type GetProcess = {
    /**
     * URL on which send export the of contacts once the process is completed
     */
    exportUrl?: string | undefined;
    /**
     * Id of the process
     */
    id: number;
    /**
     * Process name
     */
    name: string;
    /**
     * Status of the process
     */
    status: GetProcessStatus;
};

/** @internal */
export const GetProcessStatus$ = z.nativeEnum(GetProcessStatus);

/** @internal */
export namespace GetProcess$ {
    export type Inbound = {
        export_url?: string | undefined;
        id: number;
        name: string;
        status: GetProcessStatus;
    };

    export const inboundSchema: z.ZodType<GetProcess, z.ZodTypeDef, Inbound> = z
        .object({
            export_url: z.string().optional(),
            id: z.number().int(),
            name: z.string(),
            status: GetProcessStatus$,
        })
        .transform((v) => {
            return {
                ...(v.export_url === undefined ? null : { exportUrl: v.export_url }),
                id: v.id,
                name: v.name,
                status: v.status,
            };
        });

    export type Outbound = {
        export_url?: string | undefined;
        id: number;
        name: string;
        status: GetProcessStatus;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProcess> = z
        .object({
            exportUrl: z.string().optional(),
            id: z.number().int(),
            name: z.string(),
            status: GetProcessStatus$,
        })
        .transform((v) => {
            return {
                ...(v.exportUrl === undefined ? null : { export_url: v.exportUrl }),
                id: v.id,
                name: v.name,
                status: v.status,
            };
        });
}
