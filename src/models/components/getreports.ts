/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { RFCDate } from "../../types";
import * as z from "zod";

export type Reports = {
    /**
     * Number of blocked emails for the date
     */
    blocked: number;
    /**
     * Number of clicks for the date
     */
    clicks: number;
    /**
     * Date of the statistics
     */
    date: RFCDate;
    /**
     * Number of delivered emails for the date
     */
    delivered: number;
    /**
     * Number of hardbounces for the date
     */
    hardBounces: number;
    /**
     * Number of invalid emails for the date
     */
    invalid: number;
    /**
     * Number of openings for the date
     */
    opens: number;
    /**
     * Number of requests for the date
     */
    requests: number;
    /**
     * Number of softbounces for the date
     */
    softBounces: number;
    /**
     * Number of complaints (spam reports) for the date
     */
    spamReports: number;
    /**
     * Number of unique clicks for the date
     */
    uniqueClicks: number;
    /**
     * Number of unique openings for the date
     */
    uniqueOpens: number;
    /**
     * Number of unsubscribed emails for the date
     */
    unsubscribed: number;
};

export type GetReports = {
    reports?: Array<Reports> | undefined;
};

/** @internal */
export namespace Reports$ {
    export type Inbound = {
        blocked: number;
        clicks: number;
        date: string;
        delivered: number;
        hardBounces: number;
        invalid: number;
        opens: number;
        requests: number;
        softBounces: number;
        spamReports: number;
        uniqueClicks: number;
        uniqueOpens: number;
        unsubscribed: number;
    };

    export const inboundSchema: z.ZodType<Reports, z.ZodTypeDef, Inbound> = z
        .object({
            blocked: z.number().int(),
            clicks: z.number().int(),
            date: z.string().transform((v) => new RFCDate(v)),
            delivered: z.number().int(),
            hardBounces: z.number().int(),
            invalid: z.number().int(),
            opens: z.number().int(),
            requests: z.number().int(),
            softBounces: z.number().int(),
            spamReports: z.number().int(),
            uniqueClicks: z.number().int(),
            uniqueOpens: z.number().int(),
            unsubscribed: z.number().int(),
        })
        .transform((v) => {
            return {
                blocked: v.blocked,
                clicks: v.clicks,
                date: v.date,
                delivered: v.delivered,
                hardBounces: v.hardBounces,
                invalid: v.invalid,
                opens: v.opens,
                requests: v.requests,
                softBounces: v.softBounces,
                spamReports: v.spamReports,
                uniqueClicks: v.uniqueClicks,
                uniqueOpens: v.uniqueOpens,
                unsubscribed: v.unsubscribed,
            };
        });

    export type Outbound = {
        blocked: number;
        clicks: number;
        date: string;
        delivered: number;
        hardBounces: number;
        invalid: number;
        opens: number;
        requests: number;
        softBounces: number;
        spamReports: number;
        uniqueClicks: number;
        uniqueOpens: number;
        unsubscribed: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Reports> = z
        .object({
            blocked: z.number().int(),
            clicks: z.number().int(),
            date: z.instanceof(RFCDate).transform((v) => v.toString()),
            delivered: z.number().int(),
            hardBounces: z.number().int(),
            invalid: z.number().int(),
            opens: z.number().int(),
            requests: z.number().int(),
            softBounces: z.number().int(),
            spamReports: z.number().int(),
            uniqueClicks: z.number().int(),
            uniqueOpens: z.number().int(),
            unsubscribed: z.number().int(),
        })
        .transform((v) => {
            return {
                blocked: v.blocked,
                clicks: v.clicks,
                date: v.date,
                delivered: v.delivered,
                hardBounces: v.hardBounces,
                invalid: v.invalid,
                opens: v.opens,
                requests: v.requests,
                softBounces: v.softBounces,
                spamReports: v.spamReports,
                uniqueClicks: v.uniqueClicks,
                uniqueOpens: v.uniqueOpens,
                unsubscribed: v.unsubscribed,
            };
        });
}

/** @internal */
export namespace GetReports$ {
    export type Inbound = {
        reports?: Array<Reports$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<GetReports, z.ZodTypeDef, Inbound> = z
        .object({
            reports: z.array(z.lazy(() => Reports$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.reports === undefined ? null : { reports: v.reports }),
            };
        });

    export type Outbound = {
        reports?: Array<Reports$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetReports> = z
        .object({
            reports: z.array(z.lazy(() => Reports$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.reports === undefined ? null : { reports: v.reports }),
            };
        });
}
