/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type GetTransacEmailContentEvents = {
    /**
     * Name of the event that occurred on the sent email
     */
    name: string;
    /**
     * Time at which the event occurred
     */
    time: string;
};

export type GetTransacEmailContent = {
    /**
     * Count of the attachments that were sent in the email
     */
    attachmentCount: number;
    /**
     * Actual content of the transactional email that has been sent
     */
    body: string;
    /**
     * Date on which transactional email was sent
     */
    date: string;
    /**
     * Email address to which transactional email has been sent
     */
    email: string;
    /**
     * Series of events which occurred on the transactional email
     */
    events: Array<GetTransacEmailContentEvents>;
    /**
     * Subject of the sent email
     */
    subject: string;
    /**
     * Id of the template
     */
    templateId?: number | undefined;
};

/** @internal */
export namespace GetTransacEmailContentEvents$ {
    export type Inbound = {
        name: string;
        time: string;
    };

    export const inboundSchema: z.ZodType<GetTransacEmailContentEvents, z.ZodTypeDef, Inbound> = z
        .object({
            name: z.string(),
            time: z.string(),
        })
        .transform((v) => {
            return {
                name: v.name,
                time: v.time,
            };
        });

    export type Outbound = {
        name: string;
        time: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTransacEmailContentEvents> = z
        .object({
            name: z.string(),
            time: z.string(),
        })
        .transform((v) => {
            return {
                name: v.name,
                time: v.time,
            };
        });
}

/** @internal */
export namespace GetTransacEmailContent$ {
    export type Inbound = {
        attachmentCount: number;
        body: string;
        date: string;
        email: string;
        events: Array<GetTransacEmailContentEvents$.Inbound>;
        subject: string;
        templateId?: number | undefined;
    };

    export const inboundSchema: z.ZodType<GetTransacEmailContent, z.ZodTypeDef, Inbound> = z
        .object({
            attachmentCount: z.number().int(),
            body: z.string(),
            date: z.string(),
            email: z.string(),
            events: z.array(z.lazy(() => GetTransacEmailContentEvents$.inboundSchema)),
            subject: z.string(),
            templateId: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                attachmentCount: v.attachmentCount,
                body: v.body,
                date: v.date,
                email: v.email,
                events: v.events,
                subject: v.subject,
                ...(v.templateId === undefined ? null : { templateId: v.templateId }),
            };
        });

    export type Outbound = {
        attachmentCount: number;
        body: string;
        date: string;
        email: string;
        events: Array<GetTransacEmailContentEvents$.Outbound>;
        subject: string;
        templateId?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTransacEmailContent> = z
        .object({
            attachmentCount: z.number().int(),
            body: z.string(),
            date: z.string(),
            email: z.string(),
            events: z.array(z.lazy(() => GetTransacEmailContentEvents$.outboundSchema)),
            subject: z.string(),
            templateId: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                attachmentCount: v.attachmentCount,
                body: v.body,
                date: v.date,
                email: v.email,
                events: v.events,
                subject: v.subject,
                ...(v.templateId === undefined ? null : { templateId: v.templateId }),
            };
        });
}
