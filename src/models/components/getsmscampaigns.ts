/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type GetSmsCampaignsRecipients = {
    exclusionLists: Array<number>;
    lists: Array<number>;
};

export type GetSmsCampaignsStatistics = {
    /**
     * Number of replies to the SMS
     */
    answered: number;
    /**
     * Number of delivered SMS
     */
    delivered: number;
    /**
     * Number of hardbounced SMS
     */
    hardBounces: number;
    /**
     * Number of processing SMS
     */
    processing: number;
    /**
     * Number of sent SMS
     */
    sent: number;
    /**
     * Number of softbounced SMS
     */
    softBounces: number;
    /**
     * Number of unsubscription SMS
     */
    unsubscriptions: number;
};

/**
 * Status of the SMS Campaign
 */
export enum GetSmsCampaignsStatus {
    Draft = "draft",
    Sent = "sent",
    Archive = "archive",
    Queued = "queued",
    Suspended = "suspended",
    InProcess = "inProcess",
}

export type GetSmsCampaignsCampaigns = {
    /**
     * Content of the SMS Campaign
     */
    content: string;
    /**
     * Creation UTC date-time of the SMS campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)
     */
    createdAt: string;
    /**
     * ID of the SMS Campaign
     */
    id: number;
    /**
     * UTC date-time of last modification of the SMS campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)
     */
    modifiedAt: string;
    /**
     * Name of the SMS Campaign
     */
    name: string;
    recipients: GetSmsCampaignsRecipients;
    /**
     * UTC date-time on which SMS campaign is scheduled. Should be in YYYY-MM-DDTHH:mm:ss.SSSZ format
     */
    scheduledAt?: string | undefined;
    /**
     * Sender of the SMS Campaign
     */
    sender: string;
    statistics: GetSmsCampaignsStatistics;
    /**
     * Status of the SMS Campaign
     */
    status: GetSmsCampaignsStatus;
};

export type GetSmsCampaigns = {
    campaigns?: Array<GetSmsCampaignsCampaigns> | undefined;
    /**
     * Number of SMS campaigns retrieved
     */
    count?: number | undefined;
};

/** @internal */
export namespace GetSmsCampaignsRecipients$ {
    export type Inbound = {
        exclusionLists: Array<number>;
        lists: Array<number>;
    };

    export const inboundSchema: z.ZodType<GetSmsCampaignsRecipients, z.ZodTypeDef, Inbound> = z
        .object({
            exclusionLists: z.array(z.number().int()),
            lists: z.array(z.number().int()),
        })
        .transform((v) => {
            return {
                exclusionLists: v.exclusionLists,
                lists: v.lists,
            };
        });

    export type Outbound = {
        exclusionLists: Array<number>;
        lists: Array<number>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetSmsCampaignsRecipients> = z
        .object({
            exclusionLists: z.array(z.number().int()),
            lists: z.array(z.number().int()),
        })
        .transform((v) => {
            return {
                exclusionLists: v.exclusionLists,
                lists: v.lists,
            };
        });
}

/** @internal */
export namespace GetSmsCampaignsStatistics$ {
    export type Inbound = {
        answered: number;
        delivered: number;
        hardBounces: number;
        processing: number;
        sent: number;
        softBounces: number;
        unsubscriptions: number;
    };

    export const inboundSchema: z.ZodType<GetSmsCampaignsStatistics, z.ZodTypeDef, Inbound> = z
        .object({
            answered: z.number().int(),
            delivered: z.number().int(),
            hardBounces: z.number().int(),
            processing: z.number().int(),
            sent: z.number().int(),
            softBounces: z.number().int(),
            unsubscriptions: z.number().int(),
        })
        .transform((v) => {
            return {
                answered: v.answered,
                delivered: v.delivered,
                hardBounces: v.hardBounces,
                processing: v.processing,
                sent: v.sent,
                softBounces: v.softBounces,
                unsubscriptions: v.unsubscriptions,
            };
        });

    export type Outbound = {
        answered: number;
        delivered: number;
        hardBounces: number;
        processing: number;
        sent: number;
        softBounces: number;
        unsubscriptions: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetSmsCampaignsStatistics> = z
        .object({
            answered: z.number().int(),
            delivered: z.number().int(),
            hardBounces: z.number().int(),
            processing: z.number().int(),
            sent: z.number().int(),
            softBounces: z.number().int(),
            unsubscriptions: z.number().int(),
        })
        .transform((v) => {
            return {
                answered: v.answered,
                delivered: v.delivered,
                hardBounces: v.hardBounces,
                processing: v.processing,
                sent: v.sent,
                softBounces: v.softBounces,
                unsubscriptions: v.unsubscriptions,
            };
        });
}

/** @internal */
export const GetSmsCampaignsStatus$ = z.nativeEnum(GetSmsCampaignsStatus);

/** @internal */
export namespace GetSmsCampaignsCampaigns$ {
    export type Inbound = {
        content: string;
        createdAt: string;
        id: number;
        modifiedAt: string;
        name: string;
        recipients: GetSmsCampaignsRecipients$.Inbound;
        scheduledAt?: string | undefined;
        sender: string;
        statistics: GetSmsCampaignsStatistics$.Inbound;
        status: GetSmsCampaignsStatus;
    };

    export const inboundSchema: z.ZodType<GetSmsCampaignsCampaigns, z.ZodTypeDef, Inbound> = z
        .object({
            content: z.string(),
            createdAt: z.string(),
            id: z.number().int(),
            modifiedAt: z.string(),
            name: z.string(),
            recipients: z.lazy(() => GetSmsCampaignsRecipients$.inboundSchema),
            scheduledAt: z.string().optional(),
            sender: z.string(),
            statistics: z.lazy(() => GetSmsCampaignsStatistics$.inboundSchema),
            status: GetSmsCampaignsStatus$,
        })
        .transform((v) => {
            return {
                content: v.content,
                createdAt: v.createdAt,
                id: v.id,
                modifiedAt: v.modifiedAt,
                name: v.name,
                recipients: v.recipients,
                ...(v.scheduledAt === undefined ? null : { scheduledAt: v.scheduledAt }),
                sender: v.sender,
                statistics: v.statistics,
                status: v.status,
            };
        });

    export type Outbound = {
        content: string;
        createdAt: string;
        id: number;
        modifiedAt: string;
        name: string;
        recipients: GetSmsCampaignsRecipients$.Outbound;
        scheduledAt?: string | undefined;
        sender: string;
        statistics: GetSmsCampaignsStatistics$.Outbound;
        status: GetSmsCampaignsStatus;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetSmsCampaignsCampaigns> = z
        .object({
            content: z.string(),
            createdAt: z.string(),
            id: z.number().int(),
            modifiedAt: z.string(),
            name: z.string(),
            recipients: z.lazy(() => GetSmsCampaignsRecipients$.outboundSchema),
            scheduledAt: z.string().optional(),
            sender: z.string(),
            statistics: z.lazy(() => GetSmsCampaignsStatistics$.outboundSchema),
            status: GetSmsCampaignsStatus$,
        })
        .transform((v) => {
            return {
                content: v.content,
                createdAt: v.createdAt,
                id: v.id,
                modifiedAt: v.modifiedAt,
                name: v.name,
                recipients: v.recipients,
                ...(v.scheduledAt === undefined ? null : { scheduledAt: v.scheduledAt }),
                sender: v.sender,
                statistics: v.statistics,
                status: v.status,
            };
        });
}

/** @internal */
export namespace GetSmsCampaigns$ {
    export type Inbound = {
        campaigns?: Array<GetSmsCampaignsCampaigns$.Inbound> | undefined;
        count?: number | undefined;
    };

    export const inboundSchema: z.ZodType<GetSmsCampaigns, z.ZodTypeDef, Inbound> = z
        .object({
            campaigns: z.array(z.lazy(() => GetSmsCampaignsCampaigns$.inboundSchema)).optional(),
            count: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.campaigns === undefined ? null : { campaigns: v.campaigns }),
                ...(v.count === undefined ? null : { count: v.count }),
            };
        });

    export type Outbound = {
        campaigns?: Array<GetSmsCampaignsCampaigns$.Outbound> | undefined;
        count?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetSmsCampaigns> = z
        .object({
            campaigns: z.array(z.lazy(() => GetSmsCampaignsCampaigns$.outboundSchema)).optional(),
            count: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.campaigns === undefined ? null : { campaigns: v.campaigns }),
                ...(v.count === undefined ? null : { count: v.count }),
            };
        });
}
