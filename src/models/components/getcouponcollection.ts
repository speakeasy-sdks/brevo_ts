/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type GetCouponCollection = {
    /**
     * Datetime on which the collection was created
     */
    createdAt: Date;
    /**
     * The default coupon of the collection
     */
    defaultCoupon: string;
    /**
     * The id of the collection
     */
    id: string;
    /**
     * The name of the collection
     */
    name: string;
    /**
     * Not sent coupons in the collection
     */
    remainingCoupons: number;
    /**
     * Total coupons in the collection
     */
    totalCoupons: number;
};

/** @internal */
export namespace GetCouponCollection$ {
    export type Inbound = {
        createdAt: string;
        defaultCoupon: string;
        id: string;
        name: string;
        remainingCoupons: number;
        totalCoupons: number;
    };

    export const inboundSchema: z.ZodType<GetCouponCollection, z.ZodTypeDef, Inbound> = z
        .object({
            createdAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            defaultCoupon: z.string(),
            id: z.string(),
            name: z.string(),
            remainingCoupons: z.number().int(),
            totalCoupons: z.number().int(),
        })
        .transform((v) => {
            return {
                createdAt: v.createdAt,
                defaultCoupon: v.defaultCoupon,
                id: v.id,
                name: v.name,
                remainingCoupons: v.remainingCoupons,
                totalCoupons: v.totalCoupons,
            };
        });

    export type Outbound = {
        createdAt: string;
        defaultCoupon: string;
        id: string;
        name: string;
        remainingCoupons: number;
        totalCoupons: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCouponCollection> = z
        .object({
            createdAt: z.date().transform((v) => v.toISOString()),
            defaultCoupon: z.string(),
            id: z.string(),
            name: z.string(),
            remainingCoupons: z.number().int(),
            totalCoupons: z.number().int(),
        })
        .transform((v) => {
            return {
                createdAt: v.createdAt,
                defaultCoupon: v.defaultCoupon,
                id: v.id,
                name: v.name,
                remainingCoupons: v.remainingCoupons,
                totalCoupons: v.totalCoupons,
            };
        });
}
