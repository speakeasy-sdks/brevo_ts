/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Note data to be saved
 */
export type NoteData = {
    /**
     * Company Ids linked to a note
     */
    companyIds?: Array<string> | undefined;
    /**
     * Contact Ids linked to a note
     */
    contactIds?: Array<number> | undefined;
    /**
     * Deal Ids linked to a note
     */
    dealIds?: Array<string> | undefined;
    /**
     * Text content of a note
     */
    text: string;
};

/** @internal */
export namespace NoteData$ {
    export type Inbound = {
        companyIds?: Array<string> | undefined;
        contactIds?: Array<number> | undefined;
        dealIds?: Array<string> | undefined;
        text: string;
    };

    export const inboundSchema: z.ZodType<NoteData, z.ZodTypeDef, Inbound> = z
        .object({
            companyIds: z.array(z.string()).optional(),
            contactIds: z.array(z.number().int()).optional(),
            dealIds: z.array(z.string()).optional(),
            text: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.companyIds === undefined ? null : { companyIds: v.companyIds }),
                ...(v.contactIds === undefined ? null : { contactIds: v.contactIds }),
                ...(v.dealIds === undefined ? null : { dealIds: v.dealIds }),
                text: v.text,
            };
        });

    export type Outbound = {
        companyIds?: Array<string> | undefined;
        contactIds?: Array<number> | undefined;
        dealIds?: Array<string> | undefined;
        text: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, NoteData> = z
        .object({
            companyIds: z.array(z.string()).optional(),
            contactIds: z.array(z.number().int()).optional(),
            dealIds: z.array(z.string()).optional(),
            text: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.companyIds === undefined ? null : { companyIds: v.companyIds }),
                ...(v.contactIds === undefined ? null : { contactIds: v.contactIds }),
                ...(v.dealIds === undefined ? null : { dealIds: v.dealIds }),
                text: v.text,
            };
        });
}
