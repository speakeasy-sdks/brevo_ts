/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type Enumeration = {
    /**
     * Label of the value
     */
    label: string;
    /**
     * Id of the value
     */
    value: number;
};

/**
 * Type of the attribute. **Use only if the attribute's category is 'normal', 'category' or 'transactional'**
 *
 * @remarks
 * Type **boolean** is only available if the category is **normal** attribute
 * Type **id** is only available if the category is **transactional** attribute
 * Type **category** is only available if the category is **category** attribute
 *
 */
export enum CreateAttributeType {
    Text = "text",
    Date = "date",
    Float = "float",
    Boolean = "boolean",
    Id = "id",
    Category = "category",
}

export type CreateAttribute = {
    /**
     * List of values and labels that the attribute can take. **Use only if the attribute's category is "category"**. For example:
     *
     * @remarks
     * **[{"value":1, "label":"male"}, {"value":2, "label":"female"}]**
     *
     */
    enumeration?: Array<Enumeration> | undefined;
    /**
     * Type of the attribute. **Use only if the attribute's category is 'calculated' or 'global'**
     *
     * @remarks
     *
     */
    isRecurring?: boolean | undefined;
    /**
     * Type of the attribute. **Use only if the attribute's category is 'normal', 'category' or 'transactional'**
     *
     * @remarks
     * Type **boolean** is only available if the category is **normal** attribute
     * Type **id** is only available if the category is **transactional** attribute
     * Type **category** is only available if the category is **category** attribute
     *
     */
    type?: CreateAttributeType | undefined;
    /**
     * Value of the attribute. **Use only if the attribute's category is 'calculated' or 'global'**
     *
     * @remarks
     *
     */
    value?: string | undefined;
};

/** @internal */
export namespace Enumeration$ {
    export type Inbound = {
        label: string;
        value: number;
    };

    export const inboundSchema: z.ZodType<Enumeration, z.ZodTypeDef, Inbound> = z
        .object({
            label: z.string(),
            value: z.number().int(),
        })
        .transform((v) => {
            return {
                label: v.label,
                value: v.value,
            };
        });

    export type Outbound = {
        label: string;
        value: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Enumeration> = z
        .object({
            label: z.string(),
            value: z.number().int(),
        })
        .transform((v) => {
            return {
                label: v.label,
                value: v.value,
            };
        });
}

/** @internal */
export const CreateAttributeType$ = z.nativeEnum(CreateAttributeType);

/** @internal */
export namespace CreateAttribute$ {
    export type Inbound = {
        enumeration?: Array<Enumeration$.Inbound> | undefined;
        isRecurring?: boolean | undefined;
        type?: CreateAttributeType | undefined;
        value?: string | undefined;
    };

    export const inboundSchema: z.ZodType<CreateAttribute, z.ZodTypeDef, Inbound> = z
        .object({
            enumeration: z.array(z.lazy(() => Enumeration$.inboundSchema)).optional(),
            isRecurring: z.boolean().optional(),
            type: CreateAttributeType$.optional(),
            value: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.enumeration === undefined ? null : { enumeration: v.enumeration }),
                ...(v.isRecurring === undefined ? null : { isRecurring: v.isRecurring }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });

    export type Outbound = {
        enumeration?: Array<Enumeration$.Outbound> | undefined;
        isRecurring?: boolean | undefined;
        type?: CreateAttributeType | undefined;
        value?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateAttribute> = z
        .object({
            enumeration: z.array(z.lazy(() => Enumeration$.outboundSchema)).optional(),
            isRecurring: z.boolean().optional(),
            type: CreateAttributeType$.optional(),
            value: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.enumeration === undefined ? null : { enumeration: v.enumeration }),
                ...(v.isRecurring === undefined ? null : { isRecurring: v.isRecurring }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });
}
