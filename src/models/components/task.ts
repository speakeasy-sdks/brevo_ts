/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

/**
 * Task Details
 */
export type Task = {
    /**
     * Companies ids for companies a task is linked to
     */
    companiesIds?: Array<string> | undefined;
    /**
     * Contact ids for contacts linked to this task
     */
    contactsIds?: Array<number> | undefined;
    /**
     * Deal ids for deals a task is linked to
     */
    dealsIds?: Array<string> | undefined;
    /**
     * Unique task id
     */
    id?: string | undefined;
    /**
     * Name of task
     */
    name: string;
    /**
     * Id for type of task e.g Call / Email / Meeting etc.
     */
    taskTypeId: string;
};

/** @internal */
export namespace Task$ {
    export type Inbound = {
        companiesIds?: Array<string> | undefined;
        contactsIds?: Array<number> | undefined;
        dealsIds?: Array<string> | undefined;
        id?: string | undefined;
        name: string;
        taskTypeId: string;
    };

    export const inboundSchema: z.ZodType<Task, z.ZodTypeDef, Inbound> = z
        .object({
            companiesIds: z.array(z.string()).optional(),
            contactsIds: z.array(z.number().int()).optional(),
            dealsIds: z.array(z.string()).optional(),
            id: z.string().optional(),
            name: z.string(),
            taskTypeId: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.companiesIds === undefined ? null : { companiesIds: v.companiesIds }),
                ...(v.contactsIds === undefined ? null : { contactsIds: v.contactsIds }),
                ...(v.dealsIds === undefined ? null : { dealsIds: v.dealsIds }),
                ...(v.id === undefined ? null : { id: v.id }),
                name: v.name,
                taskTypeId: v.taskTypeId,
            };
        });

    export type Outbound = {
        companiesIds?: Array<string> | undefined;
        contactsIds?: Array<number> | undefined;
        dealsIds?: Array<string> | undefined;
        id?: string | undefined;
        name: string;
        taskTypeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Task> = z
        .object({
            companiesIds: z.array(z.string()).optional(),
            contactsIds: z.array(z.number().int()).optional(),
            dealsIds: z.array(z.string()).optional(),
            id: z.string().optional(),
            name: z.string(),
            taskTypeId: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.companiesIds === undefined ? null : { companiesIds: v.companiesIds }),
                ...(v.contactsIds === undefined ? null : { contactsIds: v.contactsIds }),
                ...(v.dealsIds === undefined ? null : { dealsIds: v.dealsIds }),
                ...(v.id === undefined ? null : { id: v.id }),
                name: v.name,
                taskTypeId: v.taskTypeId,
            };
        });
}
