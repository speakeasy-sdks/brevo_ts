/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

/**
 * Credits remaining for child account
 */
export type Child = {
    /**
     * Email Credits remaining for child account
     */
    email: number;
    /**
     * SMS Credits remaining for child account
     */
    sms: number;
};

export type Reseller = {
    /**
     * Email Credits remaining for reseller account
     */
    email: number;
    /**
     * SMS Credits remaining for reseller account
     */
    sms: number;
};

export type RemainingCreditModel = {
    /**
     * Credits remaining for child account
     */
    child: Child;
    reseller: Reseller;
};

/** @internal */
export namespace Child$ {
    export type Inbound = {
        email: number;
        sms: number;
    };

    export const inboundSchema: z.ZodType<Child, z.ZodTypeDef, Inbound> = z
        .object({
            email: z.number(),
            sms: z.number(),
        })
        .transform((v) => {
            return {
                email: v.email,
                sms: v.sms,
            };
        });

    export type Outbound = {
        email: number;
        sms: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Child> = z
        .object({
            email: z.number(),
            sms: z.number(),
        })
        .transform((v) => {
            return {
                email: v.email,
                sms: v.sms,
            };
        });
}

/** @internal */
export namespace Reseller$ {
    export type Inbound = {
        email: number;
        sms: number;
    };

    export const inboundSchema: z.ZodType<Reseller, z.ZodTypeDef, Inbound> = z
        .object({
            email: z.number(),
            sms: z.number(),
        })
        .transform((v) => {
            return {
                email: v.email,
                sms: v.sms,
            };
        });

    export type Outbound = {
        email: number;
        sms: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Reseller> = z
        .object({
            email: z.number(),
            sms: z.number(),
        })
        .transform((v) => {
            return {
                email: v.email,
                sms: v.sms,
            };
        });
}

/** @internal */
export namespace RemainingCreditModel$ {
    export type Inbound = {
        child: Child$.Inbound;
        reseller: Reseller$.Inbound;
    };

    export const inboundSchema: z.ZodType<RemainingCreditModel, z.ZodTypeDef, Inbound> = z
        .object({
            child: z.lazy(() => Child$.inboundSchema),
            reseller: z.lazy(() => Reseller$.inboundSchema),
        })
        .transform((v) => {
            return {
                child: v.child,
                reseller: v.reseller,
            };
        });

    export type Outbound = {
        child: Child$.Outbound;
        reseller: Reseller$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RemainingCreditModel> = z
        .object({
            child: z.lazy(() => Child$.outboundSchema),
            reseller: z.lazy(() => Reseller$.outboundSchema),
        })
        .transform((v) => {
            return {
                child: v.child,
                reseller: v.reseller,
            };
        });
}
