/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export enum Types {
    Email = "email",
    Push = "push",
}

/**
 * Unit of time before reminder is to be sent
 */
export enum Unit {
    Minutes = "minutes",
    Hours = "hours",
    Weeks = "weeks",
    Days = "days",
}

/**
 * Task reminder date/time for a task
 */
export type TaskReminder = {
    /**
     * Type of task reminder e.g email, push
     */
    types: Array<Types>;
    /**
     * Unit of time before reminder is to be sent
     */
    unit: Unit;
    /**
     * Value of time unit before reminder is to be sent
     */
    value: number;
};

/** @internal */
export const Types$ = z.nativeEnum(Types);

/** @internal */
export const Unit$ = z.nativeEnum(Unit);

/** @internal */
export namespace TaskReminder$ {
    export type Inbound = {
        types: Array<Types>;
        unit: Unit;
        value: number;
    };

    export const inboundSchema: z.ZodType<TaskReminder, z.ZodTypeDef, Inbound> = z
        .object({
            types: z.array(Types$),
            unit: Unit$,
            value: z.number().int(),
        })
        .transform((v) => {
            return {
                types: v.types,
                unit: v.unit,
                value: v.value,
            };
        });

    export type Outbound = {
        types: Array<Types>;
        unit: Unit;
        value: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TaskReminder> = z
        .object({
            types: z.array(Types$),
            unit: Unit$,
            value: z.number().int(),
        })
        .transform((v) => {
            return {
                types: v.types,
                unit: v.unit,
                value: v.value,
            };
        });
}
