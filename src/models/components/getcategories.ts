/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type Categories = {
    /**
     * Creation UTC date-time of the category (YYYY-MM-DDTHH:mm:ss.SSSZ)
     */
    createdAt: string;
    /**
     * Category ID for which you requested the details
     */
    id: string;
    /**
     * category deleted from the shop's database
     */
    isDeleted?: boolean | undefined;
    /**
     * Last modification UTC date-time of the category (YYYY-MM-DDTHH:mm:ss.SSSZ)
     */
    modifiedAt: string;
    /**
     * Name of the category for which you requested the details
     */
    name: string;
    /**
     * URL to the category
     */
    url?: string | undefined;
};

export type GetCategories = {
    categories: Array<Categories>;
    /**
     * Number of categories
     */
    count: number;
};

/** @internal */
export namespace Categories$ {
    export type Inbound = {
        createdAt: string;
        id: string;
        isDeleted?: boolean | undefined;
        modifiedAt: string;
        name: string;
        url?: string | undefined;
    };

    export const inboundSchema: z.ZodType<Categories, z.ZodTypeDef, Inbound> = z
        .object({
            createdAt: z.string(),
            id: z.string(),
            isDeleted: z.boolean().optional(),
            modifiedAt: z.string(),
            name: z.string(),
            url: z.string().optional(),
        })
        .transform((v) => {
            return {
                createdAt: v.createdAt,
                id: v.id,
                ...(v.isDeleted === undefined ? null : { isDeleted: v.isDeleted }),
                modifiedAt: v.modifiedAt,
                name: v.name,
                ...(v.url === undefined ? null : { url: v.url }),
            };
        });

    export type Outbound = {
        createdAt: string;
        id: string;
        isDeleted?: boolean | undefined;
        modifiedAt: string;
        name: string;
        url?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Categories> = z
        .object({
            createdAt: z.string(),
            id: z.string(),
            isDeleted: z.boolean().optional(),
            modifiedAt: z.string(),
            name: z.string(),
            url: z.string().optional(),
        })
        .transform((v) => {
            return {
                createdAt: v.createdAt,
                id: v.id,
                ...(v.isDeleted === undefined ? null : { isDeleted: v.isDeleted }),
                modifiedAt: v.modifiedAt,
                name: v.name,
                ...(v.url === undefined ? null : { url: v.url }),
            };
        });
}

/** @internal */
export namespace GetCategories$ {
    export type Inbound = {
        categories: Array<Categories$.Inbound>;
        count: number;
    };

    export const inboundSchema: z.ZodType<GetCategories, z.ZodTypeDef, Inbound> = z
        .object({
            categories: z.array(z.lazy(() => Categories$.inboundSchema)),
            count: z.number().int(),
        })
        .transform((v) => {
            return {
                categories: v.categories,
                count: v.count,
            };
        });

    export type Outbound = {
        categories: Array<Categories$.Outbound>;
        count: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCategories> = z
        .object({
            categories: z.array(z.lazy(() => Categories$.outboundSchema)),
            count: z.number().int(),
        })
        .transform((v) => {
            return {
                categories: v.categories,
                count: v.count,
            };
        });
}
