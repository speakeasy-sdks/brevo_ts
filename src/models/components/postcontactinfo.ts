/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type PostContactInfoContacts = {
    failure?: Array<string> | undefined;
    /**
     * Id of the process created to remove contacts from list when user opts for "all" option.
     */
    processId?: number | undefined;
    success?: Array<string> | undefined;
    /**
     * Displays the count of total number of contacts removed from list when user opts for "all" option.
     */
    total?: number | undefined;
};

export type PostContactInfo = {
    contacts: PostContactInfoContacts;
};

/** @internal */
export namespace PostContactInfoContacts$ {
    export type Inbound = {
        failure?: Array<string> | undefined;
        processId?: number | undefined;
        success?: Array<string> | undefined;
        total?: number | undefined;
    };

    export const inboundSchema: z.ZodType<PostContactInfoContacts, z.ZodTypeDef, Inbound> = z
        .object({
            failure: z.array(z.string()).optional(),
            processId: z.number().int().optional(),
            success: z.array(z.string()).optional(),
            total: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.failure === undefined ? null : { failure: v.failure }),
                ...(v.processId === undefined ? null : { processId: v.processId }),
                ...(v.success === undefined ? null : { success: v.success }),
                ...(v.total === undefined ? null : { total: v.total }),
            };
        });

    export type Outbound = {
        failure?: Array<string> | undefined;
        processId?: number | undefined;
        success?: Array<string> | undefined;
        total?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostContactInfoContacts> = z
        .object({
            failure: z.array(z.string()).optional(),
            processId: z.number().int().optional(),
            success: z.array(z.string()).optional(),
            total: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.failure === undefined ? null : { failure: v.failure }),
                ...(v.processId === undefined ? null : { processId: v.processId }),
                ...(v.success === undefined ? null : { success: v.success }),
                ...(v.total === undefined ? null : { total: v.total }),
            };
        });
}

/** @internal */
export namespace PostContactInfo$ {
    export type Inbound = {
        contacts: PostContactInfoContacts$.Inbound;
    };

    export const inboundSchema: z.ZodType<PostContactInfo, z.ZodTypeDef, Inbound> = z
        .object({
            contacts: z.lazy(() => PostContactInfoContacts$.inboundSchema),
        })
        .transform((v) => {
            return {
                contacts: v.contacts,
            };
        });

    export type Outbound = {
        contacts: PostContactInfoContacts$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostContactInfo> = z
        .object({
            contacts: z.lazy(() => PostContactInfoContacts$.outboundSchema),
        })
        .transform((v) => {
            return {
                contacts: v.contacts,
            };
        });
}
