/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../internal/utils";
import { Expose, Type } from "class-transformer";

/**
 * Auth type of the feed:
 *
 * @remarks
 *  * `basic`
 *  * `token`
 *  * `noAuth`
 *
 */
export enum AuthType {
    Basic = "basic",
    Token = "token",
    NoAuth = "noAuth",
}

export class Headers extends SpeakeasyBase {
    /**
     * Name of the header
     */
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    /**
     * Value of the header
     */
    @SpeakeasyMetadata()
    @Expose({ name: "value" })
    value?: string;
}

export class CreateExternalFeed extends SpeakeasyBase {
    /**
     * Auth type of the feed:
     *
     * @remarks
     *  * `basic`
     *  * `token`
     *  * `noAuth`
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "authType" })
    authType?: AuthType;

    /**
     * Toggle caching of feed url response
     */
    @SpeakeasyMetadata()
    @Expose({ name: "cache" })
    cache?: boolean;

    /**
     * Custom headers for the feed
     */
    @SpeakeasyMetadata({ elemType: Headers })
    @Expose({ name: "headers" })
    @Type(() => Headers)
    headers?: Headers[];

    /**
     * Maximum number of retries on the feed url
     */
    @SpeakeasyMetadata()
    @Expose({ name: "maxRetries" })
    maxRetries?: number;

    /**
     * Name of the feed
     */
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name: string;

    /**
     * Password for authType `basic`
     */
    @SpeakeasyMetadata()
    @Expose({ name: "password" })
    password?: string;

    /**
     * Token for authType `token`
     */
    @SpeakeasyMetadata()
    @Expose({ name: "token" })
    token?: string;

    /**
     * URL of the feed
     */
    @SpeakeasyMetadata()
    @Expose({ name: "url" })
    url: string;

    /**
     * Username for authType `basic`
     */
    @SpeakeasyMetadata()
    @Expose({ name: "username" })
    username?: string;
}
