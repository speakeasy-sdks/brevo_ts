/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Auth type of the feed:
 *
 * @remarks
 *  * `basic`
 *  * `token`
 *  * `noAuth`
 *
 */
export enum AuthType {
    Basic = "basic",
    Token = "token",
    NoAuth = "noAuth",
}

export type Headers = {
    /**
     * Name of the header
     */
    name?: string | undefined;
    /**
     * Value of the header
     */
    value?: string | undefined;
};

export type CreateExternalFeed = {
    /**
     * Auth type of the feed:
     *
     * @remarks
     *  * `basic`
     *  * `token`
     *  * `noAuth`
     *
     */
    authType?: AuthType | undefined;
    /**
     * Toggle caching of feed url response
     */
    cache?: boolean | undefined;
    /**
     * Custom headers for the feed
     */
    headers?: Array<Headers> | undefined;
    /**
     * Maximum number of retries on the feed url
     */
    maxRetries?: number | undefined;
    /**
     * Name of the feed
     */
    name: string;
    /**
     * Password for authType `basic`
     */
    password?: string | undefined;
    /**
     * Token for authType `token`
     */
    token?: string | undefined;
    /**
     * URL of the feed
     */
    url: string;
    /**
     * Username for authType `basic`
     */
    username?: string | undefined;
};

/** @internal */
export const AuthType$ = z.nativeEnum(AuthType);

/** @internal */
export namespace Headers$ {
    export type Inbound = {
        name?: string | undefined;
        value?: string | undefined;
    };

    export const inboundSchema: z.ZodType<Headers, z.ZodTypeDef, Inbound> = z
        .object({
            name: z.string().optional(),
            value: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });

    export type Outbound = {
        name?: string | undefined;
        value?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Headers> = z
        .object({
            name: z.string().optional(),
            value: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });
}

/** @internal */
export namespace CreateExternalFeed$ {
    export type Inbound = {
        authType?: AuthType | undefined;
        cache?: boolean | undefined;
        headers?: Array<Headers$.Inbound> | undefined;
        maxRetries?: number | undefined;
        name: string;
        password?: string | undefined;
        token?: string | undefined;
        url: string;
        username?: string | undefined;
    };

    export const inboundSchema: z.ZodType<CreateExternalFeed, z.ZodTypeDef, Inbound> = z
        .object({
            authType: AuthType$.default(AuthType.NoAuth),
            cache: z.boolean().default(false),
            headers: z.array(z.lazy(() => Headers$.inboundSchema)).optional(),
            maxRetries: z.number().int().default(5),
            name: z.string(),
            password: z.string().optional(),
            token: z.string().optional(),
            url: z.string(),
            username: z.string().optional(),
        })
        .transform((v) => {
            return {
                authType: v.authType,
                cache: v.cache,
                ...(v.headers === undefined ? null : { headers: v.headers }),
                maxRetries: v.maxRetries,
                name: v.name,
                ...(v.password === undefined ? null : { password: v.password }),
                ...(v.token === undefined ? null : { token: v.token }),
                url: v.url,
                ...(v.username === undefined ? null : { username: v.username }),
            };
        });

    export type Outbound = {
        authType: AuthType;
        cache: boolean;
        headers?: Array<Headers$.Outbound> | undefined;
        maxRetries: number;
        name: string;
        password?: string | undefined;
        token?: string | undefined;
        url: string;
        username?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateExternalFeed> = z
        .object({
            authType: AuthType$.default(AuthType.NoAuth),
            cache: z.boolean().default(false),
            headers: z.array(z.lazy(() => Headers$.outboundSchema)).optional(),
            maxRetries: z.number().int().default(5),
            name: z.string(),
            password: z.string().optional(),
            token: z.string().optional(),
            url: z.string(),
            username: z.string().optional(),
        })
        .transform((v) => {
            return {
                authType: v.authType,
                cache: v.cache,
                ...(v.headers === undefined ? null : { headers: v.headers }),
                maxRetries: v.maxRetries,
                name: v.name,
                ...(v.password === undefined ? null : { password: v.password }),
                ...(v.token === undefined ? null : { token: v.token }),
                url: v.url,
                ...(v.username === undefined ? null : { username: v.username }),
            };
        });
}
