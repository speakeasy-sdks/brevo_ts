/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

/**
 * Auth type of the feed:
 *
 * @remarks
 *  * `basic`
 *  * `token`
 *  * `noAuth`
 *
 */
export enum UpdateExternalFeedAuthType {
    Basic = "basic",
    Token = "token",
    NoAuth = "noAuth",
}

export type UpdateExternalFeedHeaders = {
    /**
     * Name of the header
     */
    name?: string | undefined;
    /**
     * Value of the header
     */
    value?: string | undefined;
};

export type UpdateExternalFeed = {
    /**
     * Auth type of the feed:
     *
     * @remarks
     *  * `basic`
     *  * `token`
     *  * `noAuth`
     *
     */
    authType?: UpdateExternalFeedAuthType | undefined;
    /**
     * Toggle caching of feed url response
     */
    cache?: boolean | undefined;
    /**
     * Custom headers for the feed
     */
    headers?: Array<UpdateExternalFeedHeaders> | undefined;
    /**
     * Maximum number of retries on the feed url
     */
    maxRetries?: number | undefined;
    /**
     * Name of the feed
     */
    name?: string | undefined;
    /**
     * Password for authType `basic`
     */
    password?: string | undefined;
    /**
     * Token for authType `token`
     */
    token?: string | undefined;
    /**
     * URL of the feed
     */
    url?: string | undefined;
    /**
     * Username for authType `basic`
     */
    username?: string | undefined;
};

/** @internal */
export const UpdateExternalFeedAuthType$ = z.nativeEnum(UpdateExternalFeedAuthType);

/** @internal */
export namespace UpdateExternalFeedHeaders$ {
    export type Inbound = {
        name?: string | undefined;
        value?: string | undefined;
    };

    export const inboundSchema: z.ZodType<UpdateExternalFeedHeaders, z.ZodTypeDef, Inbound> = z
        .object({
            name: z.string().optional(),
            value: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });

    export type Outbound = {
        name?: string | undefined;
        value?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateExternalFeedHeaders> = z
        .object({
            name: z.string().optional(),
            value: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });
}

/** @internal */
export namespace UpdateExternalFeed$ {
    export type Inbound = {
        authType?: UpdateExternalFeedAuthType | undefined;
        cache?: boolean | undefined;
        headers?: Array<UpdateExternalFeedHeaders$.Inbound> | undefined;
        maxRetries?: number | undefined;
        name?: string | undefined;
        password?: string | undefined;
        token?: string | undefined;
        url?: string | undefined;
        username?: string | undefined;
    };

    export const inboundSchema: z.ZodType<UpdateExternalFeed, z.ZodTypeDef, Inbound> = z
        .object({
            authType: UpdateExternalFeedAuthType$.optional(),
            cache: z.boolean().default(false),
            headers: z.array(z.lazy(() => UpdateExternalFeedHeaders$.inboundSchema)).optional(),
            maxRetries: z.number().int().default(5),
            name: z.string().optional(),
            password: z.string().optional(),
            token: z.string().optional(),
            url: z.string().optional(),
            username: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.authType === undefined ? null : { authType: v.authType }),
                ...(v.cache === undefined ? null : { cache: v.cache }),
                ...(v.headers === undefined ? null : { headers: v.headers }),
                ...(v.maxRetries === undefined ? null : { maxRetries: v.maxRetries }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.password === undefined ? null : { password: v.password }),
                ...(v.token === undefined ? null : { token: v.token }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.username === undefined ? null : { username: v.username }),
            };
        });

    export type Outbound = {
        authType?: UpdateExternalFeedAuthType | undefined;
        cache: boolean;
        headers?: Array<UpdateExternalFeedHeaders$.Outbound> | undefined;
        maxRetries: number;
        name?: string | undefined;
        password?: string | undefined;
        token?: string | undefined;
        url?: string | undefined;
        username?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateExternalFeed> = z
        .object({
            authType: UpdateExternalFeedAuthType$.optional(),
            cache: z.boolean().default(false),
            headers: z.array(z.lazy(() => UpdateExternalFeedHeaders$.outboundSchema)).optional(),
            maxRetries: z.number().int().default(5),
            name: z.string().optional(),
            password: z.string().optional(),
            token: z.string().optional(),
            url: z.string().optional(),
            username: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.authType === undefined ? null : { authType: v.authType }),
                cache: v.cache,
                ...(v.headers === undefined ? null : { headers: v.headers }),
                maxRetries: v.maxRetries,
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.password === undefined ? null : { password: v.password }),
                ...(v.token === undefined ? null : { token: v.token }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.username === undefined ? null : { username: v.username }),
            };
        });
}
