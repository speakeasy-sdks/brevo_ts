/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type GetIp = {
    /**
     * Status of the IP (true=active, false=inactive)
     */
    active: boolean;
    /**
     * Domain associated to the IP
     */
    domain: string;
    /**
     * ID of the dedicated IP
     */
    id: number;
    /**
     * Dedicated IP
     */
    ip: string;
};

/** @internal */
export namespace GetIp$ {
    export type Inbound = {
        active: boolean;
        domain: string;
        id: number;
        ip: string;
    };

    export const inboundSchema: z.ZodType<GetIp, z.ZodTypeDef, Inbound> = z
        .object({
            active: z.boolean(),
            domain: z.string(),
            id: z.number().int(),
            ip: z.string(),
        })
        .transform((v) => {
            return {
                active: v.active,
                domain: v.domain,
                id: v.id,
                ip: v.ip,
            };
        });

    export type Outbound = {
        active: boolean;
        domain: string;
        id: number;
        ip: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetIp> = z
        .object({
            active: z.boolean(),
            domain: z.string(),
            id: z.number().int(),
            ip: z.string(),
        })
        .transform((v) => {
            return {
                active: v.active,
                domain: v.domain,
                id: v.id,
                ip: v.ip,
            };
        });
}
