/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type GetDomainConfigurationModelBrevoCode = {
    hostName?: string | undefined;
    status?: boolean | undefined;
    type?: string | undefined;
    value?: string | undefined;
};

export type GetDomainConfigurationModelDkimRecord = {
    hostName?: string | undefined;
    status?: boolean | undefined;
    type?: string | undefined;
    value?: string | undefined;
};

export type GetDomainConfigurationModelDnsRecords = {
    brevoCode?: GetDomainConfigurationModelBrevoCode | undefined;
    dkimRecord?: GetDomainConfigurationModelDkimRecord | undefined;
};

export type GetDomainConfigurationModel = {
    /**
     * Status of domain authentication (true=authenticated, false=non authenticated)
     */
    authenticated: boolean;
    dnsRecords: GetDomainConfigurationModelDnsRecords;
    /**
     * Domain
     */
    domain: string;
    /**
     * Status of domain verification (true=verified, false=non verified)
     */
    verified: boolean;
};

/** @internal */
export namespace GetDomainConfigurationModelBrevoCode$ {
    export type Inbound = {
        host_name?: string | undefined;
        status?: boolean | undefined;
        type?: string | undefined;
        value?: string | undefined;
    };

    export const inboundSchema: z.ZodType<
        GetDomainConfigurationModelBrevoCode,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            host_name: z.string().optional(),
            status: z.boolean().optional(),
            type: z.string().optional(),
            value: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.host_name === undefined ? null : { hostName: v.host_name }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });

    export type Outbound = {
        host_name?: string | undefined;
        status?: boolean | undefined;
        type?: string | undefined;
        value?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetDomainConfigurationModelBrevoCode
    > = z
        .object({
            hostName: z.string().optional(),
            status: z.boolean().optional(),
            type: z.string().optional(),
            value: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.hostName === undefined ? null : { host_name: v.hostName }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });
}

/** @internal */
export namespace GetDomainConfigurationModelDkimRecord$ {
    export type Inbound = {
        host_name?: string | undefined;
        status?: boolean | undefined;
        type?: string | undefined;
        value?: string | undefined;
    };

    export const inboundSchema: z.ZodType<
        GetDomainConfigurationModelDkimRecord,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            host_name: z.string().optional(),
            status: z.boolean().optional(),
            type: z.string().optional(),
            value: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.host_name === undefined ? null : { hostName: v.host_name }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });

    export type Outbound = {
        host_name?: string | undefined;
        status?: boolean | undefined;
        type?: string | undefined;
        value?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetDomainConfigurationModelDkimRecord
    > = z
        .object({
            hostName: z.string().optional(),
            status: z.boolean().optional(),
            type: z.string().optional(),
            value: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.hostName === undefined ? null : { host_name: v.hostName }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });
}

/** @internal */
export namespace GetDomainConfigurationModelDnsRecords$ {
    export type Inbound = {
        brevo_code?: GetDomainConfigurationModelBrevoCode$.Inbound | undefined;
        dkim_record?: GetDomainConfigurationModelDkimRecord$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<
        GetDomainConfigurationModelDnsRecords,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            brevo_code: z
                .lazy(() => GetDomainConfigurationModelBrevoCode$.inboundSchema)
                .optional(),
            dkim_record: z
                .lazy(() => GetDomainConfigurationModelDkimRecord$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.brevo_code === undefined ? null : { brevoCode: v.brevo_code }),
                ...(v.dkim_record === undefined ? null : { dkimRecord: v.dkim_record }),
            };
        });

    export type Outbound = {
        brevo_code?: GetDomainConfigurationModelBrevoCode$.Outbound | undefined;
        dkim_record?: GetDomainConfigurationModelDkimRecord$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetDomainConfigurationModelDnsRecords
    > = z
        .object({
            brevoCode: z
                .lazy(() => GetDomainConfigurationModelBrevoCode$.outboundSchema)
                .optional(),
            dkimRecord: z
                .lazy(() => GetDomainConfigurationModelDkimRecord$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.brevoCode === undefined ? null : { brevo_code: v.brevoCode }),
                ...(v.dkimRecord === undefined ? null : { dkim_record: v.dkimRecord }),
            };
        });
}

/** @internal */
export namespace GetDomainConfigurationModel$ {
    export type Inbound = {
        authenticated: boolean;
        dns_records: GetDomainConfigurationModelDnsRecords$.Inbound;
        domain: string;
        verified: boolean;
    };

    export const inboundSchema: z.ZodType<GetDomainConfigurationModel, z.ZodTypeDef, Inbound> = z
        .object({
            authenticated: z.boolean(),
            dns_records: z.lazy(() => GetDomainConfigurationModelDnsRecords$.inboundSchema),
            domain: z.string(),
            verified: z.boolean(),
        })
        .transform((v) => {
            return {
                authenticated: v.authenticated,
                dnsRecords: v.dns_records,
                domain: v.domain,
                verified: v.verified,
            };
        });

    export type Outbound = {
        authenticated: boolean;
        dns_records: GetDomainConfigurationModelDnsRecords$.Outbound;
        domain: string;
        verified: boolean;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetDomainConfigurationModel> = z
        .object({
            authenticated: z.boolean(),
            dnsRecords: z.lazy(() => GetDomainConfigurationModelDnsRecords$.outboundSchema),
            domain: z.string(),
            verified: z.boolean(),
        })
        .transform((v) => {
            return {
                authenticated: v.authenticated,
                dns_records: v.dnsRecords,
                domain: v.domain,
                verified: v.verified,
            };
        });
}
