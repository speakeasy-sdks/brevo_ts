/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

/**
 * Event which occurred
 */
export enum GetSmsEventReportEvent {
    Bounces = "bounces",
    HardBounces = "hardBounces",
    SoftBounces = "softBounces",
    Delivered = "delivered",
    Sent = "sent",
    Accepted = "accepted",
    Unsubscription = "unsubscription",
    Replies = "replies",
    Blocked = "blocked",
    Rejected = "rejected",
}

export type GetSmsEventReportEvents = {
    /**
     * UTC date-time on which the event has been generated
     */
    date?: string | undefined;
    /**
     * Event which occurred
     */
    event?: GetSmsEventReportEvent | undefined;
    /**
     * Message ID which generated the event
     */
    messageId?: string | undefined;
    /**
     * Phone number which has generated the event
     */
    phoneNumber?: string | undefined;
    /**
     * Reason of bounce (only available if the event is hardbounce or softbounce)
     */
    reason?: string | undefined;
    reply?: string | undefined;
    /**
     * Tag of the SMS which generated the event
     */
    tag?: string | undefined;
};

export type GetSmsEventReport = {
    events?: Array<GetSmsEventReportEvents> | undefined;
};

/** @internal */
export const GetSmsEventReportEvent$ = z.nativeEnum(GetSmsEventReportEvent);

/** @internal */
export namespace GetSmsEventReportEvents$ {
    export type Inbound = {
        date?: string | undefined;
        event?: GetSmsEventReportEvent | undefined;
        messageId?: string | undefined;
        phoneNumber?: string | undefined;
        reason?: string | undefined;
        reply?: string | undefined;
        tag?: string | undefined;
    };

    export const inboundSchema: z.ZodType<GetSmsEventReportEvents, z.ZodTypeDef, Inbound> = z
        .object({
            date: z.string().optional(),
            event: GetSmsEventReportEvent$.optional(),
            messageId: z.string().optional(),
            phoneNumber: z.string().optional(),
            reason: z.string().optional(),
            reply: z.string().optional(),
            tag: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.date === undefined ? null : { date: v.date }),
                ...(v.event === undefined ? null : { event: v.event }),
                ...(v.messageId === undefined ? null : { messageId: v.messageId }),
                ...(v.phoneNumber === undefined ? null : { phoneNumber: v.phoneNumber }),
                ...(v.reason === undefined ? null : { reason: v.reason }),
                ...(v.reply === undefined ? null : { reply: v.reply }),
                ...(v.tag === undefined ? null : { tag: v.tag }),
            };
        });

    export type Outbound = {
        date?: string | undefined;
        event?: GetSmsEventReportEvent | undefined;
        messageId?: string | undefined;
        phoneNumber?: string | undefined;
        reason?: string | undefined;
        reply?: string | undefined;
        tag?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetSmsEventReportEvents> = z
        .object({
            date: z.string().optional(),
            event: GetSmsEventReportEvent$.optional(),
            messageId: z.string().optional(),
            phoneNumber: z.string().optional(),
            reason: z.string().optional(),
            reply: z.string().optional(),
            tag: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.date === undefined ? null : { date: v.date }),
                ...(v.event === undefined ? null : { event: v.event }),
                ...(v.messageId === undefined ? null : { messageId: v.messageId }),
                ...(v.phoneNumber === undefined ? null : { phoneNumber: v.phoneNumber }),
                ...(v.reason === undefined ? null : { reason: v.reason }),
                ...(v.reply === undefined ? null : { reply: v.reply }),
                ...(v.tag === undefined ? null : { tag: v.tag }),
            };
        });
}

/** @internal */
export namespace GetSmsEventReport$ {
    export type Inbound = {
        events?: Array<GetSmsEventReportEvents$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<GetSmsEventReport, z.ZodTypeDef, Inbound> = z
        .object({
            events: z.array(z.lazy(() => GetSmsEventReportEvents$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.events === undefined ? null : { events: v.events }),
            };
        });

    export type Outbound = {
        events?: Array<GetSmsEventReportEvents$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetSmsEventReport> = z
        .object({
            events: z.array(z.lazy(() => GetSmsEventReportEvents$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.events === undefined ? null : { events: v.events }),
            };
        });
}
