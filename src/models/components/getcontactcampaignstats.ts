/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { RFCDate } from "../../types";
import { z } from "zod";

export type Links = {
    /**
     * Number of clicks on this link for the campaign
     */
    count: number;
    /**
     * UTC date-time of the event
     */
    eventTime: string;
    /**
     * IP from which the user has clicked on the link
     */
    ip: string;
    /**
     * URL of the clicked link
     */
    url: string;
};

export type Clicked = {
    /**
     * ID of the campaign which generated the event
     */
    campaignId: number;
    links: Array<Links>;
};

export type Complaints = {
    /**
     * ID of the campaign which generated the event
     */
    campaignId: number;
    /**
     * UTC date-time of the event
     */
    eventTime: string;
};

export type Delivered = {
    /**
     * ID of the campaign which generated the event
     */
    campaignId: number;
    /**
     * UTC date-time of the event
     */
    eventTime: string;
};

export type HardBounces = {
    /**
     * ID of the campaign which generated the event
     */
    campaignId: number;
    /**
     * UTC date-time of the event
     */
    eventTime: string;
};

export type MessagesSent = {
    /**
     * ID of the campaign which generated the event
     */
    campaignId: number;
    /**
     * UTC date-time of the event
     */
    eventTime: string;
};

export type Opened = {
    /**
     * ID of the campaign which generated the event
     */
    campaignId: number;
    /**
     * Number of openings of the campaign
     */
    count: number;
    /**
     * UTC date-time of the event
     */
    eventTime: string;
    /**
     * IP from which the user has opened the campaign
     */
    ip: string;
};

export type SoftBounces = {
    /**
     * ID of the campaign which generated the event
     */
    campaignId: number;
    /**
     * UTC date-time of the event
     */
    eventTime: string;
};

export type TransacAttributes = {
    /**
     * Date of the order
     */
    orderDate: RFCDate;
    /**
     * ID of the order
     */
    orderId: number;
    /**
     * Price of the order
     */
    orderPrice: number;
};

export type AdminUnsubscription = {
    /**
     * UTC date-time of the event
     */
    eventTime: string;
    /**
     * IP from which the user has been unsubscribed
     */
    ip?: string | undefined;
};

export type UserUnsubscription = {
    /**
     * ID of the campaign which generated the event
     */
    campaignId: number;
    /**
     * UTC date-time of the event
     */
    eventTime: string;
    /**
     * IP from which the user has unsubscribed
     */
    ip?: string | undefined;
};

export type Unsubscriptions = {
    /**
     * Contact has been unsubscribed from the administrator
     */
    adminUnsubscription: Array<AdminUnsubscription>;
    /**
     * Contact has unsubscribed via the unsubscription link in the email
     */
    userUnsubscription: Array<UserUnsubscription>;
};

/**
 * Campaign Statistics for the contact
 */
export type GetContactCampaignStats = {
    clicked?: Array<Clicked> | undefined;
    complaints?: Array<Complaints> | undefined;
    delivered?: Array<Delivered> | undefined;
    hardBounces?: Array<HardBounces> | undefined;
    messagesSent?: Array<MessagesSent> | undefined;
    opened?: Array<Opened> | undefined;
    softBounces?: Array<SoftBounces> | undefined;
    transacAttributes?: Array<TransacAttributes> | undefined;
    unsubscriptions?: Unsubscriptions | undefined;
};

/** @internal */
export namespace Links$ {
    export type Inbound = {
        count: number;
        eventTime: string;
        ip: string;
        url: string;
    };

    export const inboundSchema: z.ZodType<Links, z.ZodTypeDef, Inbound> = z
        .object({
            count: z.number().int(),
            eventTime: z.string(),
            ip: z.string(),
            url: z.string(),
        })
        .transform((v) => {
            return {
                count: v.count,
                eventTime: v.eventTime,
                ip: v.ip,
                url: v.url,
            };
        });

    export type Outbound = {
        count: number;
        eventTime: string;
        ip: string;
        url: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Links> = z
        .object({
            count: z.number().int(),
            eventTime: z.string(),
            ip: z.string(),
            url: z.string(),
        })
        .transform((v) => {
            return {
                count: v.count,
                eventTime: v.eventTime,
                ip: v.ip,
                url: v.url,
            };
        });
}

/** @internal */
export namespace Clicked$ {
    export type Inbound = {
        campaignId: number;
        links: Array<Links$.Inbound>;
    };

    export const inboundSchema: z.ZodType<Clicked, z.ZodTypeDef, Inbound> = z
        .object({
            campaignId: z.number().int(),
            links: z.array(z.lazy(() => Links$.inboundSchema)),
        })
        .transform((v) => {
            return {
                campaignId: v.campaignId,
                links: v.links,
            };
        });

    export type Outbound = {
        campaignId: number;
        links: Array<Links$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Clicked> = z
        .object({
            campaignId: z.number().int(),
            links: z.array(z.lazy(() => Links$.outboundSchema)),
        })
        .transform((v) => {
            return {
                campaignId: v.campaignId,
                links: v.links,
            };
        });
}

/** @internal */
export namespace Complaints$ {
    export type Inbound = {
        campaignId: number;
        eventTime: string;
    };

    export const inboundSchema: z.ZodType<Complaints, z.ZodTypeDef, Inbound> = z
        .object({
            campaignId: z.number().int(),
            eventTime: z.string(),
        })
        .transform((v) => {
            return {
                campaignId: v.campaignId,
                eventTime: v.eventTime,
            };
        });

    export type Outbound = {
        campaignId: number;
        eventTime: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Complaints> = z
        .object({
            campaignId: z.number().int(),
            eventTime: z.string(),
        })
        .transform((v) => {
            return {
                campaignId: v.campaignId,
                eventTime: v.eventTime,
            };
        });
}

/** @internal */
export namespace Delivered$ {
    export type Inbound = {
        campaignId: number;
        eventTime: string;
    };

    export const inboundSchema: z.ZodType<Delivered, z.ZodTypeDef, Inbound> = z
        .object({
            campaignId: z.number().int(),
            eventTime: z.string(),
        })
        .transform((v) => {
            return {
                campaignId: v.campaignId,
                eventTime: v.eventTime,
            };
        });

    export type Outbound = {
        campaignId: number;
        eventTime: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Delivered> = z
        .object({
            campaignId: z.number().int(),
            eventTime: z.string(),
        })
        .transform((v) => {
            return {
                campaignId: v.campaignId,
                eventTime: v.eventTime,
            };
        });
}

/** @internal */
export namespace HardBounces$ {
    export type Inbound = {
        campaignId: number;
        eventTime: string;
    };

    export const inboundSchema: z.ZodType<HardBounces, z.ZodTypeDef, Inbound> = z
        .object({
            campaignId: z.number().int(),
            eventTime: z.string(),
        })
        .transform((v) => {
            return {
                campaignId: v.campaignId,
                eventTime: v.eventTime,
            };
        });

    export type Outbound = {
        campaignId: number;
        eventTime: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, HardBounces> = z
        .object({
            campaignId: z.number().int(),
            eventTime: z.string(),
        })
        .transform((v) => {
            return {
                campaignId: v.campaignId,
                eventTime: v.eventTime,
            };
        });
}

/** @internal */
export namespace MessagesSent$ {
    export type Inbound = {
        campaignId: number;
        eventTime: string;
    };

    export const inboundSchema: z.ZodType<MessagesSent, z.ZodTypeDef, Inbound> = z
        .object({
            campaignId: z.number().int(),
            eventTime: z.string(),
        })
        .transform((v) => {
            return {
                campaignId: v.campaignId,
                eventTime: v.eventTime,
            };
        });

    export type Outbound = {
        campaignId: number;
        eventTime: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MessagesSent> = z
        .object({
            campaignId: z.number().int(),
            eventTime: z.string(),
        })
        .transform((v) => {
            return {
                campaignId: v.campaignId,
                eventTime: v.eventTime,
            };
        });
}

/** @internal */
export namespace Opened$ {
    export type Inbound = {
        campaignId: number;
        count: number;
        eventTime: string;
        ip: string;
    };

    export const inboundSchema: z.ZodType<Opened, z.ZodTypeDef, Inbound> = z
        .object({
            campaignId: z.number().int(),
            count: z.number().int(),
            eventTime: z.string(),
            ip: z.string(),
        })
        .transform((v) => {
            return {
                campaignId: v.campaignId,
                count: v.count,
                eventTime: v.eventTime,
                ip: v.ip,
            };
        });

    export type Outbound = {
        campaignId: number;
        count: number;
        eventTime: string;
        ip: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Opened> = z
        .object({
            campaignId: z.number().int(),
            count: z.number().int(),
            eventTime: z.string(),
            ip: z.string(),
        })
        .transform((v) => {
            return {
                campaignId: v.campaignId,
                count: v.count,
                eventTime: v.eventTime,
                ip: v.ip,
            };
        });
}

/** @internal */
export namespace SoftBounces$ {
    export type Inbound = {
        campaignId: number;
        eventTime: string;
    };

    export const inboundSchema: z.ZodType<SoftBounces, z.ZodTypeDef, Inbound> = z
        .object({
            campaignId: z.number().int(),
            eventTime: z.string(),
        })
        .transform((v) => {
            return {
                campaignId: v.campaignId,
                eventTime: v.eventTime,
            };
        });

    export type Outbound = {
        campaignId: number;
        eventTime: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SoftBounces> = z
        .object({
            campaignId: z.number().int(),
            eventTime: z.string(),
        })
        .transform((v) => {
            return {
                campaignId: v.campaignId,
                eventTime: v.eventTime,
            };
        });
}

/** @internal */
export namespace TransacAttributes$ {
    export type Inbound = {
        orderDate: string;
        orderId: number;
        orderPrice: number;
    };

    export const inboundSchema: z.ZodType<TransacAttributes, z.ZodTypeDef, Inbound> = z
        .object({
            orderDate: z.string().transform((v) => new RFCDate(v)),
            orderId: z.number().int(),
            orderPrice: z.number(),
        })
        .transform((v) => {
            return {
                orderDate: v.orderDate,
                orderId: v.orderId,
                orderPrice: v.orderPrice,
            };
        });

    export type Outbound = {
        orderDate: string;
        orderId: number;
        orderPrice: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransacAttributes> = z
        .object({
            orderDate: z.instanceof(RFCDate).transform((v) => v.toString()),
            orderId: z.number().int(),
            orderPrice: z.number(),
        })
        .transform((v) => {
            return {
                orderDate: v.orderDate,
                orderId: v.orderId,
                orderPrice: v.orderPrice,
            };
        });
}

/** @internal */
export namespace AdminUnsubscription$ {
    export type Inbound = {
        eventTime: string;
        ip?: string | undefined;
    };

    export const inboundSchema: z.ZodType<AdminUnsubscription, z.ZodTypeDef, Inbound> = z
        .object({
            eventTime: z.string(),
            ip: z.string().optional(),
        })
        .transform((v) => {
            return {
                eventTime: v.eventTime,
                ...(v.ip === undefined ? null : { ip: v.ip }),
            };
        });

    export type Outbound = {
        eventTime: string;
        ip?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AdminUnsubscription> = z
        .object({
            eventTime: z.string(),
            ip: z.string().optional(),
        })
        .transform((v) => {
            return {
                eventTime: v.eventTime,
                ...(v.ip === undefined ? null : { ip: v.ip }),
            };
        });
}

/** @internal */
export namespace UserUnsubscription$ {
    export type Inbound = {
        campaignId: number;
        eventTime: string;
        ip?: string | undefined;
    };

    export const inboundSchema: z.ZodType<UserUnsubscription, z.ZodTypeDef, Inbound> = z
        .object({
            campaignId: z.number().int(),
            eventTime: z.string(),
            ip: z.string().optional(),
        })
        .transform((v) => {
            return {
                campaignId: v.campaignId,
                eventTime: v.eventTime,
                ...(v.ip === undefined ? null : { ip: v.ip }),
            };
        });

    export type Outbound = {
        campaignId: number;
        eventTime: string;
        ip?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UserUnsubscription> = z
        .object({
            campaignId: z.number().int(),
            eventTime: z.string(),
            ip: z.string().optional(),
        })
        .transform((v) => {
            return {
                campaignId: v.campaignId,
                eventTime: v.eventTime,
                ...(v.ip === undefined ? null : { ip: v.ip }),
            };
        });
}

/** @internal */
export namespace Unsubscriptions$ {
    export type Inbound = {
        adminUnsubscription: Array<AdminUnsubscription$.Inbound>;
        userUnsubscription: Array<UserUnsubscription$.Inbound>;
    };

    export const inboundSchema: z.ZodType<Unsubscriptions, z.ZodTypeDef, Inbound> = z
        .object({
            adminUnsubscription: z.array(z.lazy(() => AdminUnsubscription$.inboundSchema)),
            userUnsubscription: z.array(z.lazy(() => UserUnsubscription$.inboundSchema)),
        })
        .transform((v) => {
            return {
                adminUnsubscription: v.adminUnsubscription,
                userUnsubscription: v.userUnsubscription,
            };
        });

    export type Outbound = {
        adminUnsubscription: Array<AdminUnsubscription$.Outbound>;
        userUnsubscription: Array<UserUnsubscription$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Unsubscriptions> = z
        .object({
            adminUnsubscription: z.array(z.lazy(() => AdminUnsubscription$.outboundSchema)),
            userUnsubscription: z.array(z.lazy(() => UserUnsubscription$.outboundSchema)),
        })
        .transform((v) => {
            return {
                adminUnsubscription: v.adminUnsubscription,
                userUnsubscription: v.userUnsubscription,
            };
        });
}

/** @internal */
export namespace GetContactCampaignStats$ {
    export type Inbound = {
        clicked?: Array<Clicked$.Inbound> | undefined;
        complaints?: Array<Complaints$.Inbound> | undefined;
        delivered?: Array<Delivered$.Inbound> | undefined;
        hardBounces?: Array<HardBounces$.Inbound> | undefined;
        messagesSent?: Array<MessagesSent$.Inbound> | undefined;
        opened?: Array<Opened$.Inbound> | undefined;
        softBounces?: Array<SoftBounces$.Inbound> | undefined;
        transacAttributes?: Array<TransacAttributes$.Inbound> | undefined;
        unsubscriptions?: Unsubscriptions$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetContactCampaignStats, z.ZodTypeDef, Inbound> = z
        .object({
            clicked: z.array(z.lazy(() => Clicked$.inboundSchema)).optional(),
            complaints: z.array(z.lazy(() => Complaints$.inboundSchema)).optional(),
            delivered: z.array(z.lazy(() => Delivered$.inboundSchema)).optional(),
            hardBounces: z.array(z.lazy(() => HardBounces$.inboundSchema)).optional(),
            messagesSent: z.array(z.lazy(() => MessagesSent$.inboundSchema)).optional(),
            opened: z.array(z.lazy(() => Opened$.inboundSchema)).optional(),
            softBounces: z.array(z.lazy(() => SoftBounces$.inboundSchema)).optional(),
            transacAttributes: z.array(z.lazy(() => TransacAttributes$.inboundSchema)).optional(),
            unsubscriptions: z.lazy(() => Unsubscriptions$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.clicked === undefined ? null : { clicked: v.clicked }),
                ...(v.complaints === undefined ? null : { complaints: v.complaints }),
                ...(v.delivered === undefined ? null : { delivered: v.delivered }),
                ...(v.hardBounces === undefined ? null : { hardBounces: v.hardBounces }),
                ...(v.messagesSent === undefined ? null : { messagesSent: v.messagesSent }),
                ...(v.opened === undefined ? null : { opened: v.opened }),
                ...(v.softBounces === undefined ? null : { softBounces: v.softBounces }),
                ...(v.transacAttributes === undefined
                    ? null
                    : { transacAttributes: v.transacAttributes }),
                ...(v.unsubscriptions === undefined
                    ? null
                    : { unsubscriptions: v.unsubscriptions }),
            };
        });

    export type Outbound = {
        clicked?: Array<Clicked$.Outbound> | undefined;
        complaints?: Array<Complaints$.Outbound> | undefined;
        delivered?: Array<Delivered$.Outbound> | undefined;
        hardBounces?: Array<HardBounces$.Outbound> | undefined;
        messagesSent?: Array<MessagesSent$.Outbound> | undefined;
        opened?: Array<Opened$.Outbound> | undefined;
        softBounces?: Array<SoftBounces$.Outbound> | undefined;
        transacAttributes?: Array<TransacAttributes$.Outbound> | undefined;
        unsubscriptions?: Unsubscriptions$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetContactCampaignStats> = z
        .object({
            clicked: z.array(z.lazy(() => Clicked$.outboundSchema)).optional(),
            complaints: z.array(z.lazy(() => Complaints$.outboundSchema)).optional(),
            delivered: z.array(z.lazy(() => Delivered$.outboundSchema)).optional(),
            hardBounces: z.array(z.lazy(() => HardBounces$.outboundSchema)).optional(),
            messagesSent: z.array(z.lazy(() => MessagesSent$.outboundSchema)).optional(),
            opened: z.array(z.lazy(() => Opened$.outboundSchema)).optional(),
            softBounces: z.array(z.lazy(() => SoftBounces$.outboundSchema)).optional(),
            transacAttributes: z.array(z.lazy(() => TransacAttributes$.outboundSchema)).optional(),
            unsubscriptions: z.lazy(() => Unsubscriptions$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.clicked === undefined ? null : { clicked: v.clicked }),
                ...(v.complaints === undefined ? null : { complaints: v.complaints }),
                ...(v.delivered === undefined ? null : { delivered: v.delivered }),
                ...(v.hardBounces === undefined ? null : { hardBounces: v.hardBounces }),
                ...(v.messagesSent === undefined ? null : { messagesSent: v.messagesSent }),
                ...(v.opened === undefined ? null : { opened: v.opened }),
                ...(v.softBounces === undefined ? null : { softBounces: v.softBounces }),
                ...(v.transacAttributes === undefined
                    ? null
                    : { transacAttributes: v.transacAttributes }),
                ...(v.unsubscriptions === undefined
                    ? null
                    : { unsubscriptions: v.unsubscriptions }),
            };
        });
}
