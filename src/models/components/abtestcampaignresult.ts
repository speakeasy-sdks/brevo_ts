/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { AbTestVersionClicks, AbTestVersionClicks$ } from "./abtestversionclicks";
import { AbTestVersionStats, AbTestVersionStats$ } from "./abtestversionstats";
import * as z from "zod";

export type ClickedLinks = {
    /**
     * Information on clicked links for a particular version
     */
    versionA: Array<AbTestVersionClicks>;
    /**
     * Information on clicked links for a particular version
     */
    versionB: Array<AbTestVersionClicks>;
};

export type Statistics = {
    /**
     * Percentage of a particular event for both versions
     */
    clicks: AbTestVersionStats;
    /**
     * Percentage of a particular event for both versions
     */
    complaints: AbTestVersionStats;
    /**
     * Percentage of a particular event for both versions
     */
    hardBounces: AbTestVersionStats;
    /**
     * Percentage of a particular event for both versions
     */
    openers: AbTestVersionStats;
    /**
     * Percentage of a particular event for both versions
     */
    softBounces: AbTestVersionStats;
    /**
     * Percentage of a particular event for both versions
     */
    unsubscribed: AbTestVersionStats;
};

/**
 * Criteria choosen for winning version (Open/Click)
 */
export enum WinningCriteria {
    Open = "Open",
    Click = "Click",
}

/**
 * Winning Campaign Info. pending = Campaign has been picked for sending and winning version is yet to be decided, tie = A tie happened between both the versions, notAvailable = Campaign has not yet been picked for sending.
 */
export enum WinningVersion {
    NotAvailable = "notAvailable",
    Pending = "pending",
    Tie = "tie",
    A = "A",
    B = "B",
}

export type AbTestCampaignResult = {
    /**
     * Click rate for current winning version
     */
    clickRate?: string | undefined;
    clickedLinks?: ClickedLinks | undefined;
    /**
     * Open rate for current winning version
     */
    openRate?: string | undefined;
    statistics?: Statistics | undefined;
    /**
     * Criteria choosen for winning version (Open/Click)
     */
    winningCriteria?: WinningCriteria | undefined;
    /**
     * Subject Line of current winning version
     */
    winningSubjectLine?: string | undefined;
    /**
     * Winning Campaign Info. pending = Campaign has been picked for sending and winning version is yet to be decided, tie = A tie happened between both the versions, notAvailable = Campaign has not yet been picked for sending.
     */
    winningVersion?: WinningVersion | undefined;
    /**
     * Open/Click rate for the winner version
     */
    winningVersionRate?: string | undefined;
};

/** @internal */
export namespace ClickedLinks$ {
    export type Inbound = {
        "Version A": Array<AbTestVersionClicks$.Inbound>;
        "Version B": Array<AbTestVersionClicks$.Inbound>;
    };

    export const inboundSchema: z.ZodType<ClickedLinks, z.ZodTypeDef, Inbound> = z
        .object({
            "Version A": z.array(AbTestVersionClicks$.inboundSchema),
            "Version B": z.array(AbTestVersionClicks$.inboundSchema),
        })
        .transform((v) => {
            return {
                versionA: v["Version A"],
                versionB: v["Version B"],
            };
        });

    export type Outbound = {
        "Version A": Array<AbTestVersionClicks$.Outbound>;
        "Version B": Array<AbTestVersionClicks$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ClickedLinks> = z
        .object({
            versionA: z.array(AbTestVersionClicks$.outboundSchema),
            versionB: z.array(AbTestVersionClicks$.outboundSchema),
        })
        .transform((v) => {
            return {
                "Version A": v.versionA,
                "Version B": v.versionB,
            };
        });
}

/** @internal */
export namespace Statistics$ {
    export type Inbound = {
        clicks: AbTestVersionStats$.Inbound;
        complaints: AbTestVersionStats$.Inbound;
        hardBounces: AbTestVersionStats$.Inbound;
        openers: AbTestVersionStats$.Inbound;
        softBounces: AbTestVersionStats$.Inbound;
        unsubscribed: AbTestVersionStats$.Inbound;
    };

    export const inboundSchema: z.ZodType<Statistics, z.ZodTypeDef, Inbound> = z
        .object({
            clicks: AbTestVersionStats$.inboundSchema,
            complaints: AbTestVersionStats$.inboundSchema,
            hardBounces: AbTestVersionStats$.inboundSchema,
            openers: AbTestVersionStats$.inboundSchema,
            softBounces: AbTestVersionStats$.inboundSchema,
            unsubscribed: AbTestVersionStats$.inboundSchema,
        })
        .transform((v) => {
            return {
                clicks: v.clicks,
                complaints: v.complaints,
                hardBounces: v.hardBounces,
                openers: v.openers,
                softBounces: v.softBounces,
                unsubscribed: v.unsubscribed,
            };
        });

    export type Outbound = {
        clicks: AbTestVersionStats$.Outbound;
        complaints: AbTestVersionStats$.Outbound;
        hardBounces: AbTestVersionStats$.Outbound;
        openers: AbTestVersionStats$.Outbound;
        softBounces: AbTestVersionStats$.Outbound;
        unsubscribed: AbTestVersionStats$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Statistics> = z
        .object({
            clicks: AbTestVersionStats$.outboundSchema,
            complaints: AbTestVersionStats$.outboundSchema,
            hardBounces: AbTestVersionStats$.outboundSchema,
            openers: AbTestVersionStats$.outboundSchema,
            softBounces: AbTestVersionStats$.outboundSchema,
            unsubscribed: AbTestVersionStats$.outboundSchema,
        })
        .transform((v) => {
            return {
                clicks: v.clicks,
                complaints: v.complaints,
                hardBounces: v.hardBounces,
                openers: v.openers,
                softBounces: v.softBounces,
                unsubscribed: v.unsubscribed,
            };
        });
}

/** @internal */
export const WinningCriteria$ = z.nativeEnum(WinningCriteria);

/** @internal */
export const WinningVersion$ = z.nativeEnum(WinningVersion);

/** @internal */
export namespace AbTestCampaignResult$ {
    export type Inbound = {
        clickRate?: string | undefined;
        clickedLinks?: ClickedLinks$.Inbound | undefined;
        openRate?: string | undefined;
        statistics?: Statistics$.Inbound | undefined;
        winningCriteria?: WinningCriteria | undefined;
        winningSubjectLine?: string | undefined;
        winningVersion?: WinningVersion | undefined;
        winningVersionRate?: string | undefined;
    };

    export const inboundSchema: z.ZodType<AbTestCampaignResult, z.ZodTypeDef, Inbound> = z
        .object({
            clickRate: z.string().optional(),
            clickedLinks: z.lazy(() => ClickedLinks$.inboundSchema).optional(),
            openRate: z.string().optional(),
            statistics: z.lazy(() => Statistics$.inboundSchema).optional(),
            winningCriteria: WinningCriteria$.optional(),
            winningSubjectLine: z.string().optional(),
            winningVersion: WinningVersion$.optional(),
            winningVersionRate: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.clickRate === undefined ? null : { clickRate: v.clickRate }),
                ...(v.clickedLinks === undefined ? null : { clickedLinks: v.clickedLinks }),
                ...(v.openRate === undefined ? null : { openRate: v.openRate }),
                ...(v.statistics === undefined ? null : { statistics: v.statistics }),
                ...(v.winningCriteria === undefined
                    ? null
                    : { winningCriteria: v.winningCriteria }),
                ...(v.winningSubjectLine === undefined
                    ? null
                    : { winningSubjectLine: v.winningSubjectLine }),
                ...(v.winningVersion === undefined ? null : { winningVersion: v.winningVersion }),
                ...(v.winningVersionRate === undefined
                    ? null
                    : { winningVersionRate: v.winningVersionRate }),
            };
        });

    export type Outbound = {
        clickRate?: string | undefined;
        clickedLinks?: ClickedLinks$.Outbound | undefined;
        openRate?: string | undefined;
        statistics?: Statistics$.Outbound | undefined;
        winningCriteria?: WinningCriteria | undefined;
        winningSubjectLine?: string | undefined;
        winningVersion?: WinningVersion | undefined;
        winningVersionRate?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AbTestCampaignResult> = z
        .object({
            clickRate: z.string().optional(),
            clickedLinks: z.lazy(() => ClickedLinks$.outboundSchema).optional(),
            openRate: z.string().optional(),
            statistics: z.lazy(() => Statistics$.outboundSchema).optional(),
            winningCriteria: WinningCriteria$.optional(),
            winningSubjectLine: z.string().optional(),
            winningVersion: WinningVersion$.optional(),
            winningVersionRate: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.clickRate === undefined ? null : { clickRate: v.clickRate }),
                ...(v.clickedLinks === undefined ? null : { clickedLinks: v.clickedLinks }),
                ...(v.openRate === undefined ? null : { openRate: v.openRate }),
                ...(v.statistics === undefined ? null : { statistics: v.statistics }),
                ...(v.winningCriteria === undefined
                    ? null
                    : { winningCriteria: v.winningCriteria }),
                ...(v.winningSubjectLine === undefined
                    ? null
                    : { winningSubjectLine: v.winningSubjectLine }),
                ...(v.winningVersion === undefined ? null : { winningVersion: v.winningVersion }),
                ...(v.winningVersionRate === undefined
                    ? null
                    : { winningVersionRate: v.winningVersionRate }),
            };
        });
}
