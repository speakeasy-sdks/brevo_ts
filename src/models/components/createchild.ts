/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

/**
 * Language of the child account
 */
export enum Language {
    Fr = "fr",
    Es = "es",
    Pt = "pt",
    It = "it",
    De = "de",
    En = "en",
}

export type CreateChild = {
    /**
     * Company name to use to create the child account
     */
    companyName: string;
    /**
     * Email address to create the child account
     */
    email: string;
    /**
     * First name to use to create the child account
     */
    firstName: string;
    /**
     * Language of the child account
     */
    language?: Language | undefined;
    /**
     * Last name to use to create the child account
     */
    lastName: string;
    /**
     * Password for the child account to login
     */
    password: string;
};

/** @internal */
export const Language$ = z.nativeEnum(Language);

/** @internal */
export namespace CreateChild$ {
    export type Inbound = {
        companyName: string;
        email: string;
        firstName: string;
        language?: Language | undefined;
        lastName: string;
        password: string;
    };

    export const inboundSchema: z.ZodType<CreateChild, z.ZodTypeDef, Inbound> = z
        .object({
            companyName: z.string(),
            email: z.string(),
            firstName: z.string(),
            language: Language$.optional(),
            lastName: z.string(),
            password: z.string(),
        })
        .transform((v) => {
            return {
                companyName: v.companyName,
                email: v.email,
                firstName: v.firstName,
                ...(v.language === undefined ? null : { language: v.language }),
                lastName: v.lastName,
                password: v.password,
            };
        });

    export type Outbound = {
        companyName: string;
        email: string;
        firstName: string;
        language?: Language | undefined;
        lastName: string;
        password: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateChild> = z
        .object({
            companyName: z.string(),
            email: z.string(),
            firstName: z.string(),
            language: Language$.optional(),
            lastName: z.string(),
            password: z.string(),
        })
        .transform((v) => {
            return {
                companyName: v.companyName,
                email: v.email,
                firstName: v.firstName,
                ...(v.language === undefined ? null : { language: v.language }),
                lastName: v.lastName,
                password: v.password,
            };
        });
}
