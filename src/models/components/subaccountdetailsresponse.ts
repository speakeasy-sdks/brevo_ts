/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Email credits remaining on the sub-account
 */
export type Emails = {
    /**
     * Quantity of email messaging limits provided
     */
    quantity?: number | undefined;
    /**
     * Available email messaging limits for use
     */
    remaining?: number | undefined;
};

/**
 * Credits quota and remaining credits on the sub-account
 */
export type SubAccountDetailsResponseCredits = {
    /**
     * Email credits remaining on the sub-account
     */
    emails?: Emails | undefined;
    /**
     * SMS credits remaining on the sub-account
     */
    sms?: number | undefined;
};

/**
 * Inbox details
 */
export type Inbox = {
    /**
     * Quantity of inbox provided
     */
    quantity?: number | undefined;
    /**
     * Available inboxes for use
     */
    remaining?: number | undefined;
};

/**
 * Landing page details
 */
export type LandingPage = {
    /**
     * Quantity of landing pages provided
     */
    quantity?: number | undefined;
    /**
     * Available landing pages for use
     */
    remaining?: number | undefined;
};

/**
 * Multi-account details
 */
export type SubAccountDetailsResponseUsers = {
    /**
     * Quantity of multi-account's provided
     */
    quantity?: number | undefined;
    /**
     * Available multi-accounts for use
     */
    remaining?: number | undefined;
};

/**
 * Features available on the sub-account
 */
export type SubAccountDetailsResponseFeatures = {
    /**
     * Inbox details
     */
    inbox?: Inbox | undefined;
    /**
     * Landing page details
     */
    landingPage?: LandingPage | undefined;
    /**
     * Multi-account details
     */
    users?: SubAccountDetailsResponseUsers | undefined;
};

/**
 * Sub-account plan details
 */
export type SubAccountDetailsResponsePlanInfo = {
    /**
     * Credits quota and remaining credits on the sub-account
     */
    credits?: SubAccountDetailsResponseCredits | undefined;
    /**
     * Features available on the sub-account
     */
    features?: SubAccountDetailsResponseFeatures | undefined;
    /**
     * type of the plan
     */
    planType?: string | undefined;
};

export type SubAccountDetailsResponse = {
    /**
     * Sub-account company name
     */
    companyName?: string | undefined;
    /**
     * Email id of the sub-account organization
     */
    email?: string | undefined;
    /**
     * Name of the sub-account user
     */
    name?: string | undefined;
    /**
     * Sub-account plan details
     */
    planInfo?: SubAccountDetailsResponsePlanInfo | undefined;
};

/** @internal */
export namespace Emails$ {
    export type Inbound = {
        quantity?: number | undefined;
        remaining?: number | undefined;
    };

    export const inboundSchema: z.ZodType<Emails, z.ZodTypeDef, Inbound> = z
        .object({
            quantity: z.number().int().optional(),
            remaining: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.quantity === undefined ? null : { quantity: v.quantity }),
                ...(v.remaining === undefined ? null : { remaining: v.remaining }),
            };
        });

    export type Outbound = {
        quantity?: number | undefined;
        remaining?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Emails> = z
        .object({
            quantity: z.number().int().optional(),
            remaining: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.quantity === undefined ? null : { quantity: v.quantity }),
                ...(v.remaining === undefined ? null : { remaining: v.remaining }),
            };
        });
}

/** @internal */
export namespace SubAccountDetailsResponseCredits$ {
    export type Inbound = {
        emails?: Emails$.Inbound | undefined;
        sms?: number | undefined;
    };

    export const inboundSchema: z.ZodType<SubAccountDetailsResponseCredits, z.ZodTypeDef, Inbound> =
        z
            .object({
                emails: z.lazy(() => Emails$.inboundSchema).optional(),
                sms: z.number().int().optional(),
            })
            .transform((v) => {
                return {
                    ...(v.emails === undefined ? null : { emails: v.emails }),
                    ...(v.sms === undefined ? null : { sms: v.sms }),
                };
            });

    export type Outbound = {
        emails?: Emails$.Outbound | undefined;
        sms?: number | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        SubAccountDetailsResponseCredits
    > = z
        .object({
            emails: z.lazy(() => Emails$.outboundSchema).optional(),
            sms: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.emails === undefined ? null : { emails: v.emails }),
                ...(v.sms === undefined ? null : { sms: v.sms }),
            };
        });
}

/** @internal */
export namespace Inbox$ {
    export type Inbound = {
        quantity?: number | undefined;
        remaining?: number | undefined;
    };

    export const inboundSchema: z.ZodType<Inbox, z.ZodTypeDef, Inbound> = z
        .object({
            quantity: z.number().int().optional(),
            remaining: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.quantity === undefined ? null : { quantity: v.quantity }),
                ...(v.remaining === undefined ? null : { remaining: v.remaining }),
            };
        });

    export type Outbound = {
        quantity?: number | undefined;
        remaining?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Inbox> = z
        .object({
            quantity: z.number().int().optional(),
            remaining: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.quantity === undefined ? null : { quantity: v.quantity }),
                ...(v.remaining === undefined ? null : { remaining: v.remaining }),
            };
        });
}

/** @internal */
export namespace LandingPage$ {
    export type Inbound = {
        quantity?: number | undefined;
        remaining?: number | undefined;
    };

    export const inboundSchema: z.ZodType<LandingPage, z.ZodTypeDef, Inbound> = z
        .object({
            quantity: z.number().int().optional(),
            remaining: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.quantity === undefined ? null : { quantity: v.quantity }),
                ...(v.remaining === undefined ? null : { remaining: v.remaining }),
            };
        });

    export type Outbound = {
        quantity?: number | undefined;
        remaining?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, LandingPage> = z
        .object({
            quantity: z.number().int().optional(),
            remaining: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.quantity === undefined ? null : { quantity: v.quantity }),
                ...(v.remaining === undefined ? null : { remaining: v.remaining }),
            };
        });
}

/** @internal */
export namespace SubAccountDetailsResponseUsers$ {
    export type Inbound = {
        quantity?: number | undefined;
        remaining?: number | undefined;
    };

    export const inboundSchema: z.ZodType<SubAccountDetailsResponseUsers, z.ZodTypeDef, Inbound> = z
        .object({
            quantity: z.number().int().optional(),
            remaining: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.quantity === undefined ? null : { quantity: v.quantity }),
                ...(v.remaining === undefined ? null : { remaining: v.remaining }),
            };
        });

    export type Outbound = {
        quantity?: number | undefined;
        remaining?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SubAccountDetailsResponseUsers> =
        z
            .object({
                quantity: z.number().int().optional(),
                remaining: z.number().int().optional(),
            })
            .transform((v) => {
                return {
                    ...(v.quantity === undefined ? null : { quantity: v.quantity }),
                    ...(v.remaining === undefined ? null : { remaining: v.remaining }),
                };
            });
}

/** @internal */
export namespace SubAccountDetailsResponseFeatures$ {
    export type Inbound = {
        inbox?: Inbox$.Inbound | undefined;
        landingPage?: LandingPage$.Inbound | undefined;
        users?: SubAccountDetailsResponseUsers$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<
        SubAccountDetailsResponseFeatures,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            inbox: z.lazy(() => Inbox$.inboundSchema).optional(),
            landingPage: z.lazy(() => LandingPage$.inboundSchema).optional(),
            users: z.lazy(() => SubAccountDetailsResponseUsers$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.inbox === undefined ? null : { inbox: v.inbox }),
                ...(v.landingPage === undefined ? null : { landingPage: v.landingPage }),
                ...(v.users === undefined ? null : { users: v.users }),
            };
        });

    export type Outbound = {
        inbox?: Inbox$.Outbound | undefined;
        landingPage?: LandingPage$.Outbound | undefined;
        users?: SubAccountDetailsResponseUsers$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        SubAccountDetailsResponseFeatures
    > = z
        .object({
            inbox: z.lazy(() => Inbox$.outboundSchema).optional(),
            landingPage: z.lazy(() => LandingPage$.outboundSchema).optional(),
            users: z.lazy(() => SubAccountDetailsResponseUsers$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.inbox === undefined ? null : { inbox: v.inbox }),
                ...(v.landingPage === undefined ? null : { landingPage: v.landingPage }),
                ...(v.users === undefined ? null : { users: v.users }),
            };
        });
}

/** @internal */
export namespace SubAccountDetailsResponsePlanInfo$ {
    export type Inbound = {
        credits?: SubAccountDetailsResponseCredits$.Inbound | undefined;
        features?: SubAccountDetailsResponseFeatures$.Inbound | undefined;
        planType?: string | undefined;
    };

    export const inboundSchema: z.ZodType<
        SubAccountDetailsResponsePlanInfo,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            credits: z.lazy(() => SubAccountDetailsResponseCredits$.inboundSchema).optional(),
            features: z.lazy(() => SubAccountDetailsResponseFeatures$.inboundSchema).optional(),
            planType: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.credits === undefined ? null : { credits: v.credits }),
                ...(v.features === undefined ? null : { features: v.features }),
                ...(v.planType === undefined ? null : { planType: v.planType }),
            };
        });

    export type Outbound = {
        credits?: SubAccountDetailsResponseCredits$.Outbound | undefined;
        features?: SubAccountDetailsResponseFeatures$.Outbound | undefined;
        planType?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        SubAccountDetailsResponsePlanInfo
    > = z
        .object({
            credits: z.lazy(() => SubAccountDetailsResponseCredits$.outboundSchema).optional(),
            features: z.lazy(() => SubAccountDetailsResponseFeatures$.outboundSchema).optional(),
            planType: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.credits === undefined ? null : { credits: v.credits }),
                ...(v.features === undefined ? null : { features: v.features }),
                ...(v.planType === undefined ? null : { planType: v.planType }),
            };
        });
}

/** @internal */
export namespace SubAccountDetailsResponse$ {
    export type Inbound = {
        companyName?: string | undefined;
        email?: string | undefined;
        name?: string | undefined;
        planInfo?: SubAccountDetailsResponsePlanInfo$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<SubAccountDetailsResponse, z.ZodTypeDef, Inbound> = z
        .object({
            companyName: z.string().optional(),
            email: z.string().optional(),
            name: z.string().optional(),
            planInfo: z.lazy(() => SubAccountDetailsResponsePlanInfo$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.planInfo === undefined ? null : { planInfo: v.planInfo }),
            };
        });

    export type Outbound = {
        companyName?: string | undefined;
        email?: string | undefined;
        name?: string | undefined;
        planInfo?: SubAccountDetailsResponsePlanInfo$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SubAccountDetailsResponse> = z
        .object({
            companyName: z.string().optional(),
            email: z.string().optional(),
            name: z.string().optional(),
            planInfo: z.lazy(() => SubAccountDetailsResponsePlanInfo$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.planInfo === undefined ? null : { planInfo: v.planInfo }),
            };
        });
}
