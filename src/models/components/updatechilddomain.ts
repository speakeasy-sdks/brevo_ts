/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type UpdateChildDomain = {
    /**
     * Value for the sender domain that will replace the existing domain
     */
    domain?: string | undefined;
};

/** @internal */
export namespace UpdateChildDomain$ {
    export type Inbound = {
        domain?: string | undefined;
    };

    export const inboundSchema: z.ZodType<UpdateChildDomain, z.ZodTypeDef, Inbound> = z
        .object({
            domain: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.domain === undefined ? null : { domain: v.domain }),
            };
        });

    export type Outbound = {
        domain?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateChildDomain> = z
        .object({
            domain: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.domain === undefined ? null : { domain: v.domain }),
            };
        });
}
