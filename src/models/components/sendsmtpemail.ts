/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type Attachment = {
    /**
     * Base64 encoded chunk data of the attachment generated on the fly
     */
    content?: string | undefined;
    /**
     * **Required if content is passed**. Name of the attachment
     *
     * @remarks
     *
     */
    name?: string | undefined;
    /**
     * Absolute url of the attachment (**no local file**).
     *
     * @remarks
     *
     */
    url?: string | undefined;
};

export type Bcc = {
    /**
     * Email address of the recipient in bcc
     */
    email: string;
    /**
     * Name of the recipient in bcc. **Maximum allowed characters are 70**.
     *
     * @remarks
     *
     */
    name?: string | undefined;
};

export type Cc = {
    /**
     * Email address of the recipient in cc
     */
    email: string;
    /**
     * Name of the recipient in cc. **Maximum allowed characters are 70**.
     *
     * @remarks
     *
     */
    name?: string | undefined;
};

export type SendSmtpEmailBcc = {
    /**
     * Email address of the recipient in bcc
     */
    email: string;
    /**
     * Name of the recipient in bcc. **Maximum allowed characters are 70**.
     *
     * @remarks
     *
     */
    name?: string | undefined;
};

export type SendSmtpEmailCc = {
    /**
     * Email address of the recipient in cc
     */
    email: string;
    /**
     * Name of the recipient in cc. **Maximum allowed characters are 70**.
     *
     * @remarks
     *
     */
    name?: string | undefined;
};

/**
 * Email (**required**), along with name (_optional_), on which transactional mail recipients will be able to reply back. For example,
 *
 * @remarks
 * **{"email":"ann6533@example.com", "name":"Ann"}**
 *
 */
export type SendSmtpEmailReplyTo = {
    /**
     * Email address in reply to
     */
    email: string;
    /**
     * Name in reply to. **Maximum allowed characters are 70**.
     *
     * @remarks
     *
     */
    name?: string | undefined;
};

export type SendSmtpEmailTo = {
    /**
     * Email address of the recipient
     */
    email: string;
    /**
     * Name of the recipient. **Maximum allowed characters are 70**.
     *
     * @remarks
     *
     */
    name?: string | undefined;
};

export type MessageVersions = {
    /**
     * List of email addresses and names (_optional_) of the recipients in bcc
     *
     * @remarks
     *
     */
    bcc?: Array<SendSmtpEmailBcc> | undefined;
    /**
     * List of email addresses and names (_optional_) of the recipients in cc
     *
     * @remarks
     *
     */
    cc?: Array<SendSmtpEmailCc> | undefined;
    /**
     * Pass the set of attributes to customize the template. For example, **{"FNAME":"Joe", "LNAME":"Doe"}**. It's **considered only if template is in New Template Language format**.
     *
     * @remarks
     *
     */
    params?: Record<string, any> | undefined;
    /**
     * Email (**required**), along with name (_optional_), on which transactional mail recipients will be able to reply back. For example,
     *
     * @remarks
     * **{"email":"ann6533@example.com", "name":"Ann"}**
     *
     */
    replyTo?: SendSmtpEmailReplyTo | undefined;
    /**
     * Custom subject specific to message version
     *
     * @remarks
     *
     */
    subject?: string | undefined;
    /**
     * List of email addresses and names (_optional_) of the recipients. For example,
     *
     * @remarks
     * **[{"name":"Jimmy", "email":"jimmy98@example.com"}, {"name":"Joe", "email":"joe@example.com"}]**
     *
     */
    to: Array<SendSmtpEmailTo>;
};

/**
 * Email (**required**), along with name (_optional_), on which transactional mail recipients will be able to reply back. For example,
 *
 * @remarks
 * **{"email":"ann6533@example.com", "name":"Ann"}**
 *
 */
export type ReplyTo = {
    /**
     * Email address in reply to
     */
    email: string;
    /**
     * Name in reply to. **Maximum allowed characters are 70**.
     *
     * @remarks
     *
     */
    name?: string | undefined;
};

/**
 * **Mandatory if `templateId` is not passed**. Pass name (_optional_) and email or id of sender from which emails will be sent. **`name` will be ignored if passed along with sender `id`**. For example,
 *
 * @remarks
 * **{"name":"Mary from MyShop", "email":"no-reply@myshop.com"}**
 * **{"id":2}**
 *
 */
export type SendSmtpEmailSender = {
    /**
     * Email of the sender from which the emails will be sent. Mandatory if sender id is not passed.
     */
    email?: string | undefined;
    /**
     * Id of the sender from which the emails will be sent. In order to select a sender with specific pool of IPâ€™s, dedicated ip users shall pass id (instead of email). Mandatory if email is not passed.
     */
    id?: number | undefined;
    /**
     * description: Name of the sender from which the emails will be sent. **Maximum allowed characters are 70**. Applicable only when email is passed.
     *
     * @remarks
     *
     */
    name?: string | undefined;
};

export type To = {
    /**
     * Email address of the recipient
     */
    email: string;
    /**
     * Name of the recipient. **Maximum allowed characters are 70**.
     *
     * @remarks
     *
     */
    name?: string | undefined;
};

export type SendSmtpEmail = {
    /**
     * Pass the _absolute URL_ (**no local file**) or the _base64 content_ of the attachment along with the attachment name. **Mandatory if attachment content is passed**. For example,
     *
     * @remarks
     * **[{"url":"https://attachment.domain.com/myAttachmentFromUrl.jpg", "name":"myAttachmentFromUrl.jpg"}, {"content":"base64 example content", "name":"myAttachmentFromBase64.jpg"}]**.
     * Allowed extensions for attachment file:
     * #### xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg, png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt, pptx, tar, ez, ics, mobi, msg, pub, eps, odt, mp3, m4a, m4v, wma, ogg, flac, wav, aif, aifc, aiff, mp4, mov, avi, mkv, mpeg, mpg, wmv, pkpass and xlsm.
     * If `templateId` is passed and is in New Template Language format then both attachment url and content are accepted. If template is in Old template Language format, then `attachment` is ignored
     *
     */
    attachment?: Array<Attachment> | undefined;
    /**
     * Valid UUIDv4 batch id to identify the scheduled batches transactional email. If not passed we will create a valid UUIDv4 batch id at our end.
     */
    batchId?: string | undefined;
    /**
     * List of email addresses and names (_optional_) of the recipients in bcc
     *
     * @remarks
     *
     */
    bcc?: Array<Bcc> | undefined;
    /**
     * List of email addresses and names (_optional_) of the recipients in cc
     *
     * @remarks
     *
     */
    cc?: Array<Cc> | undefined;
    /**
     * Pass the set of custom headers (_not the standard headers_) that shall be sent along the mail headers in the original email. **'sender.ip'** header can be set (**only for dedicated ip users**) to mention the IP to be used for sending transactional emails. Headers are allowed in `This-Case-Only` (i.e. words separated by hyphen with first letter of each word in capital letter), they will be converted to such case styling if not in this format in the request payload. For example,
     *
     * @remarks
     * **{"sender.ip":"1.2.3.4", "X-Mailin-custom":"some_custom_header", "idempotencyKey":"abc-123"}**.
     *
     */
    headers?: Record<string, any> | undefined;
    /**
     * HTML body of the message. **Mandatory if 'templateId' is not passed, ignored if 'templateId' is passed**
     *
     * @remarks
     *
     */
    htmlContent?: string | undefined;
    /**
     * You can customize and send out multiple versions of a mail. **templateId** can be customized only if global parameter contains templateId. **htmlContent and textContent** can be customized only if any of the two, htmlContent or textContent, is present in global parameters. Some global parameters such as **to(mandatory), bcc, cc, replyTo, subject** can also be customized specific to each version.
     *
     * @remarks
     * Total number of recipients in one API request must not exceed 2000. However, you can still pass upto 99 recipients maximum in one message version.
     * The size of individual params in all the messageVersions shall not exceed **100 KB** limit and that of cumulative params shall not exceed **1000 KB**.
     * You can follow this **step-by-step guide** on how to use **messageVersions** to batch send emails - **https://developers.brevo.com/docs/batch-send-transactional-emails**
     *
     */
    messageVersions?: Array<MessageVersions> | undefined;
    /**
     * Pass the set of attributes to customize the template. For example, **{"FNAME":"Joe", "LNAME":"Doe"}**. It's **considered only if template is in New Template Language format**.
     *
     * @remarks
     *
     */
    params?: Record<string, any> | undefined;
    /**
     * Email (**required**), along with name (_optional_), on which transactional mail recipients will be able to reply back. For example,
     *
     * @remarks
     * **{"email":"ann6533@example.com", "name":"Ann"}**
     *
     */
    replyTo?: ReplyTo | undefined;
    /**
     * UTC date-time on which the email has to schedule (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for scheduling. There can be an expected delay of +5 minutes in scheduled email delivery. **Please note this feature is currently a public beta**.
     */
    scheduledAt?: Date | undefined;
    /**
     * **Mandatory if `templateId` is not passed**. Pass name (_optional_) and email or id of sender from which emails will be sent. **`name` will be ignored if passed along with sender `id`**. For example,
     *
     * @remarks
     * **{"name":"Mary from MyShop", "email":"no-reply@myshop.com"}**
     * **{"id":2}**
     *
     */
    sender?: SendSmtpEmailSender | undefined;
    /**
     * Subject of the message. **Mandatory if 'templateId' is not passed**
     *
     * @remarks
     *
     */
    subject?: string | undefined;
    /**
     * Tag your emails to find them more easily
     */
    tags?: Array<string> | undefined;
    /**
     * Id of the template.
     */
    templateId?: number | undefined;
    /**
     * Plain Text body of the message. **Ignored if 'templateId' is passed**
     *
     * @remarks
     *
     */
    textContent?: string | undefined;
    /**
     * **Mandatory if messageVersions are not passed, ignored if messageVersions are passed**
     *
     * @remarks
     * List of email addresses and names (_optional_) of the recipients. For example,
     * **[{"name":"Jimmy", "email":"jimmy98@example.com"}, {"name":"Joe", "email":"joe@example.com"}]**
     *
     */
    to?: Array<To> | undefined;
};

/** @internal */
export namespace Attachment$ {
    export type Inbound = {
        content?: string | undefined;
        name?: string | undefined;
        url?: string | undefined;
    };

    export const inboundSchema: z.ZodType<Attachment, z.ZodTypeDef, Inbound> = z
        .object({
            content: z.string().optional(),
            name: z.string().optional(),
            url: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.content === undefined ? null : { content: v.content }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.url === undefined ? null : { url: v.url }),
            };
        });

    export type Outbound = {
        content?: string | undefined;
        name?: string | undefined;
        url?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Attachment> = z
        .object({
            content: z.string().optional(),
            name: z.string().optional(),
            url: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.content === undefined ? null : { content: v.content }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.url === undefined ? null : { url: v.url }),
            };
        });
}

/** @internal */
export namespace Bcc$ {
    export type Inbound = {
        email: string;
        name?: string | undefined;
    };

    export const inboundSchema: z.ZodType<Bcc, z.ZodTypeDef, Inbound> = z
        .object({
            email: z.string(),
            name: z.string().optional(),
        })
        .transform((v) => {
            return {
                email: v.email,
                ...(v.name === undefined ? null : { name: v.name }),
            };
        });

    export type Outbound = {
        email: string;
        name?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Bcc> = z
        .object({
            email: z.string(),
            name: z.string().optional(),
        })
        .transform((v) => {
            return {
                email: v.email,
                ...(v.name === undefined ? null : { name: v.name }),
            };
        });
}

/** @internal */
export namespace Cc$ {
    export type Inbound = {
        email: string;
        name?: string | undefined;
    };

    export const inboundSchema: z.ZodType<Cc, z.ZodTypeDef, Inbound> = z
        .object({
            email: z.string(),
            name: z.string().optional(),
        })
        .transform((v) => {
            return {
                email: v.email,
                ...(v.name === undefined ? null : { name: v.name }),
            };
        });

    export type Outbound = {
        email: string;
        name?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Cc> = z
        .object({
            email: z.string(),
            name: z.string().optional(),
        })
        .transform((v) => {
            return {
                email: v.email,
                ...(v.name === undefined ? null : { name: v.name }),
            };
        });
}

/** @internal */
export namespace SendSmtpEmailBcc$ {
    export type Inbound = {
        email: string;
        name?: string | undefined;
    };

    export const inboundSchema: z.ZodType<SendSmtpEmailBcc, z.ZodTypeDef, Inbound> = z
        .object({
            email: z.string(),
            name: z.string().optional(),
        })
        .transform((v) => {
            return {
                email: v.email,
                ...(v.name === undefined ? null : { name: v.name }),
            };
        });

    export type Outbound = {
        email: string;
        name?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SendSmtpEmailBcc> = z
        .object({
            email: z.string(),
            name: z.string().optional(),
        })
        .transform((v) => {
            return {
                email: v.email,
                ...(v.name === undefined ? null : { name: v.name }),
            };
        });
}

/** @internal */
export namespace SendSmtpEmailCc$ {
    export type Inbound = {
        email: string;
        name?: string | undefined;
    };

    export const inboundSchema: z.ZodType<SendSmtpEmailCc, z.ZodTypeDef, Inbound> = z
        .object({
            email: z.string(),
            name: z.string().optional(),
        })
        .transform((v) => {
            return {
                email: v.email,
                ...(v.name === undefined ? null : { name: v.name }),
            };
        });

    export type Outbound = {
        email: string;
        name?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SendSmtpEmailCc> = z
        .object({
            email: z.string(),
            name: z.string().optional(),
        })
        .transform((v) => {
            return {
                email: v.email,
                ...(v.name === undefined ? null : { name: v.name }),
            };
        });
}

/** @internal */
export namespace SendSmtpEmailReplyTo$ {
    export type Inbound = {
        email: string;
        name?: string | undefined;
    };

    export const inboundSchema: z.ZodType<SendSmtpEmailReplyTo, z.ZodTypeDef, Inbound> = z
        .object({
            email: z.string(),
            name: z.string().optional(),
        })
        .transform((v) => {
            return {
                email: v.email,
                ...(v.name === undefined ? null : { name: v.name }),
            };
        });

    export type Outbound = {
        email: string;
        name?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SendSmtpEmailReplyTo> = z
        .object({
            email: z.string(),
            name: z.string().optional(),
        })
        .transform((v) => {
            return {
                email: v.email,
                ...(v.name === undefined ? null : { name: v.name }),
            };
        });
}

/** @internal */
export namespace SendSmtpEmailTo$ {
    export type Inbound = {
        email: string;
        name?: string | undefined;
    };

    export const inboundSchema: z.ZodType<SendSmtpEmailTo, z.ZodTypeDef, Inbound> = z
        .object({
            email: z.string(),
            name: z.string().optional(),
        })
        .transform((v) => {
            return {
                email: v.email,
                ...(v.name === undefined ? null : { name: v.name }),
            };
        });

    export type Outbound = {
        email: string;
        name?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SendSmtpEmailTo> = z
        .object({
            email: z.string(),
            name: z.string().optional(),
        })
        .transform((v) => {
            return {
                email: v.email,
                ...(v.name === undefined ? null : { name: v.name }),
            };
        });
}

/** @internal */
export namespace MessageVersions$ {
    export type Inbound = {
        bcc?: Array<SendSmtpEmailBcc$.Inbound> | undefined;
        cc?: Array<SendSmtpEmailCc$.Inbound> | undefined;
        params?: Record<string, any> | undefined;
        replyTo?: SendSmtpEmailReplyTo$.Inbound | undefined;
        subject?: string | undefined;
        to: Array<SendSmtpEmailTo$.Inbound>;
    };

    export const inboundSchema: z.ZodType<MessageVersions, z.ZodTypeDef, Inbound> = z
        .object({
            bcc: z.array(z.lazy(() => SendSmtpEmailBcc$.inboundSchema)).optional(),
            cc: z.array(z.lazy(() => SendSmtpEmailCc$.inboundSchema)).optional(),
            params: z.record(z.any()).optional(),
            replyTo: z.lazy(() => SendSmtpEmailReplyTo$.inboundSchema).optional(),
            subject: z.string().optional(),
            to: z.array(z.lazy(() => SendSmtpEmailTo$.inboundSchema)),
        })
        .transform((v) => {
            return {
                ...(v.bcc === undefined ? null : { bcc: v.bcc }),
                ...(v.cc === undefined ? null : { cc: v.cc }),
                ...(v.params === undefined ? null : { params: v.params }),
                ...(v.replyTo === undefined ? null : { replyTo: v.replyTo }),
                ...(v.subject === undefined ? null : { subject: v.subject }),
                to: v.to,
            };
        });

    export type Outbound = {
        bcc?: Array<SendSmtpEmailBcc$.Outbound> | undefined;
        cc?: Array<SendSmtpEmailCc$.Outbound> | undefined;
        params?: Record<string, any> | undefined;
        replyTo?: SendSmtpEmailReplyTo$.Outbound | undefined;
        subject?: string | undefined;
        to: Array<SendSmtpEmailTo$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MessageVersions> = z
        .object({
            bcc: z.array(z.lazy(() => SendSmtpEmailBcc$.outboundSchema)).optional(),
            cc: z.array(z.lazy(() => SendSmtpEmailCc$.outboundSchema)).optional(),
            params: z.record(z.any()).optional(),
            replyTo: z.lazy(() => SendSmtpEmailReplyTo$.outboundSchema).optional(),
            subject: z.string().optional(),
            to: z.array(z.lazy(() => SendSmtpEmailTo$.outboundSchema)),
        })
        .transform((v) => {
            return {
                ...(v.bcc === undefined ? null : { bcc: v.bcc }),
                ...(v.cc === undefined ? null : { cc: v.cc }),
                ...(v.params === undefined ? null : { params: v.params }),
                ...(v.replyTo === undefined ? null : { replyTo: v.replyTo }),
                ...(v.subject === undefined ? null : { subject: v.subject }),
                to: v.to,
            };
        });
}

/** @internal */
export namespace ReplyTo$ {
    export type Inbound = {
        email: string;
        name?: string | undefined;
    };

    export const inboundSchema: z.ZodType<ReplyTo, z.ZodTypeDef, Inbound> = z
        .object({
            email: z.string(),
            name: z.string().optional(),
        })
        .transform((v) => {
            return {
                email: v.email,
                ...(v.name === undefined ? null : { name: v.name }),
            };
        });

    export type Outbound = {
        email: string;
        name?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ReplyTo> = z
        .object({
            email: z.string(),
            name: z.string().optional(),
        })
        .transform((v) => {
            return {
                email: v.email,
                ...(v.name === undefined ? null : { name: v.name }),
            };
        });
}

/** @internal */
export namespace SendSmtpEmailSender$ {
    export type Inbound = {
        email?: string | undefined;
        id?: number | undefined;
        name?: string | undefined;
    };

    export const inboundSchema: z.ZodType<SendSmtpEmailSender, z.ZodTypeDef, Inbound> = z
        .object({
            email: z.string().optional(),
            id: z.number().int().optional(),
            name: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
            };
        });

    export type Outbound = {
        email?: string | undefined;
        id?: number | undefined;
        name?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SendSmtpEmailSender> = z
        .object({
            email: z.string().optional(),
            id: z.number().int().optional(),
            name: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
            };
        });
}

/** @internal */
export namespace To$ {
    export type Inbound = {
        email: string;
        name?: string | undefined;
    };

    export const inboundSchema: z.ZodType<To, z.ZodTypeDef, Inbound> = z
        .object({
            email: z.string(),
            name: z.string().optional(),
        })
        .transform((v) => {
            return {
                email: v.email,
                ...(v.name === undefined ? null : { name: v.name }),
            };
        });

    export type Outbound = {
        email: string;
        name?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, To> = z
        .object({
            email: z.string(),
            name: z.string().optional(),
        })
        .transform((v) => {
            return {
                email: v.email,
                ...(v.name === undefined ? null : { name: v.name }),
            };
        });
}

/** @internal */
export namespace SendSmtpEmail$ {
    export type Inbound = {
        attachment?: Array<Attachment$.Inbound> | undefined;
        batchId?: string | undefined;
        bcc?: Array<Bcc$.Inbound> | undefined;
        cc?: Array<Cc$.Inbound> | undefined;
        headers?: Record<string, any> | undefined;
        htmlContent?: string | undefined;
        messageVersions?: Array<MessageVersions$.Inbound> | undefined;
        params?: Record<string, any> | undefined;
        replyTo?: ReplyTo$.Inbound | undefined;
        scheduledAt?: string | undefined;
        sender?: SendSmtpEmailSender$.Inbound | undefined;
        subject?: string | undefined;
        tags?: Array<string> | undefined;
        templateId?: number | undefined;
        textContent?: string | undefined;
        to?: Array<To$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<SendSmtpEmail, z.ZodTypeDef, Inbound> = z
        .object({
            attachment: z.array(z.lazy(() => Attachment$.inboundSchema)).optional(),
            batchId: z.string().optional(),
            bcc: z.array(z.lazy(() => Bcc$.inboundSchema)).optional(),
            cc: z.array(z.lazy(() => Cc$.inboundSchema)).optional(),
            headers: z.record(z.any()).optional(),
            htmlContent: z.string().optional(),
            messageVersions: z.array(z.lazy(() => MessageVersions$.inboundSchema)).optional(),
            params: z.record(z.any()).optional(),
            replyTo: z.lazy(() => ReplyTo$.inboundSchema).optional(),
            scheduledAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            sender: z.lazy(() => SendSmtpEmailSender$.inboundSchema).optional(),
            subject: z.string().optional(),
            tags: z.array(z.string()).optional(),
            templateId: z.number().int().optional(),
            textContent: z.string().optional(),
            to: z.array(z.lazy(() => To$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.attachment === undefined ? null : { attachment: v.attachment }),
                ...(v.batchId === undefined ? null : { batchId: v.batchId }),
                ...(v.bcc === undefined ? null : { bcc: v.bcc }),
                ...(v.cc === undefined ? null : { cc: v.cc }),
                ...(v.headers === undefined ? null : { headers: v.headers }),
                ...(v.htmlContent === undefined ? null : { htmlContent: v.htmlContent }),
                ...(v.messageVersions === undefined
                    ? null
                    : { messageVersions: v.messageVersions }),
                ...(v.params === undefined ? null : { params: v.params }),
                ...(v.replyTo === undefined ? null : { replyTo: v.replyTo }),
                ...(v.scheduledAt === undefined ? null : { scheduledAt: v.scheduledAt }),
                ...(v.sender === undefined ? null : { sender: v.sender }),
                ...(v.subject === undefined ? null : { subject: v.subject }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.templateId === undefined ? null : { templateId: v.templateId }),
                ...(v.textContent === undefined ? null : { textContent: v.textContent }),
                ...(v.to === undefined ? null : { to: v.to }),
            };
        });

    export type Outbound = {
        attachment?: Array<Attachment$.Outbound> | undefined;
        batchId?: string | undefined;
        bcc?: Array<Bcc$.Outbound> | undefined;
        cc?: Array<Cc$.Outbound> | undefined;
        headers?: Record<string, any> | undefined;
        htmlContent?: string | undefined;
        messageVersions?: Array<MessageVersions$.Outbound> | undefined;
        params?: Record<string, any> | undefined;
        replyTo?: ReplyTo$.Outbound | undefined;
        scheduledAt?: string | undefined;
        sender?: SendSmtpEmailSender$.Outbound | undefined;
        subject?: string | undefined;
        tags?: Array<string> | undefined;
        templateId?: number | undefined;
        textContent?: string | undefined;
        to?: Array<To$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SendSmtpEmail> = z
        .object({
            attachment: z.array(z.lazy(() => Attachment$.outboundSchema)).optional(),
            batchId: z.string().optional(),
            bcc: z.array(z.lazy(() => Bcc$.outboundSchema)).optional(),
            cc: z.array(z.lazy(() => Cc$.outboundSchema)).optional(),
            headers: z.record(z.any()).optional(),
            htmlContent: z.string().optional(),
            messageVersions: z.array(z.lazy(() => MessageVersions$.outboundSchema)).optional(),
            params: z.record(z.any()).optional(),
            replyTo: z.lazy(() => ReplyTo$.outboundSchema).optional(),
            scheduledAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            sender: z.lazy(() => SendSmtpEmailSender$.outboundSchema).optional(),
            subject: z.string().optional(),
            tags: z.array(z.string()).optional(),
            templateId: z.number().int().optional(),
            textContent: z.string().optional(),
            to: z.array(z.lazy(() => To$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.attachment === undefined ? null : { attachment: v.attachment }),
                ...(v.batchId === undefined ? null : { batchId: v.batchId }),
                ...(v.bcc === undefined ? null : { bcc: v.bcc }),
                ...(v.cc === undefined ? null : { cc: v.cc }),
                ...(v.headers === undefined ? null : { headers: v.headers }),
                ...(v.htmlContent === undefined ? null : { htmlContent: v.htmlContent }),
                ...(v.messageVersions === undefined
                    ? null
                    : { messageVersions: v.messageVersions }),
                ...(v.params === undefined ? null : { params: v.params }),
                ...(v.replyTo === undefined ? null : { replyTo: v.replyTo }),
                ...(v.scheduledAt === undefined ? null : { scheduledAt: v.scheduledAt }),
                ...(v.sender === undefined ? null : { sender: v.sender }),
                ...(v.subject === undefined ? null : { subject: v.subject }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.templateId === undefined ? null : { templateId: v.templateId }),
                ...(v.textContent === undefined ? null : { textContent: v.textContent }),
                ...(v.to === undefined ? null : { to: v.to }),
            };
        });
}
