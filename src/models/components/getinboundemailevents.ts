/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type GetInboundEmailEventsEvents = {
    /**
     * Date when email was received on SMTP relay
     */
    date: Date;
    /**
     * Recipient’s email address
     */
    recipient: string;
    /**
     * Sender’s email address
     */
    sender: string;
    /**
     * UUID that can be used to fetch additional data
     */
    uuid: string;
};

export type GetInboundEmailEvents = {
    events?: Array<GetInboundEmailEventsEvents> | undefined;
};

/** @internal */
export namespace GetInboundEmailEventsEvents$ {
    export type Inbound = {
        date: string;
        recipient: string;
        sender: string;
        uuid: string;
    };

    export const inboundSchema: z.ZodType<GetInboundEmailEventsEvents, z.ZodTypeDef, Inbound> = z
        .object({
            date: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            recipient: z.string(),
            sender: z.string(),
            uuid: z.string(),
        })
        .transform((v) => {
            return {
                date: v.date,
                recipient: v.recipient,
                sender: v.sender,
                uuid: v.uuid,
            };
        });

    export type Outbound = {
        date: string;
        recipient: string;
        sender: string;
        uuid: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetInboundEmailEventsEvents> = z
        .object({
            date: z.date().transform((v) => v.toISOString()),
            recipient: z.string(),
            sender: z.string(),
            uuid: z.string(),
        })
        .transform((v) => {
            return {
                date: v.date,
                recipient: v.recipient,
                sender: v.sender,
                uuid: v.uuid,
            };
        });
}

/** @internal */
export namespace GetInboundEmailEvents$ {
    export type Inbound = {
        events?: Array<GetInboundEmailEventsEvents$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<GetInboundEmailEvents, z.ZodTypeDef, Inbound> = z
        .object({
            events: z.array(z.lazy(() => GetInboundEmailEventsEvents$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.events === undefined ? null : { events: v.events }),
            };
        });

    export type Outbound = {
        events?: Array<GetInboundEmailEventsEvents$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetInboundEmailEvents> = z
        .object({
            events: z.array(z.lazy(() => GetInboundEmailEventsEvents$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.events === undefined ? null : { events: v.events }),
            };
        });
}
