/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

/**
 * Event which occurred
 */
export enum GetEmailEventReportEvent {
    Bounces = "bounces",
    HardBounces = "hardBounces",
    SoftBounces = "softBounces",
    Delivered = "delivered",
    Spam = "spam",
    Requests = "requests",
    Opened = "opened",
    Clicks = "clicks",
    Invalid = "invalid",
    Deferred = "deferred",
    Blocked = "blocked",
    Unsubscribed = "unsubscribed",
    Error = "error",
    LoadedByProxy = "loadedByProxy",
}

export type GetEmailEventReportEvents = {
    /**
     * UTC date-time on which the event has been generated
     */
    date: string;
    /**
     * Email address which generates the event
     */
    email: string;
    /**
     * Event which occurred
     */
    event: GetEmailEventReportEvent;
    /**
     * Sender email from which the emails are sent
     */
    from?: string | undefined;
    /**
     * IP from which the user has opened the email or clicked on the link (only available if the event is opened or clicks)
     */
    ip?: string | undefined;
    /**
     * The link which is sent to the user (only available if the event is requests or opened or clicks)
     */
    link?: string | undefined;
    /**
     * Message ID which generated the event
     */
    messageId: string;
    /**
     * Reason of bounce (only available if the event is hardbounce or softbounce)
     */
    reason?: string | undefined;
    /**
     * Subject of the event
     */
    subject?: string | undefined;
    /**
     * Tag of the email which generated the event
     */
    tag?: string | undefined;
    /**
     * ID of the template (only available if the email is template based)
     */
    templateId?: number | undefined;
};

export type GetEmailEventReport = {
    events?: Array<GetEmailEventReportEvents> | undefined;
};

/** @internal */
export const GetEmailEventReportEvent$ = z.nativeEnum(GetEmailEventReportEvent);

/** @internal */
export namespace GetEmailEventReportEvents$ {
    export type Inbound = {
        date: string;
        email: string;
        event: GetEmailEventReportEvent;
        from?: string | undefined;
        ip?: string | undefined;
        link?: string | undefined;
        messageId: string;
        reason?: string | undefined;
        subject?: string | undefined;
        tag?: string | undefined;
        templateId?: number | undefined;
    };

    export const inboundSchema: z.ZodType<GetEmailEventReportEvents, z.ZodTypeDef, Inbound> = z
        .object({
            date: z.string(),
            email: z.string(),
            event: GetEmailEventReportEvent$,
            from: z.string().optional(),
            ip: z.string().optional(),
            link: z.string().optional(),
            messageId: z.string(),
            reason: z.string().optional(),
            subject: z.string().optional(),
            tag: z.string().optional(),
            templateId: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                date: v.date,
                email: v.email,
                event: v.event,
                ...(v.from === undefined ? null : { from: v.from }),
                ...(v.ip === undefined ? null : { ip: v.ip }),
                ...(v.link === undefined ? null : { link: v.link }),
                messageId: v.messageId,
                ...(v.reason === undefined ? null : { reason: v.reason }),
                ...(v.subject === undefined ? null : { subject: v.subject }),
                ...(v.tag === undefined ? null : { tag: v.tag }),
                ...(v.templateId === undefined ? null : { templateId: v.templateId }),
            };
        });

    export type Outbound = {
        date: string;
        email: string;
        event: GetEmailEventReportEvent;
        from?: string | undefined;
        ip?: string | undefined;
        link?: string | undefined;
        messageId: string;
        reason?: string | undefined;
        subject?: string | undefined;
        tag?: string | undefined;
        templateId?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetEmailEventReportEvents> = z
        .object({
            date: z.string(),
            email: z.string(),
            event: GetEmailEventReportEvent$,
            from: z.string().optional(),
            ip: z.string().optional(),
            link: z.string().optional(),
            messageId: z.string(),
            reason: z.string().optional(),
            subject: z.string().optional(),
            tag: z.string().optional(),
            templateId: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                date: v.date,
                email: v.email,
                event: v.event,
                ...(v.from === undefined ? null : { from: v.from }),
                ...(v.ip === undefined ? null : { ip: v.ip }),
                ...(v.link === undefined ? null : { link: v.link }),
                messageId: v.messageId,
                ...(v.reason === undefined ? null : { reason: v.reason }),
                ...(v.subject === undefined ? null : { subject: v.subject }),
                ...(v.tag === undefined ? null : { tag: v.tag }),
                ...(v.templateId === undefined ? null : { templateId: v.templateId }),
            };
        });
}

/** @internal */
export namespace GetEmailEventReport$ {
    export type Inbound = {
        events?: Array<GetEmailEventReportEvents$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<GetEmailEventReport, z.ZodTypeDef, Inbound> = z
        .object({
            events: z.array(z.lazy(() => GetEmailEventReportEvents$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.events === undefined ? null : { events: v.events }),
            };
        });

    export type Outbound = {
        events?: Array<GetEmailEventReportEvents$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetEmailEventReport> = z
        .object({
            events: z.array(z.lazy(() => GetEmailEventReportEvents$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.events === undefined ? null : { events: v.events }),
            };
        });
}
