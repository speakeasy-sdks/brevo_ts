/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export enum UpdateWebhookEvents {
    Sent = "sent",
    HardBounce = "hardBounce",
    SoftBounce = "softBounce",
    Blocked = "blocked",
    Spam = "spam",
    Delivered = "delivered",
    Request = "request",
    Click = "click",
    Invalid = "invalid",
    Deferred = "deferred",
    Opened = "opened",
    UniqueOpened = "uniqueOpened",
    Unsubscribed = "unsubscribed",
    ListAddition = "listAddition",
    ContactUpdated = "contactUpdated",
    ContactDeleted = "contactDeleted",
    InboundEmailProcessed = "inboundEmailProcessed",
}

export type UpdateWebhook = {
    /**
     * Description of the webhook
     */
    description?: string | undefined;
    /**
     * Inbound domain of webhook, used in case of event type `inbound`
     */
    domain?: string | undefined;
    /**
     * - Events triggering the webhook. Possible values for **Transactional** type webhook:
     *
     * @remarks
     * #### `sent` OR `request`, `delivered`, `hardBounce`, `softBounce`, `blocked`, `spam`, `invalid`, `deferred`, `click`, `opened`, `uniqueOpened` and `unsubscribed`
     * - Possible values for **Marketing** type webhook:
     * #### `spam`, `opened`, `click`, `hardBounce`, `softBounce`, `unsubscribed`, `listAddition` & `delivered`
     * - Possible values for **Inbound** type webhook:
     * #### `inboundEmailProcessed`
     *
     */
    events?: Array<UpdateWebhookEvents> | undefined;
    /**
     * URL of the webhook
     */
    url?: string | undefined;
};

/** @internal */
export const UpdateWebhookEvents$ = z.nativeEnum(UpdateWebhookEvents);

/** @internal */
export namespace UpdateWebhook$ {
    export type Inbound = {
        description?: string | undefined;
        domain?: string | undefined;
        events?: Array<UpdateWebhookEvents> | undefined;
        url?: string | undefined;
    };

    export const inboundSchema: z.ZodType<UpdateWebhook, z.ZodTypeDef, Inbound> = z
        .object({
            description: z.string().optional(),
            domain: z.string().optional(),
            events: z.array(UpdateWebhookEvents$).optional(),
            url: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.domain === undefined ? null : { domain: v.domain }),
                ...(v.events === undefined ? null : { events: v.events }),
                ...(v.url === undefined ? null : { url: v.url }),
            };
        });

    export type Outbound = {
        description?: string | undefined;
        domain?: string | undefined;
        events?: Array<UpdateWebhookEvents> | undefined;
        url?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateWebhook> = z
        .object({
            description: z.string().optional(),
            domain: z.string().optional(),
            events: z.array(UpdateWebhookEvents$).optional(),
            url: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.domain === undefined ? null : { domain: v.domain }),
                ...(v.events === undefined ? null : { events: v.events }),
                ...(v.url === undefined ? null : { url: v.url }),
            };
        });
}
