/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

/**
 * Set of attributes of the contact
 */
export type GetExtendedContactDetailsAttributes = {};

export type GetExtendedContactDetailsLinks = {
    /**
     * Number of clicks on this link for the campaign
     */
    count: number;
    /**
     * UTC date-time of the event
     */
    eventTime: string;
    /**
     * IP from which the user has clicked on the link
     */
    ip: string;
    /**
     * URL of the clicked link
     */
    url: string;
};

export type GetExtendedContactDetailsClicked = {
    /**
     * ID of the campaign which generated the event
     */
    campaignId: number;
    /**
     * Listing of the clicked links for the campaign
     */
    links: Array<GetExtendedContactDetailsLinks>;
};

export type GetExtendedContactDetailsComplaints = {
    /**
     * ID of the campaign which generated the event
     */
    campaignId: number;
    /**
     * UTC date-time of the event
     */
    eventTime: string;
};

export type GetExtendedContactDetailsDelivered = {
    /**
     * ID of the campaign which generated the event
     */
    campaignId: number;
    /**
     * UTC date-time of the event
     */
    eventTime: string;
};

export type GetExtendedContactDetailsHardBounces = {
    /**
     * ID of the campaign which generated the event
     */
    campaignId: number;
    /**
     * UTC date-time of the event
     */
    eventTime: string;
};

export type GetExtendedContactDetailsMessagesSent = {
    /**
     * ID of the campaign which generated the event
     */
    campaignId: number;
    /**
     * UTC date-time of the event
     */
    eventTime: string;
};

export type GetExtendedContactDetailsOpened = {
    /**
     * ID of the campaign which generated the event
     */
    campaignId: number;
    /**
     * Number of openings for the campaign
     */
    count: number;
    /**
     * UTC date-time of the event
     */
    eventTime: string;
    /**
     * IP from which the user has opened the email
     */
    ip: string;
};

export type GetExtendedContactDetailsSoftBounces = {
    /**
     * ID of the campaign which generated the event
     */
    campaignId: number;
    /**
     * UTC date-time of the event
     */
    eventTime: string;
};

export type GetExtendedContactDetailsTransacAttributes = {};

export type GetExtendedContactDetailsAdminUnsubscription = {
    /**
     * UTC date-time of the event
     */
    eventTime: string;
    /**
     * IP from which the user has been unsubscribed
     */
    ip?: string | undefined;
};

export type GetExtendedContactDetailsUserUnsubscription = {
    /**
     * ID of the campaign which generated the event
     */
    campaignId: number;
    /**
     * UTC date-time of the event
     */
    eventTime: string;
    /**
     * IP from which the user has unsubscribed
     */
    ip?: string | undefined;
};

/**
 * Listing of the unsubscription for the contact
 */
export type GetExtendedContactDetailsUnsubscriptions = {
    /**
     * Contact has been unsubscribed from the administrator
     */
    adminUnsubscription: Array<GetExtendedContactDetailsAdminUnsubscription>;
    /**
     * Contact unsubscribe via unsubscription link in a campaign
     */
    userUnsubscription: Array<GetExtendedContactDetailsUserUnsubscription>;
};

/**
 * Campaign statistics of the contact
 */
export type GetExtendedContactDetailsStatistics = {
    /**
     * Listing of the clicks generated by the contact
     */
    clicked?: Array<GetExtendedContactDetailsClicked> | undefined;
    /**
     * Listing of the complaints generated by the contact
     */
    complaints?: Array<GetExtendedContactDetailsComplaints> | undefined;
    /**
     * Listing of the delivered campaign for the contact
     */
    delivered?: Array<GetExtendedContactDetailsDelivered> | undefined;
    /**
     * Listing of the hardbounes generated by the contact
     */
    hardBounces?: Array<GetExtendedContactDetailsHardBounces> | undefined;
    /**
     * Listing of the sent campaign for the contact
     */
    messagesSent?: Array<GetExtendedContactDetailsMessagesSent> | undefined;
    /**
     * Listing of the openings generated by the contact
     */
    opened?: Array<GetExtendedContactDetailsOpened> | undefined;
    /**
     * Listing of the softbounes generated by the contact
     */
    softBounces?: Array<GetExtendedContactDetailsSoftBounces> | undefined;
    /**
     * Listing of the transactional attributes for the contact
     */
    transacAttributes?: Array<GetExtendedContactDetailsTransacAttributes> | undefined;
    /**
     * Listing of the unsubscription for the contact
     */
    unsubscriptions?: GetExtendedContactDetailsUnsubscriptions | undefined;
};

export type GetExtendedContactDetails = {
    /**
     * Set of attributes of the contact
     */
    attributes: GetExtendedContactDetailsAttributes;
    /**
     * Creation UTC date-time of the contact (YYYY-MM-DDTHH:mm:ss.SSSZ)
     */
    createdAt: string;
    /**
     * Email address of the contact for which you requested the details
     */
    email: string;
    /**
     * Blacklist status for email campaigns (true=blacklisted, false=not blacklisted)
     */
    emailBlacklisted: boolean;
    /**
     * ID of the contact for which you requested the details
     */
    id: number;
    listIds: Array<number>;
    listUnsubscribed?: Array<number> | undefined;
    /**
     * Last modification UTC date-time of the contact (YYYY-MM-DDTHH:mm:ss.SSSZ)
     */
    modifiedAt: string;
    /**
     * Blacklist status for SMS campaigns (true=blacklisted, false=not blacklisted)
     */
    smsBlacklisted: boolean;
    /**
     * Campaign statistics of the contact
     */
    statistics: GetExtendedContactDetailsStatistics;
};

/** @internal */
export namespace GetExtendedContactDetailsAttributes$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<
        GetExtendedContactDetailsAttributes,
        z.ZodTypeDef,
        Inbound
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetExtendedContactDetailsAttributes
    > = z.object({});
}

/** @internal */
export namespace GetExtendedContactDetailsLinks$ {
    export type Inbound = {
        count: number;
        eventTime: string;
        ip: string;
        url: string;
    };

    export const inboundSchema: z.ZodType<GetExtendedContactDetailsLinks, z.ZodTypeDef, Inbound> = z
        .object({
            count: z.number().int(),
            eventTime: z.string(),
            ip: z.string(),
            url: z.string(),
        })
        .transform((v) => {
            return {
                count: v.count,
                eventTime: v.eventTime,
                ip: v.ip,
                url: v.url,
            };
        });

    export type Outbound = {
        count: number;
        eventTime: string;
        ip: string;
        url: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetExtendedContactDetailsLinks> =
        z
            .object({
                count: z.number().int(),
                eventTime: z.string(),
                ip: z.string(),
                url: z.string(),
            })
            .transform((v) => {
                return {
                    count: v.count,
                    eventTime: v.eventTime,
                    ip: v.ip,
                    url: v.url,
                };
            });
}

/** @internal */
export namespace GetExtendedContactDetailsClicked$ {
    export type Inbound = {
        campaignId: number;
        links: Array<GetExtendedContactDetailsLinks$.Inbound>;
    };

    export const inboundSchema: z.ZodType<GetExtendedContactDetailsClicked, z.ZodTypeDef, Inbound> =
        z
            .object({
                campaignId: z.number().int(),
                links: z.array(z.lazy(() => GetExtendedContactDetailsLinks$.inboundSchema)),
            })
            .transform((v) => {
                return {
                    campaignId: v.campaignId,
                    links: v.links,
                };
            });

    export type Outbound = {
        campaignId: number;
        links: Array<GetExtendedContactDetailsLinks$.Outbound>;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetExtendedContactDetailsClicked
    > = z
        .object({
            campaignId: z.number().int(),
            links: z.array(z.lazy(() => GetExtendedContactDetailsLinks$.outboundSchema)),
        })
        .transform((v) => {
            return {
                campaignId: v.campaignId,
                links: v.links,
            };
        });
}

/** @internal */
export namespace GetExtendedContactDetailsComplaints$ {
    export type Inbound = {
        campaignId: number;
        eventTime: string;
    };

    export const inboundSchema: z.ZodType<
        GetExtendedContactDetailsComplaints,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            campaignId: z.number().int(),
            eventTime: z.string(),
        })
        .transform((v) => {
            return {
                campaignId: v.campaignId,
                eventTime: v.eventTime,
            };
        });

    export type Outbound = {
        campaignId: number;
        eventTime: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetExtendedContactDetailsComplaints
    > = z
        .object({
            campaignId: z.number().int(),
            eventTime: z.string(),
        })
        .transform((v) => {
            return {
                campaignId: v.campaignId,
                eventTime: v.eventTime,
            };
        });
}

/** @internal */
export namespace GetExtendedContactDetailsDelivered$ {
    export type Inbound = {
        campaignId: number;
        eventTime: string;
    };

    export const inboundSchema: z.ZodType<
        GetExtendedContactDetailsDelivered,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            campaignId: z.number().int(),
            eventTime: z.string(),
        })
        .transform((v) => {
            return {
                campaignId: v.campaignId,
                eventTime: v.eventTime,
            };
        });

    export type Outbound = {
        campaignId: number;
        eventTime: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetExtendedContactDetailsDelivered
    > = z
        .object({
            campaignId: z.number().int(),
            eventTime: z.string(),
        })
        .transform((v) => {
            return {
                campaignId: v.campaignId,
                eventTime: v.eventTime,
            };
        });
}

/** @internal */
export namespace GetExtendedContactDetailsHardBounces$ {
    export type Inbound = {
        campaignId: number;
        eventTime: string;
    };

    export const inboundSchema: z.ZodType<
        GetExtendedContactDetailsHardBounces,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            campaignId: z.number().int(),
            eventTime: z.string(),
        })
        .transform((v) => {
            return {
                campaignId: v.campaignId,
                eventTime: v.eventTime,
            };
        });

    export type Outbound = {
        campaignId: number;
        eventTime: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetExtendedContactDetailsHardBounces
    > = z
        .object({
            campaignId: z.number().int(),
            eventTime: z.string(),
        })
        .transform((v) => {
            return {
                campaignId: v.campaignId,
                eventTime: v.eventTime,
            };
        });
}

/** @internal */
export namespace GetExtendedContactDetailsMessagesSent$ {
    export type Inbound = {
        campaignId: number;
        eventTime: string;
    };

    export const inboundSchema: z.ZodType<
        GetExtendedContactDetailsMessagesSent,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            campaignId: z.number().int(),
            eventTime: z.string(),
        })
        .transform((v) => {
            return {
                campaignId: v.campaignId,
                eventTime: v.eventTime,
            };
        });

    export type Outbound = {
        campaignId: number;
        eventTime: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetExtendedContactDetailsMessagesSent
    > = z
        .object({
            campaignId: z.number().int(),
            eventTime: z.string(),
        })
        .transform((v) => {
            return {
                campaignId: v.campaignId,
                eventTime: v.eventTime,
            };
        });
}

/** @internal */
export namespace GetExtendedContactDetailsOpened$ {
    export type Inbound = {
        campaignId: number;
        count: number;
        eventTime: string;
        ip: string;
    };

    export const inboundSchema: z.ZodType<GetExtendedContactDetailsOpened, z.ZodTypeDef, Inbound> =
        z
            .object({
                campaignId: z.number().int(),
                count: z.number().int(),
                eventTime: z.string(),
                ip: z.string(),
            })
            .transform((v) => {
                return {
                    campaignId: v.campaignId,
                    count: v.count,
                    eventTime: v.eventTime,
                    ip: v.ip,
                };
            });

    export type Outbound = {
        campaignId: number;
        count: number;
        eventTime: string;
        ip: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetExtendedContactDetailsOpened
    > = z
        .object({
            campaignId: z.number().int(),
            count: z.number().int(),
            eventTime: z.string(),
            ip: z.string(),
        })
        .transform((v) => {
            return {
                campaignId: v.campaignId,
                count: v.count,
                eventTime: v.eventTime,
                ip: v.ip,
            };
        });
}

/** @internal */
export namespace GetExtendedContactDetailsSoftBounces$ {
    export type Inbound = {
        campaignId: number;
        eventTime: string;
    };

    export const inboundSchema: z.ZodType<
        GetExtendedContactDetailsSoftBounces,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            campaignId: z.number().int(),
            eventTime: z.string(),
        })
        .transform((v) => {
            return {
                campaignId: v.campaignId,
                eventTime: v.eventTime,
            };
        });

    export type Outbound = {
        campaignId: number;
        eventTime: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetExtendedContactDetailsSoftBounces
    > = z
        .object({
            campaignId: z.number().int(),
            eventTime: z.string(),
        })
        .transform((v) => {
            return {
                campaignId: v.campaignId,
                eventTime: v.eventTime,
            };
        });
}

/** @internal */
export namespace GetExtendedContactDetailsTransacAttributes$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<
        GetExtendedContactDetailsTransacAttributes,
        z.ZodTypeDef,
        Inbound
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetExtendedContactDetailsTransacAttributes
    > = z.object({});
}

/** @internal */
export namespace GetExtendedContactDetailsAdminUnsubscription$ {
    export type Inbound = {
        eventTime: string;
        ip?: string | undefined;
    };

    export const inboundSchema: z.ZodType<
        GetExtendedContactDetailsAdminUnsubscription,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            eventTime: z.string(),
            ip: z.string().optional(),
        })
        .transform((v) => {
            return {
                eventTime: v.eventTime,
                ...(v.ip === undefined ? null : { ip: v.ip }),
            };
        });

    export type Outbound = {
        eventTime: string;
        ip?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetExtendedContactDetailsAdminUnsubscription
    > = z
        .object({
            eventTime: z.string(),
            ip: z.string().optional(),
        })
        .transform((v) => {
            return {
                eventTime: v.eventTime,
                ...(v.ip === undefined ? null : { ip: v.ip }),
            };
        });
}

/** @internal */
export namespace GetExtendedContactDetailsUserUnsubscription$ {
    export type Inbound = {
        campaignId: number;
        eventTime: string;
        ip?: string | undefined;
    };

    export const inboundSchema: z.ZodType<
        GetExtendedContactDetailsUserUnsubscription,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            campaignId: z.number().int(),
            eventTime: z.string(),
            ip: z.string().optional(),
        })
        .transform((v) => {
            return {
                campaignId: v.campaignId,
                eventTime: v.eventTime,
                ...(v.ip === undefined ? null : { ip: v.ip }),
            };
        });

    export type Outbound = {
        campaignId: number;
        eventTime: string;
        ip?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetExtendedContactDetailsUserUnsubscription
    > = z
        .object({
            campaignId: z.number().int(),
            eventTime: z.string(),
            ip: z.string().optional(),
        })
        .transform((v) => {
            return {
                campaignId: v.campaignId,
                eventTime: v.eventTime,
                ...(v.ip === undefined ? null : { ip: v.ip }),
            };
        });
}

/** @internal */
export namespace GetExtendedContactDetailsUnsubscriptions$ {
    export type Inbound = {
        adminUnsubscription: Array<GetExtendedContactDetailsAdminUnsubscription$.Inbound>;
        userUnsubscription: Array<GetExtendedContactDetailsUserUnsubscription$.Inbound>;
    };

    export const inboundSchema: z.ZodType<
        GetExtendedContactDetailsUnsubscriptions,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            adminUnsubscription: z.array(
                z.lazy(() => GetExtendedContactDetailsAdminUnsubscription$.inboundSchema)
            ),
            userUnsubscription: z.array(
                z.lazy(() => GetExtendedContactDetailsUserUnsubscription$.inboundSchema)
            ),
        })
        .transform((v) => {
            return {
                adminUnsubscription: v.adminUnsubscription,
                userUnsubscription: v.userUnsubscription,
            };
        });

    export type Outbound = {
        adminUnsubscription: Array<GetExtendedContactDetailsAdminUnsubscription$.Outbound>;
        userUnsubscription: Array<GetExtendedContactDetailsUserUnsubscription$.Outbound>;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetExtendedContactDetailsUnsubscriptions
    > = z
        .object({
            adminUnsubscription: z.array(
                z.lazy(() => GetExtendedContactDetailsAdminUnsubscription$.outboundSchema)
            ),
            userUnsubscription: z.array(
                z.lazy(() => GetExtendedContactDetailsUserUnsubscription$.outboundSchema)
            ),
        })
        .transform((v) => {
            return {
                adminUnsubscription: v.adminUnsubscription,
                userUnsubscription: v.userUnsubscription,
            };
        });
}

/** @internal */
export namespace GetExtendedContactDetailsStatistics$ {
    export type Inbound = {
        clicked?: Array<GetExtendedContactDetailsClicked$.Inbound> | undefined;
        complaints?: Array<GetExtendedContactDetailsComplaints$.Inbound> | undefined;
        delivered?: Array<GetExtendedContactDetailsDelivered$.Inbound> | undefined;
        hardBounces?: Array<GetExtendedContactDetailsHardBounces$.Inbound> | undefined;
        messagesSent?: Array<GetExtendedContactDetailsMessagesSent$.Inbound> | undefined;
        opened?: Array<GetExtendedContactDetailsOpened$.Inbound> | undefined;
        softBounces?: Array<GetExtendedContactDetailsSoftBounces$.Inbound> | undefined;
        transacAttributes?: Array<GetExtendedContactDetailsTransacAttributes$.Inbound> | undefined;
        unsubscriptions?: GetExtendedContactDetailsUnsubscriptions$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<
        GetExtendedContactDetailsStatistics,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            clicked: z
                .array(z.lazy(() => GetExtendedContactDetailsClicked$.inboundSchema))
                .optional(),
            complaints: z
                .array(z.lazy(() => GetExtendedContactDetailsComplaints$.inboundSchema))
                .optional(),
            delivered: z
                .array(z.lazy(() => GetExtendedContactDetailsDelivered$.inboundSchema))
                .optional(),
            hardBounces: z
                .array(z.lazy(() => GetExtendedContactDetailsHardBounces$.inboundSchema))
                .optional(),
            messagesSent: z
                .array(z.lazy(() => GetExtendedContactDetailsMessagesSent$.inboundSchema))
                .optional(),
            opened: z
                .array(z.lazy(() => GetExtendedContactDetailsOpened$.inboundSchema))
                .optional(),
            softBounces: z
                .array(z.lazy(() => GetExtendedContactDetailsSoftBounces$.inboundSchema))
                .optional(),
            transacAttributes: z
                .array(z.lazy(() => GetExtendedContactDetailsTransacAttributes$.inboundSchema))
                .optional(),
            unsubscriptions: z
                .lazy(() => GetExtendedContactDetailsUnsubscriptions$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.clicked === undefined ? null : { clicked: v.clicked }),
                ...(v.complaints === undefined ? null : { complaints: v.complaints }),
                ...(v.delivered === undefined ? null : { delivered: v.delivered }),
                ...(v.hardBounces === undefined ? null : { hardBounces: v.hardBounces }),
                ...(v.messagesSent === undefined ? null : { messagesSent: v.messagesSent }),
                ...(v.opened === undefined ? null : { opened: v.opened }),
                ...(v.softBounces === undefined ? null : { softBounces: v.softBounces }),
                ...(v.transacAttributes === undefined
                    ? null
                    : { transacAttributes: v.transacAttributes }),
                ...(v.unsubscriptions === undefined
                    ? null
                    : { unsubscriptions: v.unsubscriptions }),
            };
        });

    export type Outbound = {
        clicked?: Array<GetExtendedContactDetailsClicked$.Outbound> | undefined;
        complaints?: Array<GetExtendedContactDetailsComplaints$.Outbound> | undefined;
        delivered?: Array<GetExtendedContactDetailsDelivered$.Outbound> | undefined;
        hardBounces?: Array<GetExtendedContactDetailsHardBounces$.Outbound> | undefined;
        messagesSent?: Array<GetExtendedContactDetailsMessagesSent$.Outbound> | undefined;
        opened?: Array<GetExtendedContactDetailsOpened$.Outbound> | undefined;
        softBounces?: Array<GetExtendedContactDetailsSoftBounces$.Outbound> | undefined;
        transacAttributes?: Array<GetExtendedContactDetailsTransacAttributes$.Outbound> | undefined;
        unsubscriptions?: GetExtendedContactDetailsUnsubscriptions$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetExtendedContactDetailsStatistics
    > = z
        .object({
            clicked: z
                .array(z.lazy(() => GetExtendedContactDetailsClicked$.outboundSchema))
                .optional(),
            complaints: z
                .array(z.lazy(() => GetExtendedContactDetailsComplaints$.outboundSchema))
                .optional(),
            delivered: z
                .array(z.lazy(() => GetExtendedContactDetailsDelivered$.outboundSchema))
                .optional(),
            hardBounces: z
                .array(z.lazy(() => GetExtendedContactDetailsHardBounces$.outboundSchema))
                .optional(),
            messagesSent: z
                .array(z.lazy(() => GetExtendedContactDetailsMessagesSent$.outboundSchema))
                .optional(),
            opened: z
                .array(z.lazy(() => GetExtendedContactDetailsOpened$.outboundSchema))
                .optional(),
            softBounces: z
                .array(z.lazy(() => GetExtendedContactDetailsSoftBounces$.outboundSchema))
                .optional(),
            transacAttributes: z
                .array(z.lazy(() => GetExtendedContactDetailsTransacAttributes$.outboundSchema))
                .optional(),
            unsubscriptions: z
                .lazy(() => GetExtendedContactDetailsUnsubscriptions$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.clicked === undefined ? null : { clicked: v.clicked }),
                ...(v.complaints === undefined ? null : { complaints: v.complaints }),
                ...(v.delivered === undefined ? null : { delivered: v.delivered }),
                ...(v.hardBounces === undefined ? null : { hardBounces: v.hardBounces }),
                ...(v.messagesSent === undefined ? null : { messagesSent: v.messagesSent }),
                ...(v.opened === undefined ? null : { opened: v.opened }),
                ...(v.softBounces === undefined ? null : { softBounces: v.softBounces }),
                ...(v.transacAttributes === undefined
                    ? null
                    : { transacAttributes: v.transacAttributes }),
                ...(v.unsubscriptions === undefined
                    ? null
                    : { unsubscriptions: v.unsubscriptions }),
            };
        });
}

/** @internal */
export namespace GetExtendedContactDetails$ {
    export type Inbound = {
        attributes: GetExtendedContactDetailsAttributes$.Inbound;
        createdAt: string;
        email: string;
        emailBlacklisted: boolean;
        id: number;
        listIds: Array<number>;
        listUnsubscribed?: Array<number> | undefined;
        modifiedAt: string;
        smsBlacklisted: boolean;
        statistics: GetExtendedContactDetailsStatistics$.Inbound;
    };

    export const inboundSchema: z.ZodType<GetExtendedContactDetails, z.ZodTypeDef, Inbound> = z
        .object({
            attributes: z.lazy(() => GetExtendedContactDetailsAttributes$.inboundSchema),
            createdAt: z.string(),
            email: z.string(),
            emailBlacklisted: z.boolean(),
            id: z.number().int(),
            listIds: z.array(z.number().int()),
            listUnsubscribed: z.array(z.number().int()).optional(),
            modifiedAt: z.string(),
            smsBlacklisted: z.boolean(),
            statistics: z.lazy(() => GetExtendedContactDetailsStatistics$.inboundSchema),
        })
        .transform((v) => {
            return {
                attributes: v.attributes,
                createdAt: v.createdAt,
                email: v.email,
                emailBlacklisted: v.emailBlacklisted,
                id: v.id,
                listIds: v.listIds,
                ...(v.listUnsubscribed === undefined
                    ? null
                    : { listUnsubscribed: v.listUnsubscribed }),
                modifiedAt: v.modifiedAt,
                smsBlacklisted: v.smsBlacklisted,
                statistics: v.statistics,
            };
        });

    export type Outbound = {
        attributes: GetExtendedContactDetailsAttributes$.Outbound;
        createdAt: string;
        email: string;
        emailBlacklisted: boolean;
        id: number;
        listIds: Array<number>;
        listUnsubscribed?: Array<number> | undefined;
        modifiedAt: string;
        smsBlacklisted: boolean;
        statistics: GetExtendedContactDetailsStatistics$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetExtendedContactDetails> = z
        .object({
            attributes: z.lazy(() => GetExtendedContactDetailsAttributes$.outboundSchema),
            createdAt: z.string(),
            email: z.string(),
            emailBlacklisted: z.boolean(),
            id: z.number().int(),
            listIds: z.array(z.number().int()),
            listUnsubscribed: z.array(z.number().int()).optional(),
            modifiedAt: z.string(),
            smsBlacklisted: z.boolean(),
            statistics: z.lazy(() => GetExtendedContactDetailsStatistics$.outboundSchema),
        })
        .transform((v) => {
            return {
                attributes: v.attributes,
                createdAt: v.createdAt,
                email: v.email,
                emailBlacklisted: v.emailBlacklisted,
                id: v.id,
                listIds: v.listIds,
                ...(v.listUnsubscribed === undefined
                    ? null
                    : { listUnsubscribed: v.listUnsubscribed }),
                modifiedAt: v.modifiedAt,
                smsBlacklisted: v.smsBlacklisted,
                statistics: v.statistics,
            };
        });
}
