/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type GetListsLists = {
    /**
     * ID of the folder
     */
    folderId: number;
    /**
     * ID of the list
     */
    id: number;
    /**
     * Name of the list
     */
    name: string;
    /**
     * Number of blacklisted contacts in the list
     */
    totalBlacklisted: number;
    /**
     * Number of contacts in the list
     */
    totalSubscribers: number;
    /**
     * Number of unique contacts in the list
     */
    uniqueSubscribers: number;
};

export type GetLists = {
    /**
     * Number of lists in your account
     */
    count?: number | undefined;
    /**
     * Listing of all the lists available in your account
     */
    lists?: Array<GetListsLists> | undefined;
};

/** @internal */
export namespace GetListsLists$ {
    export type Inbound = {
        folderId: number;
        id: number;
        name: string;
        totalBlacklisted: number;
        totalSubscribers: number;
        uniqueSubscribers: number;
    };

    export const inboundSchema: z.ZodType<GetListsLists, z.ZodTypeDef, Inbound> = z
        .object({
            folderId: z.number().int(),
            id: z.number().int(),
            name: z.string(),
            totalBlacklisted: z.number().int(),
            totalSubscribers: z.number().int(),
            uniqueSubscribers: z.number().int(),
        })
        .transform((v) => {
            return {
                folderId: v.folderId,
                id: v.id,
                name: v.name,
                totalBlacklisted: v.totalBlacklisted,
                totalSubscribers: v.totalSubscribers,
                uniqueSubscribers: v.uniqueSubscribers,
            };
        });

    export type Outbound = {
        folderId: number;
        id: number;
        name: string;
        totalBlacklisted: number;
        totalSubscribers: number;
        uniqueSubscribers: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetListsLists> = z
        .object({
            folderId: z.number().int(),
            id: z.number().int(),
            name: z.string(),
            totalBlacklisted: z.number().int(),
            totalSubscribers: z.number().int(),
            uniqueSubscribers: z.number().int(),
        })
        .transform((v) => {
            return {
                folderId: v.folderId,
                id: v.id,
                name: v.name,
                totalBlacklisted: v.totalBlacklisted,
                totalSubscribers: v.totalSubscribers,
                uniqueSubscribers: v.uniqueSubscribers,
            };
        });
}

/** @internal */
export namespace GetLists$ {
    export type Inbound = {
        count?: number | undefined;
        lists?: Array<GetListsLists$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<GetLists, z.ZodTypeDef, Inbound> = z
        .object({
            count: z.number().int().optional(),
            lists: z.array(z.lazy(() => GetListsLists$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.count === undefined ? null : { count: v.count }),
                ...(v.lists === undefined ? null : { lists: v.lists }),
            };
        });

    export type Outbound = {
        count?: number | undefined;
        lists?: Array<GetListsLists$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetLists> = z
        .object({
            count: z.number().int().optional(),
            lists: z.array(z.lazy(() => GetListsLists$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.count === undefined ? null : { count: v.count }),
                ...(v.lists === undefined ? null : { lists: v.lists }),
            };
        });
}
