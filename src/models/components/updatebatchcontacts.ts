/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type UpdateBatchContactsContacts = {
    /**
     * Pass the set of attributes to be updated. **These attributes must be present in your account**. To update existing email address of a contact with the new one please pass EMAIL in attribtes. For example, **{ "EMAIL":"newemail@domain.com", "FNAME":"Ellie", "LNAME":"Roger"}**.
     *
     * @remarks
     * Keep in mind transactional attributes can be updated the same way as normal attributes. Mobile Number in **SMS** field should be passed with proper country code. For example: **{"SMS":"+91xxxxxxxxxx"} or {"SMS":"0091xxxxxxxxxx"}**
     *
     */
    attributes?: Record<string, any> | undefined;
    /**
     * Email address of the user to be updated (For each operation only pass one of the supported contact identifiers. Email, id or sms)
     */
    email?: string | undefined;
    /**
     * Set/unset this field to blacklist/allow the contact for emails (emailBlacklisted = true)
     */
    emailBlacklisted?: boolean | undefined;
    /**
     * Pass your own Id to update ext_id of a contact.
     */
    extId?: string | undefined;
    /**
     * id of the user to be updated (For each operation only pass one of the supported contact identifiers. Email, id or sms)
     */
    id?: number | undefined;
    /**
     * Ids of the lists to add the contact to
     */
    listIds?: Array<number> | undefined;
    /**
     * SMS of the user to be updated (For each operation only pass one of the supported contact identifiers. Email, id or sms)
     */
    sms?: string | undefined;
    /**
     * Set/unset this field to blacklist/allow the contact for SMS (smsBlacklisted = true)
     */
    smsBlacklisted?: boolean | undefined;
    /**
     * transactional email forbidden sender for contact. Use only for email Contact
     */
    smtpBlacklistSender?: Array<string> | undefined;
    /**
     * Ids of the lists to remove the contact from
     */
    unlinkListIds?: Array<number> | undefined;
};

export type UpdateBatchContacts = {
    /**
     * List of contacts to be updated
     */
    contacts?: Array<UpdateBatchContactsContacts> | undefined;
};

/** @internal */
export namespace UpdateBatchContactsContacts$ {
    export type Inbound = {
        attributes?: Record<string, any> | undefined;
        email?: string | undefined;
        emailBlacklisted?: boolean | undefined;
        ext_id?: string | undefined;
        id?: number | undefined;
        listIds?: Array<number> | undefined;
        sms?: string | undefined;
        smsBlacklisted?: boolean | undefined;
        smtpBlacklistSender?: Array<string> | undefined;
        unlinkListIds?: Array<number> | undefined;
    };

    export const inboundSchema: z.ZodType<UpdateBatchContactsContacts, z.ZodTypeDef, Inbound> = z
        .object({
            attributes: z.record(z.any()).optional(),
            email: z.string().optional(),
            emailBlacklisted: z.boolean().optional(),
            ext_id: z.string().optional(),
            id: z.number().int().optional(),
            listIds: z.array(z.number().int()).optional(),
            sms: z.string().optional(),
            smsBlacklisted: z.boolean().optional(),
            smtpBlacklistSender: z.array(z.string()).optional(),
            unlinkListIds: z.array(z.number().int()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.attributes === undefined ? null : { attributes: v.attributes }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.emailBlacklisted === undefined
                    ? null
                    : { emailBlacklisted: v.emailBlacklisted }),
                ...(v.ext_id === undefined ? null : { extId: v.ext_id }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.listIds === undefined ? null : { listIds: v.listIds }),
                ...(v.sms === undefined ? null : { sms: v.sms }),
                ...(v.smsBlacklisted === undefined ? null : { smsBlacklisted: v.smsBlacklisted }),
                ...(v.smtpBlacklistSender === undefined
                    ? null
                    : { smtpBlacklistSender: v.smtpBlacklistSender }),
                ...(v.unlinkListIds === undefined ? null : { unlinkListIds: v.unlinkListIds }),
            };
        });

    export type Outbound = {
        attributes?: Record<string, any> | undefined;
        email?: string | undefined;
        emailBlacklisted?: boolean | undefined;
        ext_id?: string | undefined;
        id?: number | undefined;
        listIds?: Array<number> | undefined;
        sms?: string | undefined;
        smsBlacklisted?: boolean | undefined;
        smtpBlacklistSender?: Array<string> | undefined;
        unlinkListIds?: Array<number> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateBatchContactsContacts> = z
        .object({
            attributes: z.record(z.any()).optional(),
            email: z.string().optional(),
            emailBlacklisted: z.boolean().optional(),
            extId: z.string().optional(),
            id: z.number().int().optional(),
            listIds: z.array(z.number().int()).optional(),
            sms: z.string().optional(),
            smsBlacklisted: z.boolean().optional(),
            smtpBlacklistSender: z.array(z.string()).optional(),
            unlinkListIds: z.array(z.number().int()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.attributes === undefined ? null : { attributes: v.attributes }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.emailBlacklisted === undefined
                    ? null
                    : { emailBlacklisted: v.emailBlacklisted }),
                ...(v.extId === undefined ? null : { ext_id: v.extId }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.listIds === undefined ? null : { listIds: v.listIds }),
                ...(v.sms === undefined ? null : { sms: v.sms }),
                ...(v.smsBlacklisted === undefined ? null : { smsBlacklisted: v.smsBlacklisted }),
                ...(v.smtpBlacklistSender === undefined
                    ? null
                    : { smtpBlacklistSender: v.smtpBlacklistSender }),
                ...(v.unlinkListIds === undefined ? null : { unlinkListIds: v.unlinkListIds }),
            };
        });
}

/** @internal */
export namespace UpdateBatchContacts$ {
    export type Inbound = {
        contacts?: Array<UpdateBatchContactsContacts$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<UpdateBatchContacts, z.ZodTypeDef, Inbound> = z
        .object({
            contacts: z.array(z.lazy(() => UpdateBatchContactsContacts$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.contacts === undefined ? null : { contacts: v.contacts }),
            };
        });

    export type Outbound = {
        contacts?: Array<UpdateBatchContactsContacts$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateBatchContacts> = z
        .object({
            contacts: z.array(z.lazy(() => UpdateBatchContactsContacts$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.contacts === undefined ? null : { contacts: v.contacts }),
            };
        });
}
