/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

/**
 * Type of recipients to export for a campaign
 */
export enum RecipientsType {
    All = "all",
    NonClickers = "nonClickers",
    NonOpeners = "nonOpeners",
    Clickers = "clickers",
    Openers = "openers",
    SoftBounces = "softBounces",
    HardBounces = "hardBounces",
    Unsubscribed = "unsubscribed",
}

export type EmailExportRecipients = {
    /**
     * Webhook called once the export process is finished. For reference, https://help.brevo.com/hc/en-us/articles/360007666479
     */
    notifyURL?: string | undefined;
    /**
     * Type of recipients to export for a campaign
     */
    recipientsType: RecipientsType;
};

/** @internal */
export const RecipientsType$ = z.nativeEnum(RecipientsType);

/** @internal */
export namespace EmailExportRecipients$ {
    export type Inbound = {
        notifyURL?: string | undefined;
        recipientsType: RecipientsType;
    };

    export const inboundSchema: z.ZodType<EmailExportRecipients, z.ZodTypeDef, Inbound> = z
        .object({
            notifyURL: z.string().optional(),
            recipientsType: RecipientsType$,
        })
        .transform((v) => {
            return {
                ...(v.notifyURL === undefined ? null : { notifyURL: v.notifyURL }),
                recipientsType: v.recipientsType,
            };
        });

    export type Outbound = {
        notifyURL?: string | undefined;
        recipientsType: RecipientsType;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EmailExportRecipients> = z
        .object({
            notifyURL: z.string().optional(),
            recipientsType: RecipientsType$,
        })
        .transform((v) => {
            return {
                ...(v.notifyURL === undefined ? null : { notifyURL: v.notifyURL }),
                recipientsType: v.recipientsType,
            };
        });
}
