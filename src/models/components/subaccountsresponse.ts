/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type SubAccounts = {
    /**
     * Whether the sub-account is active or not
     */
    active: boolean;
    /**
     * Name of the sub-account company
     */
    companyName: string;
    /**
     * Timestamp when the sub-account was created
     */
    createdAt: number;
    /**
     * id of the sub-account
     */
    id: number;
};

export type SubAccountsResponse = {
    /**
     * Total number of subaccounts
     */
    count?: number | undefined;
    subAccounts?: Array<SubAccounts> | undefined;
};

/** @internal */
export namespace SubAccounts$ {
    export type Inbound = {
        active: boolean;
        companyName: string;
        createdAt: number;
        id: number;
    };

    export const inboundSchema: z.ZodType<SubAccounts, z.ZodTypeDef, Inbound> = z
        .object({
            active: z.boolean(),
            companyName: z.string(),
            createdAt: z.number().int(),
            id: z.number().int(),
        })
        .transform((v) => {
            return {
                active: v.active,
                companyName: v.companyName,
                createdAt: v.createdAt,
                id: v.id,
            };
        });

    export type Outbound = {
        active: boolean;
        companyName: string;
        createdAt: number;
        id: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SubAccounts> = z
        .object({
            active: z.boolean(),
            companyName: z.string(),
            createdAt: z.number().int(),
            id: z.number().int(),
        })
        .transform((v) => {
            return {
                active: v.active,
                companyName: v.companyName,
                createdAt: v.createdAt,
                id: v.id,
            };
        });
}

/** @internal */
export namespace SubAccountsResponse$ {
    export type Inbound = {
        count?: number | undefined;
        subAccounts?: Array<SubAccounts$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<SubAccountsResponse, z.ZodTypeDef, Inbound> = z
        .object({
            count: z.number().int().optional(),
            subAccounts: z.array(z.lazy(() => SubAccounts$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.count === undefined ? null : { count: v.count }),
                ...(v.subAccounts === undefined ? null : { subAccounts: v.subAccounts }),
            };
        });

    export type Outbound = {
        count?: number | undefined;
        subAccounts?: Array<SubAccounts$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SubAccountsResponse> = z
        .object({
            count: z.number().int().optional(),
            subAccounts: z.array(z.lazy(() => SubAccounts$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.count === undefined ? null : { count: v.count }),
                ...(v.subAccounts === undefined ? null : { subAccounts: v.subAccounts }),
            };
        });
}
