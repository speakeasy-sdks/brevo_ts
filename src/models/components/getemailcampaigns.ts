/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { GetCampaignStats, GetCampaignStats$ } from "./getcampaignstats";
import { GetDeviceBrowserStats, GetDeviceBrowserStats$ } from "./getdevicebrowserstats";
import { GetStatsByDevice, GetStatsByDevice$ } from "./getstatsbydevice";
import * as z from "zod";

export type GetEmailCampaignsRecipients = {
    exclusionLists: Array<number>;
    lists: Array<number>;
};

export type GetEmailCampaignsSender = {
    /**
     * Sender email of the campaign
     */
    email?: string | undefined;
    /**
     * Sender id of the campaign
     */
    id?: number | undefined;
    /**
     * Sender name of the campaign
     */
    name?: string | undefined;
};

export type GetEmailCampaignsCampaignStats = {
    /**
     * Number of total clicks for the campaign
     */
    clickers: number;
    /**
     * Number of complaints (Spam reports) for the campaign
     */
    complaints: number;
    /**
     * Number of deferred emails for the campaign
     */
    deferred?: number | undefined;
    /**
     * Number of delivered emails for the campaign
     */
    delivered: number;
    /**
     * Rate of recipients without any privacy protection option enabled in their email client, applied to all delivered emails
     */
    estimatedViews?: number | undefined;
    /**
     * Number of harbounce for the campaign
     */
    hardBounces: number;
    /**
     * List Id of email campaign (only in case of get email campaign(s)(not for global stats))
     */
    listId?: number | undefined;
    /**
     * Total number of non-delivered campaigns for a particular campaign id.
     */
    returnBounce?: number | undefined;
    /**
     * Number of sent emails for the campaign
     */
    sent: number;
    /**
     * Number of softbounce for the campaign
     */
    softBounces: number;
    /**
     * Recipients without any privacy protection option enabled in their email client
     */
    trackableViews: number;
    /**
     * Rate of recipients without any privacy protection option enabled in their email client
     */
    trackableViewsRate?: number | undefined;
    /**
     * Number of unique clicks for the campaign
     */
    uniqueClicks: number;
    /**
     * Number of unique openings for the campaign
     */
    uniqueViews: number;
    /**
     * Number of unsubscription for the campaign
     */
    unsubscriptions: number;
    /**
     * Number of openings for the campaign
     */
    viewed: number;
};

/**
 * Overall statistics of the campaign
 */
export type GetEmailCampaignsGlobalStats = {
    /**
     * Number of total clicks for the campaign
     */
    clickers: number;
    /**
     * Number of complaints (Spam reports) for the campaign
     */
    complaints: number;
    /**
     * Number of deferred emails for the campaign
     */
    deferred?: number | undefined;
    /**
     * Number of delivered emails for the campaign
     */
    delivered: number;
    /**
     * Rate of recipients without any privacy protection option enabled in their email client, applied to all delivered emails
     */
    estimatedViews?: number | undefined;
    /**
     * Number of harbounce for the campaign
     */
    hardBounces: number;
    /**
     * List Id of email campaign (only in case of get email campaign(s)(not for global stats))
     */
    listId?: number | undefined;
    /**
     * Total number of non-delivered campaigns for a particular campaign id.
     */
    returnBounce?: number | undefined;
    /**
     * Number of sent emails for the campaign
     */
    sent: number;
    /**
     * Number of softbounce for the campaign
     */
    softBounces: number;
    /**
     * Recipients without any privacy protection option enabled in their email client
     */
    trackableViews: number;
    /**
     * Rate of recipients without any privacy protection option enabled in their email client
     */
    trackableViewsRate?: number | undefined;
    /**
     * Number of unique clicks for the campaign
     */
    uniqueClicks: number;
    /**
     * Number of unique openings for the campaign
     */
    uniqueViews: number;
    /**
     * Number of unsubscription for the campaign
     */
    unsubscriptions: number;
    /**
     * Number of openings for the campaign
     */
    viewed: number;
};

/**
 * Statistics about the number of clicks for the links
 */
export type GetEmailCampaignsLinksStats = {};

export type GetEmailCampaignsStatistics = {
    /**
     * List-wise statistics of the campaign.
     */
    campaignStats: Array<GetEmailCampaignsCampaignStats>;
    /**
     * Overall statistics of the campaign
     */
    globalStats: GetEmailCampaignsGlobalStats;
    /**
     * Statistics about the number of clicks for the links
     */
    linksStats: GetEmailCampaignsLinksStats;
    /**
     * Number of clicks on mirror link
     */
    mirrorClick: number;
    /**
     * Number of remaning emails to send
     */
    remaining: number;
    statsByBrowser: Record<string, GetDeviceBrowserStats>;
    statsByDevice: GetStatsByDevice;
    statsByDomain: Record<string, GetCampaignStats>;
};

/**
 * Status of the campaign
 */
export enum GetEmailCampaignsStatus {
    Draft = "draft",
    Sent = "sent",
    Archive = "archive",
    Queued = "queued",
    Suspended = "suspended",
    InProcess = "in_process",
}

/**
 * Type of campaign
 */
export enum GetEmailCampaignsType {
    Classic = "classic",
    Trigger = "trigger",
}

export type Campaigns = {
    /**
     * Status of A/B Test for the campaign. abTesting = false means it is disabled, & abTesting = true means it is enabled.
     */
    abTesting?: boolean | undefined;
    /**
     * Creation UTC date-time of the campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)
     */
    createdAt: string;
    /**
     * Footer of the campaign
     */
    footer: string;
    /**
     * Header of the campaign
     */
    header: string;
    /**
     * HTML content of the campaign
     */
    htmlContent: string;
    /**
     * ID of the campaign
     */
    id: number;
    /**
     * Status of inline image. inlineImageActivation = false means image canâ€™t be embedded, & inlineImageActivation = true means image can be embedded, in the email.
     */
    inlineImageActivation?: boolean | undefined;
    /**
     * Status of mirror links in campaign. mirrorActive = false means mirror links are deactivated, & mirrorActive = true means mirror links are activated, in the campaign
     */
    mirrorActive?: boolean | undefined;
    /**
     * UTC date-time of last modification of the campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)
     */
    modifiedAt: string;
    /**
     * Name of the campaign
     */
    name: string;
    /**
     * Preview text or preheader of the email campaign
     */
    previewText?: string | undefined;
    recipients: GetEmailCampaignsRecipients;
    /**
     * FOR TRIGGER ONLY ! Type of trigger campaign.recurring = false means contact can receive the same Trigger campaign only once, & recurring = true means contact can receive the same Trigger campaign several times
     */
    recurring?: boolean | undefined;
    /**
     * Email defined as the "Reply to" of the campaign
     */
    replyTo: string;
    /**
     * Total number of non-delivered campaigns for a particular campaign id.
     */
    returnBounce?: number | undefined;
    /**
     * UTC date-time on which campaign is scheduled (YYYY-MM-DDTHH:mm:ss.SSSZ)
     */
    scheduledAt?: string | undefined;
    /**
     * It is true if you have chosen to send your campaign at best time, otherwise it is false
     */
    sendAtBestTime?: boolean | undefined;
    sender: GetEmailCampaignsSender;
    /**
     * Sent UTC date-time of the campaign (YYYY-MM-DDTHH:mm:ss.SSSZ). Only available if 'status' of the campaign is 'sent'
     */
    sentDate?: string | undefined;
    /**
     * Link to share the campaign on social medias
     */
    shareLink?: string | undefined;
    /**
     * The size of your ab-test groups. Only available if `abTesting` flag of the campaign is `true`
     */
    splitRule?: number | undefined;
    statistics: GetEmailCampaignsStatistics;
    /**
     * Status of the campaign
     */
    status: GetEmailCampaignsStatus;
    /**
     * Subject of the campaign. Only available if `abTesting` flag of the campaign is `false`
     */
    subject?: string | undefined;
    /**
     * Subject A of the ab-test campaign. Only available if `abTesting` flag of the campaign is `true`
     */
    subjectA?: string | undefined;
    /**
     * Subject B of the ab-test campaign. Only available if `abTesting` flag of the campaign is `true`
     */
    subjectB?: string | undefined;
    /**
     * Tag of the campaign
     */
    tag?: string | undefined;
    /**
     * Retrieved the status of test email sending. (true=Test email has been sent  false=Test email has not been sent)
     */
    testSent: boolean;
    /**
     * Customisation of the "to" field of the campaign
     */
    toField?: string | undefined;
    /**
     * Type of campaign
     */
    type: GetEmailCampaignsType;
    /**
     * Criteria for the winning version. Only available if `abTesting` flag of the campaign is `true`
     */
    winnerCriteria?: string | undefined;
    /**
     * The duration of the test in hours at the end of which the winning version will be sent. Only available if `abTesting` flag of the campaign is `true`
     */
    winnerDelay?: number | undefined;
};

export type GetEmailCampaigns = {
    campaigns?: Array<Campaigns> | undefined;
    /**
     * Number of Email campaigns retrieved
     */
    count?: number | undefined;
};

/** @internal */
export namespace GetEmailCampaignsRecipients$ {
    export type Inbound = {
        exclusionLists: Array<number>;
        lists: Array<number>;
    };

    export const inboundSchema: z.ZodType<GetEmailCampaignsRecipients, z.ZodTypeDef, Inbound> = z
        .object({
            exclusionLists: z.array(z.number().int()),
            lists: z.array(z.number().int()),
        })
        .transform((v) => {
            return {
                exclusionLists: v.exclusionLists,
                lists: v.lists,
            };
        });

    export type Outbound = {
        exclusionLists: Array<number>;
        lists: Array<number>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetEmailCampaignsRecipients> = z
        .object({
            exclusionLists: z.array(z.number().int()),
            lists: z.array(z.number().int()),
        })
        .transform((v) => {
            return {
                exclusionLists: v.exclusionLists,
                lists: v.lists,
            };
        });
}

/** @internal */
export namespace GetEmailCampaignsSender$ {
    export type Inbound = {
        email?: string | undefined;
        id?: number | undefined;
        name?: string | undefined;
    };

    export const inboundSchema: z.ZodType<GetEmailCampaignsSender, z.ZodTypeDef, Inbound> = z
        .object({
            email: z.string().optional(),
            id: z.number().int().optional(),
            name: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
            };
        });

    export type Outbound = {
        email?: string | undefined;
        id?: number | undefined;
        name?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetEmailCampaignsSender> = z
        .object({
            email: z.string().optional(),
            id: z.number().int().optional(),
            name: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
            };
        });
}

/** @internal */
export namespace GetEmailCampaignsCampaignStats$ {
    export type Inbound = {
        clickers: number;
        complaints: number;
        deferred?: number | undefined;
        delivered: number;
        estimatedViews?: number | undefined;
        hardBounces: number;
        listId?: number | undefined;
        returnBounce?: number | undefined;
        sent: number;
        softBounces: number;
        trackableViews: number;
        trackableViewsRate?: number | undefined;
        uniqueClicks: number;
        uniqueViews: number;
        unsubscriptions: number;
        viewed: number;
    };

    export const inboundSchema: z.ZodType<GetEmailCampaignsCampaignStats, z.ZodTypeDef, Inbound> = z
        .object({
            clickers: z.number().int(),
            complaints: z.number().int(),
            deferred: z.number().int().optional(),
            delivered: z.number().int(),
            estimatedViews: z.number().int().optional(),
            hardBounces: z.number().int(),
            listId: z.number().int().optional(),
            returnBounce: z.number().int().optional(),
            sent: z.number().int(),
            softBounces: z.number().int(),
            trackableViews: z.number().int(),
            trackableViewsRate: z.number().optional(),
            uniqueClicks: z.number().int(),
            uniqueViews: z.number().int(),
            unsubscriptions: z.number().int(),
            viewed: z.number().int(),
        })
        .transform((v) => {
            return {
                clickers: v.clickers,
                complaints: v.complaints,
                ...(v.deferred === undefined ? null : { deferred: v.deferred }),
                delivered: v.delivered,
                ...(v.estimatedViews === undefined ? null : { estimatedViews: v.estimatedViews }),
                hardBounces: v.hardBounces,
                ...(v.listId === undefined ? null : { listId: v.listId }),
                ...(v.returnBounce === undefined ? null : { returnBounce: v.returnBounce }),
                sent: v.sent,
                softBounces: v.softBounces,
                trackableViews: v.trackableViews,
                ...(v.trackableViewsRate === undefined
                    ? null
                    : { trackableViewsRate: v.trackableViewsRate }),
                uniqueClicks: v.uniqueClicks,
                uniqueViews: v.uniqueViews,
                unsubscriptions: v.unsubscriptions,
                viewed: v.viewed,
            };
        });

    export type Outbound = {
        clickers: number;
        complaints: number;
        deferred?: number | undefined;
        delivered: number;
        estimatedViews?: number | undefined;
        hardBounces: number;
        listId?: number | undefined;
        returnBounce?: number | undefined;
        sent: number;
        softBounces: number;
        trackableViews: number;
        trackableViewsRate?: number | undefined;
        uniqueClicks: number;
        uniqueViews: number;
        unsubscriptions: number;
        viewed: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetEmailCampaignsCampaignStats> =
        z
            .object({
                clickers: z.number().int(),
                complaints: z.number().int(),
                deferred: z.number().int().optional(),
                delivered: z.number().int(),
                estimatedViews: z.number().int().optional(),
                hardBounces: z.number().int(),
                listId: z.number().int().optional(),
                returnBounce: z.number().int().optional(),
                sent: z.number().int(),
                softBounces: z.number().int(),
                trackableViews: z.number().int(),
                trackableViewsRate: z.number().optional(),
                uniqueClicks: z.number().int(),
                uniqueViews: z.number().int(),
                unsubscriptions: z.number().int(),
                viewed: z.number().int(),
            })
            .transform((v) => {
                return {
                    clickers: v.clickers,
                    complaints: v.complaints,
                    ...(v.deferred === undefined ? null : { deferred: v.deferred }),
                    delivered: v.delivered,
                    ...(v.estimatedViews === undefined
                        ? null
                        : { estimatedViews: v.estimatedViews }),
                    hardBounces: v.hardBounces,
                    ...(v.listId === undefined ? null : { listId: v.listId }),
                    ...(v.returnBounce === undefined ? null : { returnBounce: v.returnBounce }),
                    sent: v.sent,
                    softBounces: v.softBounces,
                    trackableViews: v.trackableViews,
                    ...(v.trackableViewsRate === undefined
                        ? null
                        : { trackableViewsRate: v.trackableViewsRate }),
                    uniqueClicks: v.uniqueClicks,
                    uniqueViews: v.uniqueViews,
                    unsubscriptions: v.unsubscriptions,
                    viewed: v.viewed,
                };
            });
}

/** @internal */
export namespace GetEmailCampaignsGlobalStats$ {
    export type Inbound = {
        clickers: number;
        complaints: number;
        deferred?: number | undefined;
        delivered: number;
        estimatedViews?: number | undefined;
        hardBounces: number;
        listId?: number | undefined;
        returnBounce?: number | undefined;
        sent: number;
        softBounces: number;
        trackableViews: number;
        trackableViewsRate?: number | undefined;
        uniqueClicks: number;
        uniqueViews: number;
        unsubscriptions: number;
        viewed: number;
    };

    export const inboundSchema: z.ZodType<GetEmailCampaignsGlobalStats, z.ZodTypeDef, Inbound> = z
        .object({
            clickers: z.number().int(),
            complaints: z.number().int(),
            deferred: z.number().int().optional(),
            delivered: z.number().int(),
            estimatedViews: z.number().int().optional(),
            hardBounces: z.number().int(),
            listId: z.number().int().optional(),
            returnBounce: z.number().int().optional(),
            sent: z.number().int(),
            softBounces: z.number().int(),
            trackableViews: z.number().int(),
            trackableViewsRate: z.number().optional(),
            uniqueClicks: z.number().int(),
            uniqueViews: z.number().int(),
            unsubscriptions: z.number().int(),
            viewed: z.number().int(),
        })
        .transform((v) => {
            return {
                clickers: v.clickers,
                complaints: v.complaints,
                ...(v.deferred === undefined ? null : { deferred: v.deferred }),
                delivered: v.delivered,
                ...(v.estimatedViews === undefined ? null : { estimatedViews: v.estimatedViews }),
                hardBounces: v.hardBounces,
                ...(v.listId === undefined ? null : { listId: v.listId }),
                ...(v.returnBounce === undefined ? null : { returnBounce: v.returnBounce }),
                sent: v.sent,
                softBounces: v.softBounces,
                trackableViews: v.trackableViews,
                ...(v.trackableViewsRate === undefined
                    ? null
                    : { trackableViewsRate: v.trackableViewsRate }),
                uniqueClicks: v.uniqueClicks,
                uniqueViews: v.uniqueViews,
                unsubscriptions: v.unsubscriptions,
                viewed: v.viewed,
            };
        });

    export type Outbound = {
        clickers: number;
        complaints: number;
        deferred?: number | undefined;
        delivered: number;
        estimatedViews?: number | undefined;
        hardBounces: number;
        listId?: number | undefined;
        returnBounce?: number | undefined;
        sent: number;
        softBounces: number;
        trackableViews: number;
        trackableViewsRate?: number | undefined;
        uniqueClicks: number;
        uniqueViews: number;
        unsubscriptions: number;
        viewed: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetEmailCampaignsGlobalStats> = z
        .object({
            clickers: z.number().int(),
            complaints: z.number().int(),
            deferred: z.number().int().optional(),
            delivered: z.number().int(),
            estimatedViews: z.number().int().optional(),
            hardBounces: z.number().int(),
            listId: z.number().int().optional(),
            returnBounce: z.number().int().optional(),
            sent: z.number().int(),
            softBounces: z.number().int(),
            trackableViews: z.number().int(),
            trackableViewsRate: z.number().optional(),
            uniqueClicks: z.number().int(),
            uniqueViews: z.number().int(),
            unsubscriptions: z.number().int(),
            viewed: z.number().int(),
        })
        .transform((v) => {
            return {
                clickers: v.clickers,
                complaints: v.complaints,
                ...(v.deferred === undefined ? null : { deferred: v.deferred }),
                delivered: v.delivered,
                ...(v.estimatedViews === undefined ? null : { estimatedViews: v.estimatedViews }),
                hardBounces: v.hardBounces,
                ...(v.listId === undefined ? null : { listId: v.listId }),
                ...(v.returnBounce === undefined ? null : { returnBounce: v.returnBounce }),
                sent: v.sent,
                softBounces: v.softBounces,
                trackableViews: v.trackableViews,
                ...(v.trackableViewsRate === undefined
                    ? null
                    : { trackableViewsRate: v.trackableViewsRate }),
                uniqueClicks: v.uniqueClicks,
                uniqueViews: v.uniqueViews,
                unsubscriptions: v.unsubscriptions,
                viewed: v.viewed,
            };
        });
}

/** @internal */
export namespace GetEmailCampaignsLinksStats$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetEmailCampaignsLinksStats, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetEmailCampaignsLinksStats> =
        z.object({});
}

/** @internal */
export namespace GetEmailCampaignsStatistics$ {
    export type Inbound = {
        campaignStats: Array<GetEmailCampaignsCampaignStats$.Inbound>;
        globalStats: GetEmailCampaignsGlobalStats$.Inbound;
        linksStats: GetEmailCampaignsLinksStats$.Inbound;
        mirrorClick: number;
        remaining: number;
        statsByBrowser: Record<string, GetDeviceBrowserStats$.Inbound>;
        statsByDevice: GetStatsByDevice$.Inbound;
        statsByDomain: Record<string, GetCampaignStats$.Inbound>;
    };

    export const inboundSchema: z.ZodType<GetEmailCampaignsStatistics, z.ZodTypeDef, Inbound> = z
        .object({
            campaignStats: z.array(z.lazy(() => GetEmailCampaignsCampaignStats$.inboundSchema)),
            globalStats: z.lazy(() => GetEmailCampaignsGlobalStats$.inboundSchema),
            linksStats: z.lazy(() => GetEmailCampaignsLinksStats$.inboundSchema),
            mirrorClick: z.number().int(),
            remaining: z.number().int(),
            statsByBrowser: z.record(GetDeviceBrowserStats$.inboundSchema),
            statsByDevice: GetStatsByDevice$.inboundSchema,
            statsByDomain: z.record(GetCampaignStats$.inboundSchema),
        })
        .transform((v) => {
            return {
                campaignStats: v.campaignStats,
                globalStats: v.globalStats,
                linksStats: v.linksStats,
                mirrorClick: v.mirrorClick,
                remaining: v.remaining,
                statsByBrowser: v.statsByBrowser,
                statsByDevice: v.statsByDevice,
                statsByDomain: v.statsByDomain,
            };
        });

    export type Outbound = {
        campaignStats: Array<GetEmailCampaignsCampaignStats$.Outbound>;
        globalStats: GetEmailCampaignsGlobalStats$.Outbound;
        linksStats: GetEmailCampaignsLinksStats$.Outbound;
        mirrorClick: number;
        remaining: number;
        statsByBrowser: Record<string, GetDeviceBrowserStats$.Outbound>;
        statsByDevice: GetStatsByDevice$.Outbound;
        statsByDomain: Record<string, GetCampaignStats$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetEmailCampaignsStatistics> = z
        .object({
            campaignStats: z.array(z.lazy(() => GetEmailCampaignsCampaignStats$.outboundSchema)),
            globalStats: z.lazy(() => GetEmailCampaignsGlobalStats$.outboundSchema),
            linksStats: z.lazy(() => GetEmailCampaignsLinksStats$.outboundSchema),
            mirrorClick: z.number().int(),
            remaining: z.number().int(),
            statsByBrowser: z.record(GetDeviceBrowserStats$.outboundSchema),
            statsByDevice: GetStatsByDevice$.outboundSchema,
            statsByDomain: z.record(GetCampaignStats$.outboundSchema),
        })
        .transform((v) => {
            return {
                campaignStats: v.campaignStats,
                globalStats: v.globalStats,
                linksStats: v.linksStats,
                mirrorClick: v.mirrorClick,
                remaining: v.remaining,
                statsByBrowser: v.statsByBrowser,
                statsByDevice: v.statsByDevice,
                statsByDomain: v.statsByDomain,
            };
        });
}

/** @internal */
export const GetEmailCampaignsStatus$ = z.nativeEnum(GetEmailCampaignsStatus);

/** @internal */
export const GetEmailCampaignsType$ = z.nativeEnum(GetEmailCampaignsType);

/** @internal */
export namespace Campaigns$ {
    export type Inbound = {
        abTesting?: boolean | undefined;
        createdAt: string;
        footer: string;
        header: string;
        htmlContent: string;
        id: number;
        inlineImageActivation?: boolean | undefined;
        mirrorActive?: boolean | undefined;
        modifiedAt: string;
        name: string;
        previewText?: string | undefined;
        recipients: GetEmailCampaignsRecipients$.Inbound;
        recurring?: boolean | undefined;
        replyTo: string;
        returnBounce?: number | undefined;
        scheduledAt?: string | undefined;
        sendAtBestTime?: boolean | undefined;
        sender: GetEmailCampaignsSender$.Inbound;
        sentDate?: string | undefined;
        shareLink?: string | undefined;
        splitRule?: number | undefined;
        statistics: GetEmailCampaignsStatistics$.Inbound;
        status: GetEmailCampaignsStatus;
        subject?: string | undefined;
        subjectA?: string | undefined;
        subjectB?: string | undefined;
        tag?: string | undefined;
        testSent: boolean;
        toField?: string | undefined;
        type: GetEmailCampaignsType;
        winnerCriteria?: string | undefined;
        winnerDelay?: number | undefined;
    };

    export const inboundSchema: z.ZodType<Campaigns, z.ZodTypeDef, Inbound> = z
        .object({
            abTesting: z.boolean().optional(),
            createdAt: z.string(),
            footer: z.string(),
            header: z.string(),
            htmlContent: z.string(),
            id: z.number().int(),
            inlineImageActivation: z.boolean().optional(),
            mirrorActive: z.boolean().optional(),
            modifiedAt: z.string(),
            name: z.string(),
            previewText: z.string().optional(),
            recipients: z.lazy(() => GetEmailCampaignsRecipients$.inboundSchema),
            recurring: z.boolean().optional(),
            replyTo: z.string(),
            returnBounce: z.number().int().optional(),
            scheduledAt: z.string().optional(),
            sendAtBestTime: z.boolean().optional(),
            sender: z.lazy(() => GetEmailCampaignsSender$.inboundSchema),
            sentDate: z.string().optional(),
            shareLink: z.string().optional(),
            splitRule: z.number().int().optional(),
            statistics: z.lazy(() => GetEmailCampaignsStatistics$.inboundSchema),
            status: GetEmailCampaignsStatus$,
            subject: z.string().optional(),
            subjectA: z.string().optional(),
            subjectB: z.string().optional(),
            tag: z.string().optional(),
            testSent: z.boolean(),
            toField: z.string().optional(),
            type: GetEmailCampaignsType$,
            winnerCriteria: z.string().optional(),
            winnerDelay: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.abTesting === undefined ? null : { abTesting: v.abTesting }),
                createdAt: v.createdAt,
                footer: v.footer,
                header: v.header,
                htmlContent: v.htmlContent,
                id: v.id,
                ...(v.inlineImageActivation === undefined
                    ? null
                    : { inlineImageActivation: v.inlineImageActivation }),
                ...(v.mirrorActive === undefined ? null : { mirrorActive: v.mirrorActive }),
                modifiedAt: v.modifiedAt,
                name: v.name,
                ...(v.previewText === undefined ? null : { previewText: v.previewText }),
                recipients: v.recipients,
                ...(v.recurring === undefined ? null : { recurring: v.recurring }),
                replyTo: v.replyTo,
                ...(v.returnBounce === undefined ? null : { returnBounce: v.returnBounce }),
                ...(v.scheduledAt === undefined ? null : { scheduledAt: v.scheduledAt }),
                ...(v.sendAtBestTime === undefined ? null : { sendAtBestTime: v.sendAtBestTime }),
                sender: v.sender,
                ...(v.sentDate === undefined ? null : { sentDate: v.sentDate }),
                ...(v.shareLink === undefined ? null : { shareLink: v.shareLink }),
                ...(v.splitRule === undefined ? null : { splitRule: v.splitRule }),
                statistics: v.statistics,
                status: v.status,
                ...(v.subject === undefined ? null : { subject: v.subject }),
                ...(v.subjectA === undefined ? null : { subjectA: v.subjectA }),
                ...(v.subjectB === undefined ? null : { subjectB: v.subjectB }),
                ...(v.tag === undefined ? null : { tag: v.tag }),
                testSent: v.testSent,
                ...(v.toField === undefined ? null : { toField: v.toField }),
                type: v.type,
                ...(v.winnerCriteria === undefined ? null : { winnerCriteria: v.winnerCriteria }),
                ...(v.winnerDelay === undefined ? null : { winnerDelay: v.winnerDelay }),
            };
        });

    export type Outbound = {
        abTesting?: boolean | undefined;
        createdAt: string;
        footer: string;
        header: string;
        htmlContent: string;
        id: number;
        inlineImageActivation?: boolean | undefined;
        mirrorActive?: boolean | undefined;
        modifiedAt: string;
        name: string;
        previewText?: string | undefined;
        recipients: GetEmailCampaignsRecipients$.Outbound;
        recurring?: boolean | undefined;
        replyTo: string;
        returnBounce?: number | undefined;
        scheduledAt?: string | undefined;
        sendAtBestTime?: boolean | undefined;
        sender: GetEmailCampaignsSender$.Outbound;
        sentDate?: string | undefined;
        shareLink?: string | undefined;
        splitRule?: number | undefined;
        statistics: GetEmailCampaignsStatistics$.Outbound;
        status: GetEmailCampaignsStatus;
        subject?: string | undefined;
        subjectA?: string | undefined;
        subjectB?: string | undefined;
        tag?: string | undefined;
        testSent: boolean;
        toField?: string | undefined;
        type: GetEmailCampaignsType;
        winnerCriteria?: string | undefined;
        winnerDelay?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Campaigns> = z
        .object({
            abTesting: z.boolean().optional(),
            createdAt: z.string(),
            footer: z.string(),
            header: z.string(),
            htmlContent: z.string(),
            id: z.number().int(),
            inlineImageActivation: z.boolean().optional(),
            mirrorActive: z.boolean().optional(),
            modifiedAt: z.string(),
            name: z.string(),
            previewText: z.string().optional(),
            recipients: z.lazy(() => GetEmailCampaignsRecipients$.outboundSchema),
            recurring: z.boolean().optional(),
            replyTo: z.string(),
            returnBounce: z.number().int().optional(),
            scheduledAt: z.string().optional(),
            sendAtBestTime: z.boolean().optional(),
            sender: z.lazy(() => GetEmailCampaignsSender$.outboundSchema),
            sentDate: z.string().optional(),
            shareLink: z.string().optional(),
            splitRule: z.number().int().optional(),
            statistics: z.lazy(() => GetEmailCampaignsStatistics$.outboundSchema),
            status: GetEmailCampaignsStatus$,
            subject: z.string().optional(),
            subjectA: z.string().optional(),
            subjectB: z.string().optional(),
            tag: z.string().optional(),
            testSent: z.boolean(),
            toField: z.string().optional(),
            type: GetEmailCampaignsType$,
            winnerCriteria: z.string().optional(),
            winnerDelay: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.abTesting === undefined ? null : { abTesting: v.abTesting }),
                createdAt: v.createdAt,
                footer: v.footer,
                header: v.header,
                htmlContent: v.htmlContent,
                id: v.id,
                ...(v.inlineImageActivation === undefined
                    ? null
                    : { inlineImageActivation: v.inlineImageActivation }),
                ...(v.mirrorActive === undefined ? null : { mirrorActive: v.mirrorActive }),
                modifiedAt: v.modifiedAt,
                name: v.name,
                ...(v.previewText === undefined ? null : { previewText: v.previewText }),
                recipients: v.recipients,
                ...(v.recurring === undefined ? null : { recurring: v.recurring }),
                replyTo: v.replyTo,
                ...(v.returnBounce === undefined ? null : { returnBounce: v.returnBounce }),
                ...(v.scheduledAt === undefined ? null : { scheduledAt: v.scheduledAt }),
                ...(v.sendAtBestTime === undefined ? null : { sendAtBestTime: v.sendAtBestTime }),
                sender: v.sender,
                ...(v.sentDate === undefined ? null : { sentDate: v.sentDate }),
                ...(v.shareLink === undefined ? null : { shareLink: v.shareLink }),
                ...(v.splitRule === undefined ? null : { splitRule: v.splitRule }),
                statistics: v.statistics,
                status: v.status,
                ...(v.subject === undefined ? null : { subject: v.subject }),
                ...(v.subjectA === undefined ? null : { subjectA: v.subjectA }),
                ...(v.subjectB === undefined ? null : { subjectB: v.subjectB }),
                ...(v.tag === undefined ? null : { tag: v.tag }),
                testSent: v.testSent,
                ...(v.toField === undefined ? null : { toField: v.toField }),
                type: v.type,
                ...(v.winnerCriteria === undefined ? null : { winnerCriteria: v.winnerCriteria }),
                ...(v.winnerDelay === undefined ? null : { winnerDelay: v.winnerDelay }),
            };
        });
}

/** @internal */
export namespace GetEmailCampaigns$ {
    export type Inbound = {
        campaigns?: Array<Campaigns$.Inbound> | undefined;
        count?: number | undefined;
    };

    export const inboundSchema: z.ZodType<GetEmailCampaigns, z.ZodTypeDef, Inbound> = z
        .object({
            campaigns: z.array(z.lazy(() => Campaigns$.inboundSchema)).optional(),
            count: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.campaigns === undefined ? null : { campaigns: v.campaigns }),
                ...(v.count === undefined ? null : { count: v.count }),
            };
        });

    export type Outbound = {
        campaigns?: Array<Campaigns$.Outbound> | undefined;
        count?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetEmailCampaigns> = z
        .object({
            campaigns: z.array(z.lazy(() => Campaigns$.outboundSchema)).optional(),
            count: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.campaigns === undefined ? null : { campaigns: v.campaigns }),
                ...(v.count === undefined ? null : { count: v.count }),
            };
        });
}
