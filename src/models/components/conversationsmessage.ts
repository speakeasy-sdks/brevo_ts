/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

/**
 * image info is passed in case the file is an image
 */
export type ImageInfo = {
    /**
     * height of the image
     */
    height?: number | undefined;
    /**
     * URL of the preview
     */
    previewUrl?: string | undefined;
    /**
     * Width of the image
     */
    width?: number | undefined;
};

export type FileT = {
    /**
     * Name of the file
     */
    filename?: string | undefined;
    /**
     * image info is passed in case the file is an image
     */
    imageInfo?: ImageInfo | undefined;
    /**
     * Whether the file is an image
     */
    isImage?: boolean | undefined;
    /**
     * Size in bytes
     */
    size?: number | undefined;
    /**
     * URL of the file
     */
    url?: string | undefined;
};

/**
 * `"agent"` for agents’ messages, `"visitor"` for visitors’ messages.
 */
export enum Type {
    Agent = "agent",
    Visitor = "visitor",
}

/**
 * a Conversations message
 */
export type ConversationsMessage = {
    /**
     * ID of the agent on whose behalf the message was sent (only in messages sent by an agent).
     */
    agentId?: string | undefined;
    /**
     * Agent’s name as displayed to the visitor. Only in the messages sent by an agent.
     */
    agentName?: string | undefined;
    /**
     * Timestamp in milliseconds.
     */
    createdAt?: number | undefined;
    file?: FileT | undefined;
    /**
     * Message ID. It can be used for further manipulations with the message.
     */
    id?: string | undefined;
    /**
     * `true` for pushed messages
     */
    isPushed?: boolean | undefined;
    /**
     * In two-way integrations, messages sent via REST API can be marked with receivedFrom property and then filtered out when received in a webhook to avoid infinite loop.
     */
    receivedFrom?: string | undefined;
    /**
     * Message text or name of the attached file
     */
    text?: string | undefined;
    /**
     * `"agent"` for agents’ messages, `"visitor"` for visitors’ messages.
     */
    type?: Type | undefined;
    /**
     * visitor’s ID
     */
    visitorId?: string | undefined;
};

/** @internal */
export namespace ImageInfo$ {
    export type Inbound = {
        height?: number | undefined;
        previewUrl?: string | undefined;
        width?: number | undefined;
    };

    export const inboundSchema: z.ZodType<ImageInfo, z.ZodTypeDef, Inbound> = z
        .object({
            height: z.number().int().optional(),
            previewUrl: z.string().optional(),
            width: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.height === undefined ? null : { height: v.height }),
                ...(v.previewUrl === undefined ? null : { previewUrl: v.previewUrl }),
                ...(v.width === undefined ? null : { width: v.width }),
            };
        });

    export type Outbound = {
        height?: number | undefined;
        previewUrl?: string | undefined;
        width?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ImageInfo> = z
        .object({
            height: z.number().int().optional(),
            previewUrl: z.string().optional(),
            width: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.height === undefined ? null : { height: v.height }),
                ...(v.previewUrl === undefined ? null : { previewUrl: v.previewUrl }),
                ...(v.width === undefined ? null : { width: v.width }),
            };
        });
}

/** @internal */
export namespace FileT$ {
    export type Inbound = {
        filename?: string | undefined;
        imageInfo?: ImageInfo$.Inbound | undefined;
        isImage?: boolean | undefined;
        size?: number | undefined;
        url?: string | undefined;
    };

    export const inboundSchema: z.ZodType<FileT, z.ZodTypeDef, Inbound> = z
        .object({
            filename: z.string().optional(),
            imageInfo: z.lazy(() => ImageInfo$.inboundSchema).optional(),
            isImage: z.boolean().optional(),
            size: z.number().int().optional(),
            url: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.filename === undefined ? null : { filename: v.filename }),
                ...(v.imageInfo === undefined ? null : { imageInfo: v.imageInfo }),
                ...(v.isImage === undefined ? null : { isImage: v.isImage }),
                ...(v.size === undefined ? null : { size: v.size }),
                ...(v.url === undefined ? null : { url: v.url }),
            };
        });

    export type Outbound = {
        filename?: string | undefined;
        imageInfo?: ImageInfo$.Outbound | undefined;
        isImage?: boolean | undefined;
        size?: number | undefined;
        url?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FileT> = z
        .object({
            filename: z.string().optional(),
            imageInfo: z.lazy(() => ImageInfo$.outboundSchema).optional(),
            isImage: z.boolean().optional(),
            size: z.number().int().optional(),
            url: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.filename === undefined ? null : { filename: v.filename }),
                ...(v.imageInfo === undefined ? null : { imageInfo: v.imageInfo }),
                ...(v.isImage === undefined ? null : { isImage: v.isImage }),
                ...(v.size === undefined ? null : { size: v.size }),
                ...(v.url === undefined ? null : { url: v.url }),
            };
        });
}

/** @internal */
export const Type$ = z.nativeEnum(Type);

/** @internal */
export namespace ConversationsMessage$ {
    export type Inbound = {
        agentId?: string | undefined;
        agentName?: string | undefined;
        createdAt?: number | undefined;
        file?: FileT$.Inbound | undefined;
        id?: string | undefined;
        isPushed?: boolean | undefined;
        receivedFrom?: string | undefined;
        text?: string | undefined;
        type?: Type | undefined;
        visitorId?: string | undefined;
    };

    export const inboundSchema: z.ZodType<ConversationsMessage, z.ZodTypeDef, Inbound> = z
        .object({
            agentId: z.string().optional(),
            agentName: z.string().optional(),
            createdAt: z.number().int().optional(),
            file: z.lazy(() => FileT$.inboundSchema).optional(),
            id: z.string().optional(),
            isPushed: z.boolean().optional(),
            receivedFrom: z.string().optional(),
            text: z.string().optional(),
            type: Type$.optional(),
            visitorId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.agentId === undefined ? null : { agentId: v.agentId }),
                ...(v.agentName === undefined ? null : { agentName: v.agentName }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.file === undefined ? null : { file: v.file }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.isPushed === undefined ? null : { isPushed: v.isPushed }),
                ...(v.receivedFrom === undefined ? null : { receivedFrom: v.receivedFrom }),
                ...(v.text === undefined ? null : { text: v.text }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.visitorId === undefined ? null : { visitorId: v.visitorId }),
            };
        });

    export type Outbound = {
        agentId?: string | undefined;
        agentName?: string | undefined;
        createdAt?: number | undefined;
        file?: FileT$.Outbound | undefined;
        id?: string | undefined;
        isPushed?: boolean | undefined;
        receivedFrom?: string | undefined;
        text?: string | undefined;
        type?: Type | undefined;
        visitorId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ConversationsMessage> = z
        .object({
            agentId: z.string().optional(),
            agentName: z.string().optional(),
            createdAt: z.number().int().optional(),
            file: z.lazy(() => FileT$.outboundSchema).optional(),
            id: z.string().optional(),
            isPushed: z.boolean().optional(),
            receivedFrom: z.string().optional(),
            text: z.string().optional(),
            type: Type$.optional(),
            visitorId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.agentId === undefined ? null : { agentId: v.agentId }),
                ...(v.agentName === undefined ? null : { agentName: v.agentName }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.file === undefined ? null : { file: v.file }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.isPushed === undefined ? null : { isPushed: v.isPushed }),
                ...(v.receivedFrom === undefined ? null : { receivedFrom: v.receivedFrom }),
                ...(v.text === undefined ? null : { text: v.text }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.visitorId === undefined ? null : { visitorId: v.visitorId }),
            };
        });
}
