/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type V2 = {
    /**
     * API Key for version 2
     */
    key: string;
    /**
     * Name of the key for version 2
     */
    name: string;
};

export type V3 = {
    /**
     * API Key for version 3
     */
    key: string;
    /**
     * Name of the key for version 3
     */
    name: string;
};

/**
 * API Keys associated to child account
 */
export type ApiKeys = {
    v2: Array<V2>;
    v3?: Array<V3> | undefined;
};

/**
 * Credits available for your child
 */
export type Credits = {
    /**
     * Email credits available for your child
     */
    emailCredits?: number | undefined;
    /**
     * SMS credits available for your child
     */
    smsCredits?: number | undefined;
};

/**
 * Statistics about your child account activity
 */
export type GetChildInfoStatistics = {
    /**
     * Overall emails sent for current month
     */
    currentMonthTotalSent?: number | undefined;
    /**
     * Overall emails sent for the previous month
     */
    previousMonthTotalSent?: number | undefined;
    /**
     * Overall emails sent for since the account exists
     */
    totalSent?: number | undefined;
};

export type GetChildInfo = {
    /**
     * API Keys associated to child account
     */
    apiKeys?: ApiKeys | undefined;
    /**
     * Name of the company
     */
    companyName: string;
    /**
     * Credits available for your child
     */
    credits?: Credits | undefined;
    /**
     * Login Email
     */
    email: string;
    /**
     * First Name
     */
    firstName: string;
    /**
     * IP(s) associated to a child account user
     */
    ips?: Array<string> | undefined;
    /**
     * Last Name
     */
    lastName: string;
    /**
     * The encrypted password of child account
     */
    password: string;
    /**
     * Statistics about your child account activity
     */
    statistics?: GetChildInfoStatistics | undefined;
};

/** @internal */
export namespace V2$ {
    export type Inbound = {
        key: string;
        name: string;
    };

    export const inboundSchema: z.ZodType<V2, z.ZodTypeDef, Inbound> = z
        .object({
            key: z.string(),
            name: z.string(),
        })
        .transform((v) => {
            return {
                key: v.key,
                name: v.name,
            };
        });

    export type Outbound = {
        key: string;
        name: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V2> = z
        .object({
            key: z.string(),
            name: z.string(),
        })
        .transform((v) => {
            return {
                key: v.key,
                name: v.name,
            };
        });
}

/** @internal */
export namespace V3$ {
    export type Inbound = {
        key: string;
        name: string;
    };

    export const inboundSchema: z.ZodType<V3, z.ZodTypeDef, Inbound> = z
        .object({
            key: z.string(),
            name: z.string(),
        })
        .transform((v) => {
            return {
                key: v.key,
                name: v.name,
            };
        });

    export type Outbound = {
        key: string;
        name: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V3> = z
        .object({
            key: z.string(),
            name: z.string(),
        })
        .transform((v) => {
            return {
                key: v.key,
                name: v.name,
            };
        });
}

/** @internal */
export namespace ApiKeys$ {
    export type Inbound = {
        v2: Array<V2$.Inbound>;
        v3?: Array<V3$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<ApiKeys, z.ZodTypeDef, Inbound> = z
        .object({
            v2: z.array(z.lazy(() => V2$.inboundSchema)),
            v3: z.array(z.lazy(() => V3$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                v2: v.v2,
                ...(v.v3 === undefined ? null : { v3: v.v3 }),
            };
        });

    export type Outbound = {
        v2: Array<V2$.Outbound>;
        v3?: Array<V3$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ApiKeys> = z
        .object({
            v2: z.array(z.lazy(() => V2$.outboundSchema)),
            v3: z.array(z.lazy(() => V3$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                v2: v.v2,
                ...(v.v3 === undefined ? null : { v3: v.v3 }),
            };
        });
}

/** @internal */
export namespace Credits$ {
    export type Inbound = {
        emailCredits?: number | undefined;
        smsCredits?: number | undefined;
    };

    export const inboundSchema: z.ZodType<Credits, z.ZodTypeDef, Inbound> = z
        .object({
            emailCredits: z.number().int().optional(),
            smsCredits: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.emailCredits === undefined ? null : { emailCredits: v.emailCredits }),
                ...(v.smsCredits === undefined ? null : { smsCredits: v.smsCredits }),
            };
        });

    export type Outbound = {
        emailCredits?: number | undefined;
        smsCredits?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Credits> = z
        .object({
            emailCredits: z.number().int().optional(),
            smsCredits: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.emailCredits === undefined ? null : { emailCredits: v.emailCredits }),
                ...(v.smsCredits === undefined ? null : { smsCredits: v.smsCredits }),
            };
        });
}

/** @internal */
export namespace GetChildInfoStatistics$ {
    export type Inbound = {
        currentMonthTotalSent?: number | undefined;
        previousMonthTotalSent?: number | undefined;
        totalSent?: number | undefined;
    };

    export const inboundSchema: z.ZodType<GetChildInfoStatistics, z.ZodTypeDef, Inbound> = z
        .object({
            currentMonthTotalSent: z.number().int().optional(),
            previousMonthTotalSent: z.number().int().optional(),
            totalSent: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.currentMonthTotalSent === undefined
                    ? null
                    : { currentMonthTotalSent: v.currentMonthTotalSent }),
                ...(v.previousMonthTotalSent === undefined
                    ? null
                    : { previousMonthTotalSent: v.previousMonthTotalSent }),
                ...(v.totalSent === undefined ? null : { totalSent: v.totalSent }),
            };
        });

    export type Outbound = {
        currentMonthTotalSent?: number | undefined;
        previousMonthTotalSent?: number | undefined;
        totalSent?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetChildInfoStatistics> = z
        .object({
            currentMonthTotalSent: z.number().int().optional(),
            previousMonthTotalSent: z.number().int().optional(),
            totalSent: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.currentMonthTotalSent === undefined
                    ? null
                    : { currentMonthTotalSent: v.currentMonthTotalSent }),
                ...(v.previousMonthTotalSent === undefined
                    ? null
                    : { previousMonthTotalSent: v.previousMonthTotalSent }),
                ...(v.totalSent === undefined ? null : { totalSent: v.totalSent }),
            };
        });
}

/** @internal */
export namespace GetChildInfo$ {
    export type Inbound = {
        apiKeys?: ApiKeys$.Inbound | undefined;
        companyName: string;
        credits?: Credits$.Inbound | undefined;
        email: string;
        firstName: string;
        ips?: Array<string> | undefined;
        lastName: string;
        password: string;
        statistics?: GetChildInfoStatistics$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetChildInfo, z.ZodTypeDef, Inbound> = z
        .object({
            apiKeys: z.lazy(() => ApiKeys$.inboundSchema).optional(),
            companyName: z.string(),
            credits: z.lazy(() => Credits$.inboundSchema).optional(),
            email: z.string(),
            firstName: z.string(),
            ips: z.array(z.string()).optional(),
            lastName: z.string(),
            password: z.string(),
            statistics: z.lazy(() => GetChildInfoStatistics$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.apiKeys === undefined ? null : { apiKeys: v.apiKeys }),
                companyName: v.companyName,
                ...(v.credits === undefined ? null : { credits: v.credits }),
                email: v.email,
                firstName: v.firstName,
                ...(v.ips === undefined ? null : { ips: v.ips }),
                lastName: v.lastName,
                password: v.password,
                ...(v.statistics === undefined ? null : { statistics: v.statistics }),
            };
        });

    export type Outbound = {
        apiKeys?: ApiKeys$.Outbound | undefined;
        companyName: string;
        credits?: Credits$.Outbound | undefined;
        email: string;
        firstName: string;
        ips?: Array<string> | undefined;
        lastName: string;
        password: string;
        statistics?: GetChildInfoStatistics$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetChildInfo> = z
        .object({
            apiKeys: z.lazy(() => ApiKeys$.outboundSchema).optional(),
            companyName: z.string(),
            credits: z.lazy(() => Credits$.outboundSchema).optional(),
            email: z.string(),
            firstName: z.string(),
            ips: z.array(z.string()).optional(),
            lastName: z.string(),
            password: z.string(),
            statistics: z.lazy(() => GetChildInfoStatistics$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.apiKeys === undefined ? null : { apiKeys: v.apiKeys }),
                companyName: v.companyName,
                ...(v.credits === undefined ? null : { credits: v.credits }),
                email: v.email,
                firstName: v.firstName,
                ...(v.ips === undefined ? null : { ips: v.ips }),
                lastName: v.lastName,
                password: v.password,
                ...(v.statistics === undefined ? null : { statistics: v.statistics }),
            };
        });
}
