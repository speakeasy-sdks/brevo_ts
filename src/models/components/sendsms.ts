/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type SendSms = {
    messageId: number;
    reference: string;
    /**
     * Remaining SMS credits of the user
     */
    remainingCredits?: number | undefined;
    /**
     * Count of SMS's to send multiple text messages
     */
    smsCount?: number | undefined;
    /**
     * SMS credits used per text message
     */
    usedCredits?: number | undefined;
};

/** @internal */
export namespace SendSms$ {
    export type Inbound = {
        messageId: number;
        reference: string;
        remainingCredits?: number | undefined;
        smsCount?: number | undefined;
        usedCredits?: number | undefined;
    };

    export const inboundSchema: z.ZodType<SendSms, z.ZodTypeDef, Inbound> = z
        .object({
            messageId: z.number().int(),
            reference: z.string(),
            remainingCredits: z.number().optional(),
            smsCount: z.number().int().optional(),
            usedCredits: z.number().optional(),
        })
        .transform((v) => {
            return {
                messageId: v.messageId,
                reference: v.reference,
                ...(v.remainingCredits === undefined
                    ? null
                    : { remainingCredits: v.remainingCredits }),
                ...(v.smsCount === undefined ? null : { smsCount: v.smsCount }),
                ...(v.usedCredits === undefined ? null : { usedCredits: v.usedCredits }),
            };
        });

    export type Outbound = {
        messageId: number;
        reference: string;
        remainingCredits?: number | undefined;
        smsCount?: number | undefined;
        usedCredits?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SendSms> = z
        .object({
            messageId: z.number().int(),
            reference: z.string(),
            remainingCredits: z.number().optional(),
            smsCount: z.number().int().optional(),
            usedCredits: z.number().optional(),
        })
        .transform((v) => {
            return {
                messageId: v.messageId,
                reference: v.reference,
                ...(v.remainingCredits === undefined
                    ? null
                    : { remainingCredits: v.remainingCredits }),
                ...(v.smsCount === undefined ? null : { smsCount: v.smsCount }),
                ...(v.usedCredits === undefined ? null : { usedCredits: v.usedCredits }),
            };
        });
}
