/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type GetSendersListIps = {
    /**
     * Domain of the IP
     */
    domain: string;
    /**
     * Dedicated IP available in your account
     */
    ip: string;
    /**
     * Weight of the IP for this sender
     */
    weight: number;
};

export type Senders = {
    /**
     * Status of sender (true=activated, false=deactivated)
     */
    active: boolean;
    /**
     * From Email associated to the sender
     */
    email: string;
    /**
     * Id of the sender
     */
    id: number;
    /**
     * List of dedicated IP(s) available in the account. This data is displayed only for dedicated IPs
     */
    ips?: Array<GetSendersListIps> | undefined;
    /**
     * From Name associated to the sender
     */
    name: string;
};

export type GetSendersList = {
    /**
     * List of the senders available in your account
     */
    senders?: Array<Senders> | undefined;
};

/** @internal */
export namespace GetSendersListIps$ {
    export type Inbound = {
        domain: string;
        ip: string;
        weight: number;
    };

    export const inboundSchema: z.ZodType<GetSendersListIps, z.ZodTypeDef, Inbound> = z
        .object({
            domain: z.string(),
            ip: z.string(),
            weight: z.number().int(),
        })
        .transform((v) => {
            return {
                domain: v.domain,
                ip: v.ip,
                weight: v.weight,
            };
        });

    export type Outbound = {
        domain: string;
        ip: string;
        weight: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetSendersListIps> = z
        .object({
            domain: z.string(),
            ip: z.string(),
            weight: z.number().int(),
        })
        .transform((v) => {
            return {
                domain: v.domain,
                ip: v.ip,
                weight: v.weight,
            };
        });
}

/** @internal */
export namespace Senders$ {
    export type Inbound = {
        active: boolean;
        email: string;
        id: number;
        ips?: Array<GetSendersListIps$.Inbound> | undefined;
        name: string;
    };

    export const inboundSchema: z.ZodType<Senders, z.ZodTypeDef, Inbound> = z
        .object({
            active: z.boolean(),
            email: z.string(),
            id: z.number().int(),
            ips: z.array(z.lazy(() => GetSendersListIps$.inboundSchema)).optional(),
            name: z.string(),
        })
        .transform((v) => {
            return {
                active: v.active,
                email: v.email,
                id: v.id,
                ...(v.ips === undefined ? null : { ips: v.ips }),
                name: v.name,
            };
        });

    export type Outbound = {
        active: boolean;
        email: string;
        id: number;
        ips?: Array<GetSendersListIps$.Outbound> | undefined;
        name: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Senders> = z
        .object({
            active: z.boolean(),
            email: z.string(),
            id: z.number().int(),
            ips: z.array(z.lazy(() => GetSendersListIps$.outboundSchema)).optional(),
            name: z.string(),
        })
        .transform((v) => {
            return {
                active: v.active,
                email: v.email,
                id: v.id,
                ...(v.ips === undefined ? null : { ips: v.ips }),
                name: v.name,
            };
        });
}

/** @internal */
export namespace GetSendersList$ {
    export type Inbound = {
        senders?: Array<Senders$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<GetSendersList, z.ZodTypeDef, Inbound> = z
        .object({
            senders: z.array(z.lazy(() => Senders$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.senders === undefined ? null : { senders: v.senders }),
            };
        });

    export type Outbound = {
        senders?: Array<Senders$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetSendersList> = z
        .object({
            senders: z.array(z.lazy(() => Senders$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.senders === undefined ? null : { senders: v.senders }),
            };
        });
}
