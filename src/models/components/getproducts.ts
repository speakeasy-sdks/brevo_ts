/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

/**
 * Meta data of product such as description, vendor, producer, stock level, etc.
 */
export type GetProductsMetaInfo = {};

export type Products = {
    /**
     * Category ID-s of the product
     */
    categories?: Array<string> | undefined;
    /**
     * Creation UTC date-time of the product (YYYY-MM-DDTHH:mm:ss.SSSZ)
     */
    createdAt: string;
    /**
     * Product ID for which you requested the details
     */
    id: string;
    /**
     * Absolute URL to the cover image of the product
     */
    imageUrl?: string | undefined;
    /**
     * product deleted from the shop's database
     */
    isDeleted?: boolean | undefined;
    /**
     * Meta data of product such as description, vendor, producer, stock level, etc.
     */
    metaInfo?: GetProductsMetaInfo | undefined;
    /**
     * Last modification UTC date-time of the product (YYYY-MM-DDTHH:mm:ss.SSSZ)
     */
    modifiedAt: string;
    /**
     * Name of the product for which you requested the details
     */
    name: string;
    /**
     * Parent product id of the product
     */
    parentId?: string | undefined;
    /**
     * Price of the product
     */
    price?: number | undefined;
    /**
     * S3 url of original image
     */
    s3Original?: string | undefined;
    /**
     * S3 thumbnail url of original image in 120x120 dimension for analytics section
     */
    s3ThumbAnalytics: string;
    /**
     * S3 thumbnail url of original image in 600x400 dimension for editor section
     */
    s3ThumbEditor: string;
    /**
     * Product identifier from the shop
     */
    sku?: string | undefined;
    /**
     * URL to the product
     */
    url?: string | undefined;
};

export type GetProducts = {
    /**
     * Number of products
     */
    count: number;
    products: Array<Products>;
};

/** @internal */
export namespace GetProductsMetaInfo$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetProductsMetaInfo, z.ZodTypeDef, Inbound> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProductsMetaInfo> = z.object(
        {}
    );
}

/** @internal */
export namespace Products$ {
    export type Inbound = {
        categories?: Array<string> | undefined;
        createdAt: string;
        id: string;
        imageUrl?: string | undefined;
        isDeleted?: boolean | undefined;
        metaInfo?: GetProductsMetaInfo$.Inbound | undefined;
        modifiedAt: string;
        name: string;
        parentId?: string | undefined;
        price?: number | undefined;
        s3Original?: string | undefined;
        s3ThumbAnalytics: string;
        s3ThumbEditor: string;
        sku?: string | undefined;
        url?: string | undefined;
    };

    export const inboundSchema: z.ZodType<Products, z.ZodTypeDef, Inbound> = z
        .object({
            categories: z.array(z.string()).optional(),
            createdAt: z.string(),
            id: z.string(),
            imageUrl: z.string().optional(),
            isDeleted: z.boolean().optional(),
            metaInfo: z.lazy(() => GetProductsMetaInfo$.inboundSchema).optional(),
            modifiedAt: z.string(),
            name: z.string(),
            parentId: z.string().optional(),
            price: z.number().optional(),
            s3Original: z.string().optional(),
            s3ThumbAnalytics: z.string(),
            s3ThumbEditor: z.string(),
            sku: z.string().optional(),
            url: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.categories === undefined ? null : { categories: v.categories }),
                createdAt: v.createdAt,
                id: v.id,
                ...(v.imageUrl === undefined ? null : { imageUrl: v.imageUrl }),
                ...(v.isDeleted === undefined ? null : { isDeleted: v.isDeleted }),
                ...(v.metaInfo === undefined ? null : { metaInfo: v.metaInfo }),
                modifiedAt: v.modifiedAt,
                name: v.name,
                ...(v.parentId === undefined ? null : { parentId: v.parentId }),
                ...(v.price === undefined ? null : { price: v.price }),
                ...(v.s3Original === undefined ? null : { s3Original: v.s3Original }),
                s3ThumbAnalytics: v.s3ThumbAnalytics,
                s3ThumbEditor: v.s3ThumbEditor,
                ...(v.sku === undefined ? null : { sku: v.sku }),
                ...(v.url === undefined ? null : { url: v.url }),
            };
        });

    export type Outbound = {
        categories?: Array<string> | undefined;
        createdAt: string;
        id: string;
        imageUrl?: string | undefined;
        isDeleted?: boolean | undefined;
        metaInfo?: GetProductsMetaInfo$.Outbound | undefined;
        modifiedAt: string;
        name: string;
        parentId?: string | undefined;
        price?: number | undefined;
        s3Original?: string | undefined;
        s3ThumbAnalytics: string;
        s3ThumbEditor: string;
        sku?: string | undefined;
        url?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Products> = z
        .object({
            categories: z.array(z.string()).optional(),
            createdAt: z.string(),
            id: z.string(),
            imageUrl: z.string().optional(),
            isDeleted: z.boolean().optional(),
            metaInfo: z.lazy(() => GetProductsMetaInfo$.outboundSchema).optional(),
            modifiedAt: z.string(),
            name: z.string(),
            parentId: z.string().optional(),
            price: z.number().optional(),
            s3Original: z.string().optional(),
            s3ThumbAnalytics: z.string(),
            s3ThumbEditor: z.string(),
            sku: z.string().optional(),
            url: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.categories === undefined ? null : { categories: v.categories }),
                createdAt: v.createdAt,
                id: v.id,
                ...(v.imageUrl === undefined ? null : { imageUrl: v.imageUrl }),
                ...(v.isDeleted === undefined ? null : { isDeleted: v.isDeleted }),
                ...(v.metaInfo === undefined ? null : { metaInfo: v.metaInfo }),
                modifiedAt: v.modifiedAt,
                name: v.name,
                ...(v.parentId === undefined ? null : { parentId: v.parentId }),
                ...(v.price === undefined ? null : { price: v.price }),
                ...(v.s3Original === undefined ? null : { s3Original: v.s3Original }),
                s3ThumbAnalytics: v.s3ThumbAnalytics,
                s3ThumbEditor: v.s3ThumbEditor,
                ...(v.sku === undefined ? null : { sku: v.sku }),
                ...(v.url === undefined ? null : { url: v.url }),
            };
        });
}

/** @internal */
export namespace GetProducts$ {
    export type Inbound = {
        count: number;
        products: Array<Products$.Inbound>;
    };

    export const inboundSchema: z.ZodType<GetProducts, z.ZodTypeDef, Inbound> = z
        .object({
            count: z.number().int(),
            products: z.array(z.lazy(() => Products$.inboundSchema)),
        })
        .transform((v) => {
            return {
                count: v.count,
                products: v.products,
            };
        });

    export type Outbound = {
        count: number;
        products: Array<Products$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProducts> = z
        .object({
            count: z.number().int(),
            products: z.array(z.lazy(() => Products$.outboundSchema)),
        })
        .transform((v) => {
            return {
                count: v.count,
                products: v.products,
            };
        });
}
