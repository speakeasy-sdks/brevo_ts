/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type TransactionalEmails = {
    /**
     * Date on which transactional email was sent
     */
    date: string;
    /**
     * Email address to which transactional email has been sent
     */
    email: string;
    /**
     * Email address of the sender from which the email was sent
     */
    from?: string | undefined;
    /**
     * Message Id of the sent email
     */
    messageId: string;
    /**
     * Subject of the sent email
     */
    subject: string;
    /**
     * Tags used for your email
     */
    tags?: Array<string> | undefined;
    /**
     * Id of the template
     */
    templateId?: number | undefined;
    /**
     * Unique id of the email sent to a particular contact
     */
    uuid: string;
};

export type GetTransacEmailsList = {
    /**
     * Total number of transactional emails available on your account according to the passed filter
     */
    count?: number | undefined;
    transactionalEmails?: Array<TransactionalEmails> | undefined;
};

/** @internal */
export namespace TransactionalEmails$ {
    export type Inbound = {
        date: string;
        email: string;
        from?: string | undefined;
        messageId: string;
        subject: string;
        tags?: Array<string> | undefined;
        templateId?: number | undefined;
        uuid: string;
    };

    export const inboundSchema: z.ZodType<TransactionalEmails, z.ZodTypeDef, Inbound> = z
        .object({
            date: z.string(),
            email: z.string(),
            from: z.string().optional(),
            messageId: z.string(),
            subject: z.string(),
            tags: z.array(z.string()).optional(),
            templateId: z.number().int().optional(),
            uuid: z.string(),
        })
        .transform((v) => {
            return {
                date: v.date,
                email: v.email,
                ...(v.from === undefined ? null : { from: v.from }),
                messageId: v.messageId,
                subject: v.subject,
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.templateId === undefined ? null : { templateId: v.templateId }),
                uuid: v.uuid,
            };
        });

    export type Outbound = {
        date: string;
        email: string;
        from?: string | undefined;
        messageId: string;
        subject: string;
        tags?: Array<string> | undefined;
        templateId?: number | undefined;
        uuid: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransactionalEmails> = z
        .object({
            date: z.string(),
            email: z.string(),
            from: z.string().optional(),
            messageId: z.string(),
            subject: z.string(),
            tags: z.array(z.string()).optional(),
            templateId: z.number().int().optional(),
            uuid: z.string(),
        })
        .transform((v) => {
            return {
                date: v.date,
                email: v.email,
                ...(v.from === undefined ? null : { from: v.from }),
                messageId: v.messageId,
                subject: v.subject,
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.templateId === undefined ? null : { templateId: v.templateId }),
                uuid: v.uuid,
            };
        });
}

/** @internal */
export namespace GetTransacEmailsList$ {
    export type Inbound = {
        count?: number | undefined;
        transactionalEmails?: Array<TransactionalEmails$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<GetTransacEmailsList, z.ZodTypeDef, Inbound> = z
        .object({
            count: z.number().int().optional(),
            transactionalEmails: z
                .array(z.lazy(() => TransactionalEmails$.inboundSchema))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.count === undefined ? null : { count: v.count }),
                ...(v.transactionalEmails === undefined
                    ? null
                    : { transactionalEmails: v.transactionalEmails }),
            };
        });

    export type Outbound = {
        count?: number | undefined;
        transactionalEmails?: Array<TransactionalEmails$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTransacEmailsList> = z
        .object({
            count: z.number().int().optional(),
            transactionalEmails: z
                .array(z.lazy(() => TransactionalEmails$.outboundSchema))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.count === undefined ? null : { count: v.count }),
                ...(v.transactionalEmails === undefined
                    ? null
                    : { transactionalEmails: v.transactionalEmails }),
            };
        });
}
