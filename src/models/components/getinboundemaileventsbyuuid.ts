/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type Attachments = {
    /**
     * value of the Content-ID header of the attachment.
     */
    contentId?: string | undefined;
    /**
     * size of the attachment in bytes
     */
    contentLength?: number | undefined;
    /**
     * value of the Content-Type header of the attachment
     */
    contentType?: string | undefined;
    /**
     * filename specified in the Content-Disposition header of the attachment
     */
    name?: string | undefined;
};

/**
 * Type of the event
 */
export enum GetInboundEmailEventsByUuidType {
    Received = "received",
    Processed = "processed",
    WebhookFailed = "webhookFailed",
    WebhookDelivered = "webhookDelivered",
}

export type GetInboundEmailEventsByUuidLogs = {
    /**
     * Date of the event
     */
    date?: Date | undefined;
    /**
     * Type of the event
     */
    type?: GetInboundEmailEventsByUuidType | undefined;
};

export type GetInboundEmailEventsByUuid = {
    /**
     * List of attachments of the email. This will be present only after the processing is done.
     */
    attachments?: Array<Attachments> | undefined;
    /**
     * Date when email was delivered successfully to client’s webhook
     */
    deliveredAt?: Date | null | undefined;
    /**
     * List of events/logs that describe the lifecycle of the email on SIB platform
     */
    logs?: Array<GetInboundEmailEventsByUuidLogs> | undefined;
    /**
     * Value of the Message-ID header. This will be present only after the processing is done.
     */
    messageId?: string | undefined;
    /**
     * Date when email was received on SMTP relay
     */
    receivedAt?: Date | undefined;
    /**
     * Recipient’s email address
     */
    recipient?: string | undefined;
    /**
     * Sender’s email address
     */
    sender?: string | undefined;
    /**
     * Value of the Subject header. This will be present only after the processing is done.
     */
    subject?: string | undefined;
};

/** @internal */
export namespace Attachments$ {
    export type Inbound = {
        contentId?: string | undefined;
        contentLength?: number | undefined;
        contentType?: string | undefined;
        name?: string | undefined;
    };

    export const inboundSchema: z.ZodType<Attachments, z.ZodTypeDef, Inbound> = z
        .object({
            contentId: z.string().optional(),
            contentLength: z.number().int().optional(),
            contentType: z.string().optional(),
            name: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.contentId === undefined ? null : { contentId: v.contentId }),
                ...(v.contentLength === undefined ? null : { contentLength: v.contentLength }),
                ...(v.contentType === undefined ? null : { contentType: v.contentType }),
                ...(v.name === undefined ? null : { name: v.name }),
            };
        });

    export type Outbound = {
        contentId?: string | undefined;
        contentLength?: number | undefined;
        contentType?: string | undefined;
        name?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Attachments> = z
        .object({
            contentId: z.string().optional(),
            contentLength: z.number().int().optional(),
            contentType: z.string().optional(),
            name: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.contentId === undefined ? null : { contentId: v.contentId }),
                ...(v.contentLength === undefined ? null : { contentLength: v.contentLength }),
                ...(v.contentType === undefined ? null : { contentType: v.contentType }),
                ...(v.name === undefined ? null : { name: v.name }),
            };
        });
}

/** @internal */
export const GetInboundEmailEventsByUuidType$ = z.nativeEnum(GetInboundEmailEventsByUuidType);

/** @internal */
export namespace GetInboundEmailEventsByUuidLogs$ {
    export type Inbound = {
        date?: string | undefined;
        type?: GetInboundEmailEventsByUuidType | undefined;
    };

    export const inboundSchema: z.ZodType<GetInboundEmailEventsByUuidLogs, z.ZodTypeDef, Inbound> =
        z
            .object({
                date: z
                    .string()
                    .datetime({ offset: true })
                    .transform((v) => new Date(v))
                    .optional(),
                type: GetInboundEmailEventsByUuidType$.optional(),
            })
            .transform((v) => {
                return {
                    ...(v.date === undefined ? null : { date: v.date }),
                    ...(v.type === undefined ? null : { type: v.type }),
                };
            });

    export type Outbound = {
        date?: string | undefined;
        type?: GetInboundEmailEventsByUuidType | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetInboundEmailEventsByUuidLogs
    > = z
        .object({
            date: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            type: GetInboundEmailEventsByUuidType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.date === undefined ? null : { date: v.date }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });
}

/** @internal */
export namespace GetInboundEmailEventsByUuid$ {
    export type Inbound = {
        attachments?: Array<Attachments$.Inbound> | undefined;
        deliveredAt?: string | null | undefined;
        logs?: Array<GetInboundEmailEventsByUuidLogs$.Inbound> | undefined;
        messageId?: string | undefined;
        receivedAt?: string | undefined;
        recipient?: string | undefined;
        sender?: string | undefined;
        subject?: string | undefined;
    };

    export const inboundSchema: z.ZodType<GetInboundEmailEventsByUuid, z.ZodTypeDef, Inbound> = z
        .object({
            attachments: z.array(z.lazy(() => Attachments$.inboundSchema)).optional(),
            deliveredAt: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
            logs: z.array(z.lazy(() => GetInboundEmailEventsByUuidLogs$.inboundSchema)).optional(),
            messageId: z.string().optional(),
            receivedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            recipient: z.string().optional(),
            sender: z.string().optional(),
            subject: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.attachments === undefined ? null : { attachments: v.attachments }),
                ...(v.deliveredAt === undefined ? null : { deliveredAt: v.deliveredAt }),
                ...(v.logs === undefined ? null : { logs: v.logs }),
                ...(v.messageId === undefined ? null : { messageId: v.messageId }),
                ...(v.receivedAt === undefined ? null : { receivedAt: v.receivedAt }),
                ...(v.recipient === undefined ? null : { recipient: v.recipient }),
                ...(v.sender === undefined ? null : { sender: v.sender }),
                ...(v.subject === undefined ? null : { subject: v.subject }),
            };
        });

    export type Outbound = {
        attachments?: Array<Attachments$.Outbound> | undefined;
        deliveredAt?: string | null | undefined;
        logs?: Array<GetInboundEmailEventsByUuidLogs$.Outbound> | undefined;
        messageId?: string | undefined;
        receivedAt?: string | undefined;
        recipient?: string | undefined;
        sender?: string | undefined;
        subject?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetInboundEmailEventsByUuid> = z
        .object({
            attachments: z.array(z.lazy(() => Attachments$.outboundSchema)).optional(),
            deliveredAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
            logs: z.array(z.lazy(() => GetInboundEmailEventsByUuidLogs$.outboundSchema)).optional(),
            messageId: z.string().optional(),
            receivedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            recipient: z.string().optional(),
            sender: z.string().optional(),
            subject: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.attachments === undefined ? null : { attachments: v.attachments }),
                ...(v.deliveredAt === undefined ? null : { deliveredAt: v.deliveredAt }),
                ...(v.logs === undefined ? null : { logs: v.logs }),
                ...(v.messageId === undefined ? null : { messageId: v.messageId }),
                ...(v.receivedAt === undefined ? null : { receivedAt: v.receivedAt }),
                ...(v.recipient === undefined ? null : { recipient: v.recipient }),
                ...(v.sender === undefined ? null : { sender: v.sender }),
                ...(v.subject === undefined ? null : { subject: v.subject }),
            };
        });
}
