/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { PipelineStage, PipelineStage$ } from "./pipelinestage";
import * as z from "zod";

/**
 * List of stages
 */
export type Pipeline = {
    /**
     * Pipeline id
     */
    pipeline?: string | undefined;
    /**
     * Pipeline name
     */
    pipelineName?: string | undefined;
    /**
     * List of stages
     */
    stages?: Array<PipelineStage> | undefined;
};

/** @internal */
export namespace Pipeline$ {
    export type Inbound = {
        pipeline?: string | undefined;
        pipeline_name?: string | undefined;
        stages?: Array<PipelineStage$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<Pipeline, z.ZodTypeDef, Inbound> = z
        .object({
            pipeline: z.string().optional(),
            pipeline_name: z.string().optional(),
            stages: z.array(PipelineStage$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.pipeline === undefined ? null : { pipeline: v.pipeline }),
                ...(v.pipeline_name === undefined ? null : { pipelineName: v.pipeline_name }),
                ...(v.stages === undefined ? null : { stages: v.stages }),
            };
        });

    export type Outbound = {
        pipeline?: string | undefined;
        pipeline_name?: string | undefined;
        stages?: Array<PipelineStage$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Pipeline> = z
        .object({
            pipeline: z.string().optional(),
            pipelineName: z.string().optional(),
            stages: z.array(PipelineStage$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.pipeline === undefined ? null : { pipeline: v.pipeline }),
                ...(v.pipelineName === undefined ? null : { pipeline_name: v.pipelineName }),
                ...(v.stages === undefined ? null : { stages: v.stages }),
            };
        });
}
