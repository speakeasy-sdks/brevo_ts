/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Type of webhook (marketing or transactional)
 */
export enum GetWebhookType {
    Marketing = "marketing",
    Transactional = "transactional",
}

export type GetWebhook = {
    /**
     * Creation UTC date-time of the webhook (YYYY-MM-DDTHH:mm:ss.SSSZ)
     */
    createdAt: string;
    /**
     * Description of the webhook
     */
    description: string;
    events: Array<string>;
    /**
     * ID of the webhook
     */
    id: number;
    /**
     * Last modification UTC date-time of the webhook (YYYY-MM-DDTHH:mm:ss.SSSZ)
     */
    modifiedAt: string;
    /**
     * Type of webhook (marketing or transactional)
     */
    type: GetWebhookType;
    /**
     * URL of the webhook
     */
    url: string;
};

/** @internal */
export const GetWebhookType$ = z.nativeEnum(GetWebhookType);

/** @internal */
export namespace GetWebhook$ {
    export type Inbound = {
        createdAt: string;
        description: string;
        events: Array<string>;
        id: number;
        modifiedAt: string;
        type: GetWebhookType;
        url: string;
    };

    export const inboundSchema: z.ZodType<GetWebhook, z.ZodTypeDef, Inbound> = z
        .object({
            createdAt: z.string(),
            description: z.string(),
            events: z.array(z.string()),
            id: z.number().int(),
            modifiedAt: z.string(),
            type: GetWebhookType$,
            url: z.string(),
        })
        .transform((v) => {
            return {
                createdAt: v.createdAt,
                description: v.description,
                events: v.events,
                id: v.id,
                modifiedAt: v.modifiedAt,
                type: v.type,
                url: v.url,
            };
        });

    export type Outbound = {
        createdAt: string;
        description: string;
        events: Array<string>;
        id: number;
        modifiedAt: string;
        type: GetWebhookType;
        url: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetWebhook> = z
        .object({
            createdAt: z.string(),
            description: z.string(),
            events: z.array(z.string()),
            id: z.number().int(),
            modifiedAt: z.string(),
            type: GetWebhookType$,
            url: z.string(),
        })
        .transform((v) => {
            return {
                createdAt: v.createdAt,
                description: v.description,
                events: v.events,
                id: v.id,
                modifiedAt: v.modifiedAt,
                type: v.type,
                url: v.url,
            };
        });
}
