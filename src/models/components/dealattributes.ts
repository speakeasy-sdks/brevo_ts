/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type DealAttributesAttributeOptions = {};

/**
 * List of attributes
 */
export type DealAttributes = {
    attributeOptions?: Array<DealAttributesAttributeOptions> | undefined;
    attributeTypeName?: string | undefined;
    internalName?: string | undefined;
    isRequired?: boolean | undefined;
    label?: string | undefined;
};

/** @internal */
export namespace DealAttributesAttributeOptions$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<DealAttributesAttributeOptions, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DealAttributesAttributeOptions> =
        z.object({});
}

/** @internal */
export namespace DealAttributes$ {
    export type Inbound = {
        attributeOptions?: Array<DealAttributesAttributeOptions$.Inbound> | undefined;
        attributeTypeName?: string | undefined;
        internalName?: string | undefined;
        isRequired?: boolean | undefined;
        label?: string | undefined;
    };

    export const inboundSchema: z.ZodType<DealAttributes, z.ZodTypeDef, Inbound> = z
        .object({
            attributeOptions: z
                .array(z.lazy(() => DealAttributesAttributeOptions$.inboundSchema))
                .optional(),
            attributeTypeName: z.string().optional(),
            internalName: z.string().optional(),
            isRequired: z.boolean().optional(),
            label: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.attributeOptions === undefined
                    ? null
                    : { attributeOptions: v.attributeOptions }),
                ...(v.attributeTypeName === undefined
                    ? null
                    : { attributeTypeName: v.attributeTypeName }),
                ...(v.internalName === undefined ? null : { internalName: v.internalName }),
                ...(v.isRequired === undefined ? null : { isRequired: v.isRequired }),
                ...(v.label === undefined ? null : { label: v.label }),
            };
        });

    export type Outbound = {
        attributeOptions?: Array<DealAttributesAttributeOptions$.Outbound> | undefined;
        attributeTypeName?: string | undefined;
        internalName?: string | undefined;
        isRequired?: boolean | undefined;
        label?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DealAttributes> = z
        .object({
            attributeOptions: z
                .array(z.lazy(() => DealAttributesAttributeOptions$.outboundSchema))
                .optional(),
            attributeTypeName: z.string().optional(),
            internalName: z.string().optional(),
            isRequired: z.boolean().optional(),
            label: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.attributeOptions === undefined
                    ? null
                    : { attributeOptions: v.attributeOptions }),
                ...(v.attributeTypeName === undefined
                    ? null
                    : { attributeTypeName: v.attributeTypeName }),
                ...(v.internalName === undefined ? null : { internalName: v.internalName }),
                ...(v.isRequired === undefined ? null : { isRequired: v.isRequired }),
                ...(v.label === undefined ? null : { label: v.label }),
            };
        });
}
