/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { CreateUpdateProducts, CreateUpdateProducts$ } from "./createupdateproducts";
import * as z from "zod";

export type CreateUpdateBatchProducts = {
    /**
     * array of products objects
     */
    products: Array<CreateUpdateProducts>;
    /**
     * Facilitate to update the existing categories in the same request (updateEnabled = true)
     */
    updateEnabled?: boolean | undefined;
};

/** @internal */
export namespace CreateUpdateBatchProducts$ {
    export type Inbound = {
        products: Array<CreateUpdateProducts$.Inbound>;
        updateEnabled?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<CreateUpdateBatchProducts, z.ZodTypeDef, Inbound> = z
        .object({
            products: z.array(CreateUpdateProducts$.inboundSchema),
            updateEnabled: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                products: v.products,
                ...(v.updateEnabled === undefined ? null : { updateEnabled: v.updateEnabled }),
            };
        });

    export type Outbound = {
        products: Array<CreateUpdateProducts$.Outbound>;
        updateEnabled?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateUpdateBatchProducts> = z
        .object({
            products: z.array(CreateUpdateProducts$.outboundSchema),
            updateEnabled: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                products: v.products,
                ...(v.updateEnabled === undefined ? null : { updateEnabled: v.updateEnabled }),
            };
        });
}
