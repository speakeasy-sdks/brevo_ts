/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type CreateSmsCampaignRecipients = {
    /**
     * List ids which have to be excluded from a campaign
     */
    exclusionListIds?: Array<number> | undefined;
    /**
     * Lists Ids to send the campaign to. **REQUIRED if scheduledAt is not empty**
     *
     * @remarks
     *
     */
    listIds: Array<number>;
};

export type CreateSmsCampaign = {
    /**
     * Content of the message. The **maximum characters used per SMS is 160**, if used more than that, it will be counted as more than one SMS
     *
     * @remarks
     *
     */
    content: string;
    /**
     * Name of the campaign
     */
    name: string;
    /**
     * A recognizable prefix will ensure your audience knows who you are. Recommended by U.S. carriers. This will be added as your Brand Name before the message content. **Prefer verifying maximum length of 160 characters including this prefix in message content to avoid multiple sending of same sms.**
     */
    organisationPrefix?: string | undefined;
    recipients?: CreateSmsCampaignRecipients | undefined;
    /**
     * UTC date-time on which the campaign has to run (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**
     *
     * @remarks
     *
     */
    scheduledAt?: string | undefined;
    /**
     * Name of the sender. **The number of characters is limited to 11 for alphanumeric characters and 15 for numeric characters**
     *
     * @remarks
     *
     */
    sender: string;
    /**
     * Format of the message. It indicates whether the content should be treated as unicode or not.
     *
     * @remarks
     *
     */
    unicodeEnabled?: boolean | undefined;
    /**
     * Instructions to unsubscribe from future communications. Recommended by U.S. carriers. Must include **STOP** keyword. This will be added as instructions after the end of message content. **Prefer verifying maximum length of 160 characters including this instructions in message content to avoid multiple sending of same sms.**
     */
    unsubscribeInstruction?: string | undefined;
};

/** @internal */
export namespace CreateSmsCampaignRecipients$ {
    export type Inbound = {
        exclusionListIds?: Array<number> | undefined;
        listIds: Array<number>;
    };

    export const inboundSchema: z.ZodType<CreateSmsCampaignRecipients, z.ZodTypeDef, Inbound> = z
        .object({
            exclusionListIds: z.array(z.number().int()).optional(),
            listIds: z.array(z.number().int()),
        })
        .transform((v) => {
            return {
                ...(v.exclusionListIds === undefined
                    ? null
                    : { exclusionListIds: v.exclusionListIds }),
                listIds: v.listIds,
            };
        });

    export type Outbound = {
        exclusionListIds?: Array<number> | undefined;
        listIds: Array<number>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateSmsCampaignRecipients> = z
        .object({
            exclusionListIds: z.array(z.number().int()).optional(),
            listIds: z.array(z.number().int()),
        })
        .transform((v) => {
            return {
                ...(v.exclusionListIds === undefined
                    ? null
                    : { exclusionListIds: v.exclusionListIds }),
                listIds: v.listIds,
            };
        });
}

/** @internal */
export namespace CreateSmsCampaign$ {
    export type Inbound = {
        content: string;
        name: string;
        organisationPrefix?: string | undefined;
        recipients?: CreateSmsCampaignRecipients$.Inbound | undefined;
        scheduledAt?: string | undefined;
        sender: string;
        unicodeEnabled?: boolean | undefined;
        unsubscribeInstruction?: string | undefined;
    };

    export const inboundSchema: z.ZodType<CreateSmsCampaign, z.ZodTypeDef, Inbound> = z
        .object({
            content: z.string(),
            name: z.string(),
            organisationPrefix: z.string().optional(),
            recipients: z.lazy(() => CreateSmsCampaignRecipients$.inboundSchema).optional(),
            scheduledAt: z.string().optional(),
            sender: z.string(),
            unicodeEnabled: z.boolean().default(false),
            unsubscribeInstruction: z.string().optional(),
        })
        .transform((v) => {
            return {
                content: v.content,
                name: v.name,
                ...(v.organisationPrefix === undefined
                    ? null
                    : { organisationPrefix: v.organisationPrefix }),
                ...(v.recipients === undefined ? null : { recipients: v.recipients }),
                ...(v.scheduledAt === undefined ? null : { scheduledAt: v.scheduledAt }),
                sender: v.sender,
                unicodeEnabled: v.unicodeEnabled,
                ...(v.unsubscribeInstruction === undefined
                    ? null
                    : { unsubscribeInstruction: v.unsubscribeInstruction }),
            };
        });

    export type Outbound = {
        content: string;
        name: string;
        organisationPrefix?: string | undefined;
        recipients?: CreateSmsCampaignRecipients$.Outbound | undefined;
        scheduledAt?: string | undefined;
        sender: string;
        unicodeEnabled: boolean;
        unsubscribeInstruction?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateSmsCampaign> = z
        .object({
            content: z.string(),
            name: z.string(),
            organisationPrefix: z.string().optional(),
            recipients: z.lazy(() => CreateSmsCampaignRecipients$.outboundSchema).optional(),
            scheduledAt: z.string().optional(),
            sender: z.string(),
            unicodeEnabled: z.boolean().default(false),
            unsubscribeInstruction: z.string().optional(),
        })
        .transform((v) => {
            return {
                content: v.content,
                name: v.name,
                ...(v.organisationPrefix === undefined
                    ? null
                    : { organisationPrefix: v.organisationPrefix }),
                ...(v.recipients === undefined ? null : { recipients: v.recipients }),
                ...(v.scheduledAt === undefined ? null : { scheduledAt: v.scheduledAt }),
                sender: v.sender,
                unicodeEnabled: v.unicodeEnabled,
                ...(v.unsubscribeInstruction === undefined
                    ? null
                    : { unsubscribeInstruction: v.unsubscribeInstruction }),
            };
        });
}
