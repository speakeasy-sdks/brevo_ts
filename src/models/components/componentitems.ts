/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type ComponentItems = {
    text?: string | undefined;
    type?: string | undefined;
};

/** @internal */
export namespace ComponentItems$ {
    export type Inbound = {
        text?: string | undefined;
        type?: string | undefined;
    };

    export const inboundSchema: z.ZodType<ComponentItems, z.ZodTypeDef, Inbound> = z
        .object({
            text: z.string().optional(),
            type: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.text === undefined ? null : { text: v.text }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });

    export type Outbound = {
        text?: string | undefined;
        type?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ComponentItems> = z
        .object({
            text: z.string().optional(),
            type: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.text === undefined ? null : { text: v.text }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });
}
