/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

/**
 * Category of the attribute
 */
export enum GetAttributesCategory {
    Normal = "normal",
    Transactional = "transactional",
    Category = "category",
    Calculated = "calculated",
    Global = "global",
}

export type GetAttributesEnumeration = {
    /**
     * Label of the "category" type attribute
     */
    label: string;
    /**
     * ID of Value of the "category" type attribute
     */
    value: number;
};

/**
 * Type of the attribute
 */
export enum GetAttributesType {
    Text = "text",
    Date = "date",
    Float = "float",
    Id = "id",
    Boolean = "boolean",
}

export type GetAttributesAttributes = {
    /**
     * Calculated value formula
     */
    calculatedValue?: string | undefined;
    /**
     * Category of the attribute
     */
    category: GetAttributesCategory;
    /**
     * Parameter only available for "category" type attributes.
     */
    enumeration?: Array<GetAttributesEnumeration> | undefined;
    /**
     * Name of the attribute
     */
    name: string;
    /**
     * Type of the attribute
     */
    type?: GetAttributesType | undefined;
};

export type GetAttributes = {
    /**
     * Listing of available contact attributes in your account
     */
    attributes: Array<GetAttributesAttributes>;
};

/** @internal */
export const GetAttributesCategory$ = z.nativeEnum(GetAttributesCategory);

/** @internal */
export namespace GetAttributesEnumeration$ {
    export type Inbound = {
        label: string;
        value: number;
    };

    export const inboundSchema: z.ZodType<GetAttributesEnumeration, z.ZodTypeDef, Inbound> = z
        .object({
            label: z.string(),
            value: z.number().int(),
        })
        .transform((v) => {
            return {
                label: v.label,
                value: v.value,
            };
        });

    export type Outbound = {
        label: string;
        value: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAttributesEnumeration> = z
        .object({
            label: z.string(),
            value: z.number().int(),
        })
        .transform((v) => {
            return {
                label: v.label,
                value: v.value,
            };
        });
}

/** @internal */
export const GetAttributesType$ = z.nativeEnum(GetAttributesType);

/** @internal */
export namespace GetAttributesAttributes$ {
    export type Inbound = {
        calculatedValue?: string | undefined;
        category: GetAttributesCategory;
        enumeration?: Array<GetAttributesEnumeration$.Inbound> | undefined;
        name: string;
        type?: GetAttributesType | undefined;
    };

    export const inboundSchema: z.ZodType<GetAttributesAttributes, z.ZodTypeDef, Inbound> = z
        .object({
            calculatedValue: z.string().optional(),
            category: GetAttributesCategory$,
            enumeration: z.array(z.lazy(() => GetAttributesEnumeration$.inboundSchema)).optional(),
            name: z.string(),
            type: GetAttributesType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.calculatedValue === undefined
                    ? null
                    : { calculatedValue: v.calculatedValue }),
                category: v.category,
                ...(v.enumeration === undefined ? null : { enumeration: v.enumeration }),
                name: v.name,
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });

    export type Outbound = {
        calculatedValue?: string | undefined;
        category: GetAttributesCategory;
        enumeration?: Array<GetAttributesEnumeration$.Outbound> | undefined;
        name: string;
        type?: GetAttributesType | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAttributesAttributes> = z
        .object({
            calculatedValue: z.string().optional(),
            category: GetAttributesCategory$,
            enumeration: z.array(z.lazy(() => GetAttributesEnumeration$.outboundSchema)).optional(),
            name: z.string(),
            type: GetAttributesType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.calculatedValue === undefined
                    ? null
                    : { calculatedValue: v.calculatedValue }),
                category: v.category,
                ...(v.enumeration === undefined ? null : { enumeration: v.enumeration }),
                name: v.name,
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });
}

/** @internal */
export namespace GetAttributes$ {
    export type Inbound = {
        attributes: Array<GetAttributesAttributes$.Inbound>;
    };

    export const inboundSchema: z.ZodType<GetAttributes, z.ZodTypeDef, Inbound> = z
        .object({
            attributes: z.array(z.lazy(() => GetAttributesAttributes$.inboundSchema)),
        })
        .transform((v) => {
            return {
                attributes: v.attributes,
            };
        });

    export type Outbound = {
        attributes: Array<GetAttributesAttributes$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAttributes> = z
        .object({
            attributes: z.array(z.lazy(() => GetAttributesAttributes$.outboundSchema)),
        })
        .transform((v) => {
            return {
                attributes: v.attributes,
            };
        });
}
