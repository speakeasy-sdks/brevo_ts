/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type GetCampaignStats = {
    /**
     * Number of total clicks for the campaign
     */
    clickers: number;
    /**
     * Number of complaints (Spam reports) for the campaign
     */
    complaints: number;
    /**
     * Number of deferred emails for the campaign
     */
    deferred?: number | undefined;
    /**
     * Number of delivered emails for the campaign
     */
    delivered: number;
    /**
     * Rate of recipients without any privacy protection option enabled in their email client, applied to all delivered emails
     */
    estimatedViews?: number | undefined;
    /**
     * Number of harbounce for the campaign
     */
    hardBounces: number;
    /**
     * List Id of email campaign (only in case of get email campaign(s)(not for global stats))
     */
    listId?: number | undefined;
    /**
     * Total number of non-delivered campaigns for a particular campaign id.
     */
    returnBounce?: number | undefined;
    /**
     * Number of sent emails for the campaign
     */
    sent: number;
    /**
     * Number of softbounce for the campaign
     */
    softBounces: number;
    /**
     * Recipients without any privacy protection option enabled in their email client
     */
    trackableViews: number;
    /**
     * Rate of recipients without any privacy protection option enabled in their email client
     */
    trackableViewsRate?: number | undefined;
    /**
     * Number of unique clicks for the campaign
     */
    uniqueClicks: number;
    /**
     * Number of unique openings for the campaign
     */
    uniqueViews: number;
    /**
     * Number of unsubscription for the campaign
     */
    unsubscriptions: number;
    /**
     * Number of openings for the campaign
     */
    viewed: number;
};

/** @internal */
export namespace GetCampaignStats$ {
    export type Inbound = {
        clickers: number;
        complaints: number;
        deferred?: number | undefined;
        delivered: number;
        estimatedViews?: number | undefined;
        hardBounces: number;
        listId?: number | undefined;
        returnBounce?: number | undefined;
        sent: number;
        softBounces: number;
        trackableViews: number;
        trackableViewsRate?: number | undefined;
        uniqueClicks: number;
        uniqueViews: number;
        unsubscriptions: number;
        viewed: number;
    };

    export const inboundSchema: z.ZodType<GetCampaignStats, z.ZodTypeDef, Inbound> = z
        .object({
            clickers: z.number().int(),
            complaints: z.number().int(),
            deferred: z.number().int().optional(),
            delivered: z.number().int(),
            estimatedViews: z.number().int().optional(),
            hardBounces: z.number().int(),
            listId: z.number().int().optional(),
            returnBounce: z.number().int().optional(),
            sent: z.number().int(),
            softBounces: z.number().int(),
            trackableViews: z.number().int(),
            trackableViewsRate: z.number().optional(),
            uniqueClicks: z.number().int(),
            uniqueViews: z.number().int(),
            unsubscriptions: z.number().int(),
            viewed: z.number().int(),
        })
        .transform((v) => {
            return {
                clickers: v.clickers,
                complaints: v.complaints,
                ...(v.deferred === undefined ? null : { deferred: v.deferred }),
                delivered: v.delivered,
                ...(v.estimatedViews === undefined ? null : { estimatedViews: v.estimatedViews }),
                hardBounces: v.hardBounces,
                ...(v.listId === undefined ? null : { listId: v.listId }),
                ...(v.returnBounce === undefined ? null : { returnBounce: v.returnBounce }),
                sent: v.sent,
                softBounces: v.softBounces,
                trackableViews: v.trackableViews,
                ...(v.trackableViewsRate === undefined
                    ? null
                    : { trackableViewsRate: v.trackableViewsRate }),
                uniqueClicks: v.uniqueClicks,
                uniqueViews: v.uniqueViews,
                unsubscriptions: v.unsubscriptions,
                viewed: v.viewed,
            };
        });

    export type Outbound = {
        clickers: number;
        complaints: number;
        deferred?: number | undefined;
        delivered: number;
        estimatedViews?: number | undefined;
        hardBounces: number;
        listId?: number | undefined;
        returnBounce?: number | undefined;
        sent: number;
        softBounces: number;
        trackableViews: number;
        trackableViewsRate?: number | undefined;
        uniqueClicks: number;
        uniqueViews: number;
        unsubscriptions: number;
        viewed: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCampaignStats> = z
        .object({
            clickers: z.number().int(),
            complaints: z.number().int(),
            deferred: z.number().int().optional(),
            delivered: z.number().int(),
            estimatedViews: z.number().int().optional(),
            hardBounces: z.number().int(),
            listId: z.number().int().optional(),
            returnBounce: z.number().int().optional(),
            sent: z.number().int(),
            softBounces: z.number().int(),
            trackableViews: z.number().int(),
            trackableViewsRate: z.number().optional(),
            uniqueClicks: z.number().int(),
            uniqueViews: z.number().int(),
            unsubscriptions: z.number().int(),
            viewed: z.number().int(),
        })
        .transform((v) => {
            return {
                clickers: v.clickers,
                complaints: v.complaints,
                ...(v.deferred === undefined ? null : { deferred: v.deferred }),
                delivered: v.delivered,
                ...(v.estimatedViews === undefined ? null : { estimatedViews: v.estimatedViews }),
                hardBounces: v.hardBounces,
                ...(v.listId === undefined ? null : { listId: v.listId }),
                ...(v.returnBounce === undefined ? null : { returnBounce: v.returnBounce }),
                sent: v.sent,
                softBounces: v.softBounces,
                trackableViews: v.trackableViews,
                ...(v.trackableViewsRate === undefined
                    ? null
                    : { trackableViewsRate: v.trackableViewsRate }),
                uniqueClicks: v.uniqueClicks,
                uniqueViews: v.uniqueViews,
                unsubscriptions: v.unsubscriptions,
                viewed: v.viewed,
            };
        });
}
