/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

/**
 * Segment ids and List ids to include/exclude from campaign
 */
export type CreateWhatsAppCampaignRecipients = {
    /**
     * List ids to exclude from the campaign
     */
    excludedListIds?: Array<number> | undefined;
    /**
     * **Mandatory if scheduledAt is not empty**. List Ids to send the campaign to
     *
     * @remarks
     *
     */
    listIds?: Array<number> | undefined;
    /**
     * **Mandatory if listIds are not used**. Segment ids to send the campaign to.
     *
     * @remarks
     *
     */
    segments?: Array<number> | undefined;
};

export type CreateWhatsAppCampaign = {
    /**
     * Name of the WhatsApp campaign creation
     */
    name: string;
    /**
     * Segment ids and List ids to include/exclude from campaign
     */
    recipients: CreateWhatsAppCampaignRecipients;
    /**
     * Sending UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.For example: **2017-06-01T12:30:00+02:00**
     *
     * @remarks
     *
     */
    scheduledAt: string;
    /**
     * Id of the WhatsApp template in **approved** state
     */
    templateId: number;
};

/** @internal */
export namespace CreateWhatsAppCampaignRecipients$ {
    export type Inbound = {
        excludedListIds?: Array<number> | undefined;
        listIds?: Array<number> | undefined;
        segments?: Array<number> | undefined;
    };

    export const inboundSchema: z.ZodType<CreateWhatsAppCampaignRecipients, z.ZodTypeDef, Inbound> =
        z
            .object({
                excludedListIds: z.array(z.number().int()).optional(),
                listIds: z.array(z.number().int()).optional(),
                segments: z.array(z.number().int()).optional(),
            })
            .transform((v) => {
                return {
                    ...(v.excludedListIds === undefined
                        ? null
                        : { excludedListIds: v.excludedListIds }),
                    ...(v.listIds === undefined ? null : { listIds: v.listIds }),
                    ...(v.segments === undefined ? null : { segments: v.segments }),
                };
            });

    export type Outbound = {
        excludedListIds?: Array<number> | undefined;
        listIds?: Array<number> | undefined;
        segments?: Array<number> | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CreateWhatsAppCampaignRecipients
    > = z
        .object({
            excludedListIds: z.array(z.number().int()).optional(),
            listIds: z.array(z.number().int()).optional(),
            segments: z.array(z.number().int()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.excludedListIds === undefined
                    ? null
                    : { excludedListIds: v.excludedListIds }),
                ...(v.listIds === undefined ? null : { listIds: v.listIds }),
                ...(v.segments === undefined ? null : { segments: v.segments }),
            };
        });
}

/** @internal */
export namespace CreateWhatsAppCampaign$ {
    export type Inbound = {
        name: string;
        recipients: CreateWhatsAppCampaignRecipients$.Inbound;
        scheduledAt: string;
        templateId: number;
    };

    export const inboundSchema: z.ZodType<CreateWhatsAppCampaign, z.ZodTypeDef, Inbound> = z
        .object({
            name: z.string(),
            recipients: z.lazy(() => CreateWhatsAppCampaignRecipients$.inboundSchema),
            scheduledAt: z.string(),
            templateId: z.number().int(),
        })
        .transform((v) => {
            return {
                name: v.name,
                recipients: v.recipients,
                scheduledAt: v.scheduledAt,
                templateId: v.templateId,
            };
        });

    export type Outbound = {
        name: string;
        recipients: CreateWhatsAppCampaignRecipients$.Outbound;
        scheduledAt: string;
        templateId: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateWhatsAppCampaign> = z
        .object({
            name: z.string(),
            recipients: z.lazy(() => CreateWhatsAppCampaignRecipients$.outboundSchema),
            scheduledAt: z.string(),
            templateId: z.number().int(),
        })
        .transform((v) => {
            return {
                name: v.name,
                recipients: v.recipients,
                scheduledAt: v.scheduledAt,
                templateId: v.templateId,
            };
        });
}
