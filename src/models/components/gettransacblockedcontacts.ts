/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Reason code for blocking / unsubscribing (This code is safe for comparison)
 */
export enum Code {
    UnsubscribedViaMA = "unsubscribedViaMA",
    UnsubscribedViaEmail = "unsubscribedViaEmail",
    AdminBlocked = "adminBlocked",
    UnsubscribedViaApi = "unsubscribedViaApi",
    HardBounce = "hardBounce",
    ContactFlaggedAsSpam = "contactFlaggedAsSpam",
}

/**
 * Reason for blocking / unsubscribing
 */
export type Reason = {
    /**
     * Reason code for blocking / unsubscribing (This code is safe for comparison)
     */
    code?: Code | undefined;
    /**
     * Reason for blocking / unsubscribing (This string is not safe for comparison)
     */
    message?: string | undefined;
};

export type GetTransacBlockedContactsContacts = {
    /**
     * Date when the contact was blocked or unsubscribed on
     */
    blockedAt: string;
    /**
     * Email address of the blocked or unsubscribed contact
     */
    email: string;
    /**
     * Reason for blocking / unsubscribing
     */
    reason: Reason;
    /**
     * Sender email address of the blocked or unsubscribed contact
     */
    senderEmail: string;
};

export type GetTransacBlockedContacts = {
    contacts?: Array<GetTransacBlockedContactsContacts> | undefined;
    /**
     * Count of blocked or unsubscribed contact
     */
    count?: number | undefined;
};

/** @internal */
export const Code$ = z.nativeEnum(Code);

/** @internal */
export namespace Reason$ {
    export type Inbound = {
        code?: Code | undefined;
        message?: string | undefined;
    };

    export const inboundSchema: z.ZodType<Reason, z.ZodTypeDef, Inbound> = z
        .object({
            code: Code$.optional(),
            message: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.code === undefined ? null : { code: v.code }),
                ...(v.message === undefined ? null : { message: v.message }),
            };
        });

    export type Outbound = {
        code?: Code | undefined;
        message?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Reason> = z
        .object({
            code: Code$.optional(),
            message: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.code === undefined ? null : { code: v.code }),
                ...(v.message === undefined ? null : { message: v.message }),
            };
        });
}

/** @internal */
export namespace GetTransacBlockedContactsContacts$ {
    export type Inbound = {
        blockedAt: string;
        email: string;
        reason: Reason$.Inbound;
        senderEmail: string;
    };

    export const inboundSchema: z.ZodType<
        GetTransacBlockedContactsContacts,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            blockedAt: z.string(),
            email: z.string(),
            reason: z.lazy(() => Reason$.inboundSchema),
            senderEmail: z.string(),
        })
        .transform((v) => {
            return {
                blockedAt: v.blockedAt,
                email: v.email,
                reason: v.reason,
                senderEmail: v.senderEmail,
            };
        });

    export type Outbound = {
        blockedAt: string;
        email: string;
        reason: Reason$.Outbound;
        senderEmail: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetTransacBlockedContactsContacts
    > = z
        .object({
            blockedAt: z.string(),
            email: z.string(),
            reason: z.lazy(() => Reason$.outboundSchema),
            senderEmail: z.string(),
        })
        .transform((v) => {
            return {
                blockedAt: v.blockedAt,
                email: v.email,
                reason: v.reason,
                senderEmail: v.senderEmail,
            };
        });
}

/** @internal */
export namespace GetTransacBlockedContacts$ {
    export type Inbound = {
        contacts?: Array<GetTransacBlockedContactsContacts$.Inbound> | undefined;
        count?: number | undefined;
    };

    export const inboundSchema: z.ZodType<GetTransacBlockedContacts, z.ZodTypeDef, Inbound> = z
        .object({
            contacts: z
                .array(z.lazy(() => GetTransacBlockedContactsContacts$.inboundSchema))
                .optional(),
            count: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.contacts === undefined ? null : { contacts: v.contacts }),
                ...(v.count === undefined ? null : { count: v.count }),
            };
        });

    export type Outbound = {
        contacts?: Array<GetTransacBlockedContactsContacts$.Outbound> | undefined;
        count?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTransacBlockedContacts> = z
        .object({
            contacts: z
                .array(z.lazy(() => GetTransacBlockedContactsContacts$.outboundSchema))
                .optional(),
            count: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.contacts === undefined ? null : { contacts: v.contacts }),
                ...(v.count === undefined ? null : { count: v.count }),
            };
        });
}
