/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export enum Events {
    Sent = "sent",
    HardBounce = "hardBounce",
    SoftBounce = "softBounce",
    Blocked = "blocked",
    Spam = "spam",
    Delivered = "delivered",
    Request = "request",
    Click = "click",
    Invalid = "invalid",
    Deferred = "deferred",
    Opened = "opened",
    UniqueOpened = "uniqueOpened",
    Unsubscribed = "unsubscribed",
    ListAddition = "listAddition",
    ContactUpdated = "contactUpdated",
    ContactDeleted = "contactDeleted",
    InboundEmailProcessed = "inboundEmailProcessed",
}

/**
 * Type of the webhook
 */
export enum CreateWebhookType {
    Transactional = "transactional",
    Marketing = "marketing",
    Inbound = "inbound",
}

export type CreateWebhook = {
    /**
     * Description of the webhook
     */
    description?: string | undefined;
    /**
     * Inbound domain of webhook, required in case of event type `inbound`
     */
    domain?: string | undefined;
    /**
     * - Events triggering the webhook. Possible values for **Transactional** type webhook:
     *
     * @remarks
     * #### `sent` OR `request`, `delivered`, `hardBounce`, `softBounce`, `blocked`, `spam`, `invalid`, `deferred`, `click`, `opened`, `uniqueOpened` and `unsubscribed`
     * - Possible values for **Marketing** type webhook:
     * #### `spam`, `opened`, `click`, `hardBounce`, `softBounce`, `unsubscribed`, `listAddition` & `delivered`
     * - Possible values for **Inbound** type webhook:
     * #### `inboundEmailProcessed`
     *
     */
    events: Array<Events>;
    /**
     * Type of the webhook
     */
    type?: CreateWebhookType | undefined;
    /**
     * URL of the webhook
     */
    url: string;
};

/** @internal */
export const Events$ = z.nativeEnum(Events);

/** @internal */
export const CreateWebhookType$ = z.nativeEnum(CreateWebhookType);

/** @internal */
export namespace CreateWebhook$ {
    export type Inbound = {
        description?: string | undefined;
        domain?: string | undefined;
        events: Array<Events>;
        type?: CreateWebhookType | undefined;
        url: string;
    };

    export const inboundSchema: z.ZodType<CreateWebhook, z.ZodTypeDef, Inbound> = z
        .object({
            description: z.string().optional(),
            domain: z.string().optional(),
            events: z.array(Events$),
            type: CreateWebhookType$.optional(),
            url: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.domain === undefined ? null : { domain: v.domain }),
                events: v.events,
                ...(v.type === undefined ? null : { type: v.type }),
                url: v.url,
            };
        });

    export type Outbound = {
        description?: string | undefined;
        domain?: string | undefined;
        events: Array<Events>;
        type?: CreateWebhookType | undefined;
        url: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateWebhook> = z
        .object({
            description: z.string().optional(),
            domain: z.string().optional(),
            events: z.array(Events$),
            type: CreateWebhookType$.optional(),
            url: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.domain === undefined ? null : { domain: v.domain }),
                events: v.events,
                ...(v.type === undefined ? null : { type: v.type }),
                url: v.url,
            };
        });
}
