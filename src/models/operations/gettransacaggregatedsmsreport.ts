/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type GetTransacAggregatedSmsReportRequest = {
    /**
     * Number of days in the past including today (positive integer). **Not compatible with startDate and endDate**
     *
     * @remarks
     *
     */
    days?: number | undefined;
    /**
     * **Mandatory if startDate is used.** Ending date (YYYY-MM-DD) of the report
     *
     * @remarks
     *
     */
    endDate?: string | undefined;
    /**
     * **Mandatory if endDate is used.** Starting date (YYYY-MM-DD) of the report
     *
     * @remarks
     *
     */
    startDate?: string | undefined;
    /**
     * Filter on a tag
     */
    tag?: string | undefined;
};

export type GetTransacAggregatedSmsReportResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Aggregated SMS report informations
     */
    getTransacAggregatedSmsReport?: components.GetTransacAggregatedSmsReport | undefined;
};

/** @internal */
export namespace GetTransacAggregatedSmsReportRequest$ {
    export type Inbound = {
        days?: number | undefined;
        endDate?: string | undefined;
        startDate?: string | undefined;
        tag?: string | undefined;
    };

    export const inboundSchema: z.ZodType<
        GetTransacAggregatedSmsReportRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            days: z.number().int().optional(),
            endDate: z.string().optional(),
            startDate: z.string().optional(),
            tag: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.days === undefined ? null : { days: v.days }),
                ...(v.endDate === undefined ? null : { endDate: v.endDate }),
                ...(v.startDate === undefined ? null : { startDate: v.startDate }),
                ...(v.tag === undefined ? null : { tag: v.tag }),
            };
        });

    export type Outbound = {
        days?: number | undefined;
        endDate?: string | undefined;
        startDate?: string | undefined;
        tag?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetTransacAggregatedSmsReportRequest
    > = z
        .object({
            days: z.number().int().optional(),
            endDate: z.string().optional(),
            startDate: z.string().optional(),
            tag: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.days === undefined ? null : { days: v.days }),
                ...(v.endDate === undefined ? null : { endDate: v.endDate }),
                ...(v.startDate === undefined ? null : { startDate: v.startDate }),
                ...(v.tag === undefined ? null : { tag: v.tag }),
            };
        });
}

/** @internal */
export namespace GetTransacAggregatedSmsReportResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        getTransacAggregatedSmsReport?:
            | components.GetTransacAggregatedSmsReport$.Inbound
            | undefined;
    };

    export const inboundSchema: z.ZodType<
        GetTransacAggregatedSmsReportResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            getTransacAggregatedSmsReport: z
                .lazy(() => components.GetTransacAggregatedSmsReport$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.getTransacAggregatedSmsReport === undefined
                    ? null
                    : { getTransacAggregatedSmsReport: v.getTransacAggregatedSmsReport }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        getTransacAggregatedSmsReport?:
            | components.GetTransacAggregatedSmsReport$.Outbound
            | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetTransacAggregatedSmsReportResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            getTransacAggregatedSmsReport: z
                .lazy(() => components.GetTransacAggregatedSmsReport$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.getTransacAggregatedSmsReport === undefined
                    ? null
                    : { getTransacAggregatedSmsReport: v.getTransacAggregatedSmsReport }),
            };
        });
}
