/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Linked / Unlinked contacts and deals ids.
 */
export type PatchCompaniesLinkUnlinkIdRequestBody = {
    /**
     * Contact ids for contacts to be linked with company
     */
    linkContactIds?: Array<number> | undefined;
    /**
     * Deal ids for deals to be linked with company
     */
    linkDealsIds?: Array<string> | undefined;
    /**
     * Contact ids for contacts to be unlinked from company
     */
    unlinkContactIds?: Array<number> | undefined;
    /**
     * Deal ids for deals to be unlinked from company
     */
    unlinkDealsIds?: Array<string> | undefined;
};

export type PatchCompaniesLinkUnlinkIdRequest = {
    /**
     * Linked / Unlinked contacts and deals ids.
     */
    requestBody: PatchCompaniesLinkUnlinkIdRequestBody;
    id: string;
};

export type PatchCompaniesLinkUnlinkIdResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace PatchCompaniesLinkUnlinkIdRequestBody$ {
    export type Inbound = {
        linkContactIds?: Array<number> | undefined;
        linkDealsIds?: Array<string> | undefined;
        unlinkContactIds?: Array<number> | undefined;
        unlinkDealsIds?: Array<string> | undefined;
    };

    export const inboundSchema: z.ZodType<
        PatchCompaniesLinkUnlinkIdRequestBody,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            linkContactIds: z.array(z.number().int()).optional(),
            linkDealsIds: z.array(z.string()).optional(),
            unlinkContactIds: z.array(z.number().int()).optional(),
            unlinkDealsIds: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.linkContactIds === undefined ? null : { linkContactIds: v.linkContactIds }),
                ...(v.linkDealsIds === undefined ? null : { linkDealsIds: v.linkDealsIds }),
                ...(v.unlinkContactIds === undefined
                    ? null
                    : { unlinkContactIds: v.unlinkContactIds }),
                ...(v.unlinkDealsIds === undefined ? null : { unlinkDealsIds: v.unlinkDealsIds }),
            };
        });

    export type Outbound = {
        linkContactIds?: Array<number> | undefined;
        linkDealsIds?: Array<string> | undefined;
        unlinkContactIds?: Array<number> | undefined;
        unlinkDealsIds?: Array<string> | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchCompaniesLinkUnlinkIdRequestBody
    > = z
        .object({
            linkContactIds: z.array(z.number().int()).optional(),
            linkDealsIds: z.array(z.string()).optional(),
            unlinkContactIds: z.array(z.number().int()).optional(),
            unlinkDealsIds: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.linkContactIds === undefined ? null : { linkContactIds: v.linkContactIds }),
                ...(v.linkDealsIds === undefined ? null : { linkDealsIds: v.linkDealsIds }),
                ...(v.unlinkContactIds === undefined
                    ? null
                    : { unlinkContactIds: v.unlinkContactIds }),
                ...(v.unlinkDealsIds === undefined ? null : { unlinkDealsIds: v.unlinkDealsIds }),
            };
        });
}

/** @internal */
export namespace PatchCompaniesLinkUnlinkIdRequest$ {
    export type Inbound = {
        RequestBody: PatchCompaniesLinkUnlinkIdRequestBody$.Inbound;
        id: string;
    };

    export const inboundSchema: z.ZodType<
        PatchCompaniesLinkUnlinkIdRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            RequestBody: z.lazy(() => PatchCompaniesLinkUnlinkIdRequestBody$.inboundSchema),
            id: z.string(),
        })
        .transform((v) => {
            return {
                requestBody: v.RequestBody,
                id: v.id,
            };
        });

    export type Outbound = {
        RequestBody: PatchCompaniesLinkUnlinkIdRequestBody$.Outbound;
        id: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchCompaniesLinkUnlinkIdRequest
    > = z
        .object({
            requestBody: z.lazy(() => PatchCompaniesLinkUnlinkIdRequestBody$.outboundSchema),
            id: z.string(),
        })
        .transform((v) => {
            return {
                RequestBody: v.requestBody,
                id: v.id,
            };
        });
}

/** @internal */
export namespace PatchCompaniesLinkUnlinkIdResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<
        PatchCompaniesLinkUnlinkIdResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchCompaniesLinkUnlinkIdResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
