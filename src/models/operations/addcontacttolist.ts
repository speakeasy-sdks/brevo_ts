/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

/**
 * Emails addresses OR IDs of the contacts
 */
export type AddContactToListRequestBody =
    | components.AddContactToListByEmails
    | components.AddContactToListByIDs;

export type AddContactToListRequest = {
    /**
     * Emails addresses OR IDs of the contacts
     */
    requestBody: components.AddContactToListByEmails | components.AddContactToListByIDs;
    /**
     * Id of the list
     */
    listId: number;
};

export type AddContactToListResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * All contacts have been added successfully to the list with details of failed ones
     */
    postContactInfo?: components.PostContactInfo | undefined;
};

/** @internal */
export namespace AddContactToListRequestBody$ {
    export type Inbound =
        | components.AddContactToListByEmails$.Inbound
        | components.AddContactToListByIDs$.Inbound;

    export type Outbound =
        | components.AddContactToListByEmails$.Outbound
        | components.AddContactToListByIDs$.Outbound;
    export const inboundSchema: z.ZodType<AddContactToListRequestBody, z.ZodTypeDef, Inbound> =
        z.union([
            components.AddContactToListByEmails$.inboundSchema,
            components.AddContactToListByIDs$.inboundSchema,
        ]);
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AddContactToListRequestBody> =
        z.union([
            components.AddContactToListByEmails$.outboundSchema,
            components.AddContactToListByIDs$.outboundSchema,
        ]);
}

/** @internal */
export namespace AddContactToListRequest$ {
    export type Inbound = {
        RequestBody:
            | components.AddContactToListByEmails$.Inbound
            | components.AddContactToListByIDs$.Inbound;
        listId: number;
    };

    export const inboundSchema: z.ZodType<AddContactToListRequest, z.ZodTypeDef, Inbound> = z
        .object({
            RequestBody: z.union([
                components.AddContactToListByEmails$.inboundSchema,
                components.AddContactToListByIDs$.inboundSchema,
            ]),
            listId: z.number().int(),
        })
        .transform((v) => {
            return {
                requestBody: v.RequestBody,
                listId: v.listId,
            };
        });

    export type Outbound = {
        RequestBody:
            | components.AddContactToListByEmails$.Outbound
            | components.AddContactToListByIDs$.Outbound;
        listId: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AddContactToListRequest> = z
        .object({
            requestBody: z.union([
                components.AddContactToListByEmails$.outboundSchema,
                components.AddContactToListByIDs$.outboundSchema,
            ]),
            listId: z.number().int(),
        })
        .transform((v) => {
            return {
                RequestBody: v.requestBody,
                listId: v.listId,
            };
        });
}

/** @internal */
export namespace AddContactToListResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        postContactInfo?: components.PostContactInfo$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<AddContactToListResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            postContactInfo: components.PostContactInfo$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.postContactInfo === undefined
                    ? null
                    : { postContactInfo: v.postContactInfo }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        postContactInfo?: components.PostContactInfo$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AddContactToListResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            postContactInfo: components.PostContactInfo$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.postContactInfo === undefined
                    ? null
                    : { postContactInfo: v.postContactInfo }),
            };
        });
}
