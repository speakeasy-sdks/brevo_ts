/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Values to create coupons
 */
export type CreateCouponsRequestBody = {
    /**
     * The id of the coupon collection for which the coupons will be created
     */
    collectionId: string;
    coupons: Array<string>;
};

export type CreateCouponsResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace CreateCouponsRequestBody$ {
    export type Inbound = {
        collectionId: string;
        coupons: Array<string>;
    };

    export const inboundSchema: z.ZodType<CreateCouponsRequestBody, z.ZodTypeDef, Inbound> = z
        .object({
            collectionId: z.string(),
            coupons: z.array(z.string()),
        })
        .transform((v) => {
            return {
                collectionId: v.collectionId,
                coupons: v.coupons,
            };
        });

    export type Outbound = {
        collectionId: string;
        coupons: Array<string>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateCouponsRequestBody> = z
        .object({
            collectionId: z.string(),
            coupons: z.array(z.string()),
        })
        .transform((v) => {
            return {
                collectionId: v.collectionId,
                coupons: v.coupons,
            };
        });
}

/** @internal */
export namespace CreateCouponsResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<CreateCouponsResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateCouponsResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
