/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import * as z from "zod";

/**
 * Sort the results in the ascending/descending order. Default order is **descending** by creation if `sort` is not passed
 */
export enum Sort {
    Asc = "asc",
    Desc = "desc",
}

export type GetCompaniesRequest = {
    /**
     * Filter by attrbutes. If you have filter for owner on your side please send it as {"attributes.owner":"6299dcf3874a14eacbc65c46"}
     */
    filters?: string | undefined;
    /**
     * Number of documents per page
     */
    limit?: number | undefined;
    /**
     * Filter by linked contacts ids
     */
    linkedContactsIds?: number | undefined;
    /**
     * Filter by linked Deals ids
     */
    linkedDealsIds?: string | undefined;
    /**
     * Index of the first document of the page
     */
    page?: number | undefined;
    /**
     * Sort the results in the ascending/descending order. Default order is **descending** by creation if `sort` is not passed
     */
    sort?: Sort | undefined;
    /**
     * The field used to sort field names.
     */
    sortBy?: string | undefined;
};

export type GetCompaniesResponse = {
    /**
     * Returns companies list with filters
     */
    companiesList?: components.CompaniesList | undefined;
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export const Sort$ = z.nativeEnum(Sort);

/** @internal */
export namespace GetCompaniesRequest$ {
    export type Inbound = {
        filters?: string | undefined;
        limit?: number | undefined;
        linkedContactsIds?: number | undefined;
        linkedDealsIds?: string | undefined;
        page?: number | undefined;
        sort?: Sort | undefined;
        sortBy?: string | undefined;
    };

    export const inboundSchema: z.ZodType<GetCompaniesRequest, z.ZodTypeDef, Inbound> = z
        .object({
            filters: z.string().optional(),
            limit: z.number().int().optional(),
            linkedContactsIds: z.number().int().optional(),
            linkedDealsIds: z.string().optional(),
            page: z.number().int().optional(),
            sort: Sort$.optional(),
            sortBy: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.filters === undefined ? null : { filters: v.filters }),
                ...(v.limit === undefined ? null : { limit: v.limit }),
                ...(v.linkedContactsIds === undefined
                    ? null
                    : { linkedContactsIds: v.linkedContactsIds }),
                ...(v.linkedDealsIds === undefined ? null : { linkedDealsIds: v.linkedDealsIds }),
                ...(v.page === undefined ? null : { page: v.page }),
                ...(v.sort === undefined ? null : { sort: v.sort }),
                ...(v.sortBy === undefined ? null : { sortBy: v.sortBy }),
            };
        });

    export type Outbound = {
        filters?: string | undefined;
        limit?: number | undefined;
        linkedContactsIds?: number | undefined;
        linkedDealsIds?: string | undefined;
        page?: number | undefined;
        sort?: Sort | undefined;
        sortBy?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCompaniesRequest> = z
        .object({
            filters: z.string().optional(),
            limit: z.number().int().optional(),
            linkedContactsIds: z.number().int().optional(),
            linkedDealsIds: z.string().optional(),
            page: z.number().int().optional(),
            sort: Sort$.optional(),
            sortBy: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.filters === undefined ? null : { filters: v.filters }),
                ...(v.limit === undefined ? null : { limit: v.limit }),
                ...(v.linkedContactsIds === undefined
                    ? null
                    : { linkedContactsIds: v.linkedContactsIds }),
                ...(v.linkedDealsIds === undefined ? null : { linkedDealsIds: v.linkedDealsIds }),
                ...(v.page === undefined ? null : { page: v.page }),
                ...(v.sort === undefined ? null : { sort: v.sort }),
                ...(v.sortBy === undefined ? null : { sortBy: v.sortBy }),
            };
        });
}

/** @internal */
export namespace GetCompaniesResponse$ {
    export type Inbound = {
        CompaniesList?: components.CompaniesList$.Inbound | undefined;
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<GetCompaniesResponse, z.ZodTypeDef, Inbound> = z
        .object({
            CompaniesList: components.CompaniesList$.inboundSchema.optional(),
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                ...(v.CompaniesList === undefined ? null : { companiesList: v.CompaniesList }),
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        CompaniesList?: components.CompaniesList$.Outbound | undefined;
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCompaniesResponse> = z
        .object({
            companiesList: components.CompaniesList$.outboundSchema.optional(),
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ...(v.companiesList === undefined ? null : { CompaniesList: v.companiesList }),
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
