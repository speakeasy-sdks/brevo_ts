/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import { z } from "zod";

/**
 * Filter by file entity type
 */
export enum Entity {
    Companies = "companies",
    Deals = "deals",
    Contacts = "contacts",
}

/**
 * Sort the results in the ascending/descending order. Default order is **descending** by creation if `sort` is not passed
 */
export enum GetCrmFilesQueryParamSort {
    Asc = "asc",
    Desc = "desc",
}

export type GetCrmFilesRequest = {
    /**
     * dateFrom to date range filter type (timestamp in milliseconds)
     */
    dateFrom?: number | undefined;
    /**
     * dateTo to date range filter type (timestamp in milliseconds)
     */
    dateTo?: number | undefined;
    /**
     * Filter by file entity type
     */
    entity?: Entity | undefined;
    /**
     * Filter by file entity IDs
     */
    entityIds?: string | undefined;
    /**
     * Number of documents per page
     */
    limit?: number | undefined;
    /**
     * Index of the first document of the page
     */
    offset?: number | undefined;
    /**
     * Sort the results in the ascending/descending order. Default order is **descending** by creation if `sort` is not passed
     */
    sort?: GetCrmFilesQueryParamSort | undefined;
};

export type GetCrmFilesResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * Returns files list with filters
     */
    fileList?: Array<components.FileData> | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export const Entity$ = z.nativeEnum(Entity);

/** @internal */
export const GetCrmFilesQueryParamSort$ = z.nativeEnum(GetCrmFilesQueryParamSort);

/** @internal */
export namespace GetCrmFilesRequest$ {
    export type Inbound = {
        dateFrom?: number | undefined;
        dateTo?: number | undefined;
        entity?: Entity | undefined;
        entityIds?: string | undefined;
        limit?: number | undefined;
        offset?: number | undefined;
        sort?: GetCrmFilesQueryParamSort | undefined;
    };

    export const inboundSchema: z.ZodType<GetCrmFilesRequest, z.ZodTypeDef, Inbound> = z
        .object({
            dateFrom: z.number().int().optional(),
            dateTo: z.number().int().optional(),
            entity: Entity$.optional(),
            entityIds: z.string().optional(),
            limit: z.number().int().default(50),
            offset: z.number().int().optional(),
            sort: GetCrmFilesQueryParamSort$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.dateFrom === undefined ? null : { dateFrom: v.dateFrom }),
                ...(v.dateTo === undefined ? null : { dateTo: v.dateTo }),
                ...(v.entity === undefined ? null : { entity: v.entity }),
                ...(v.entityIds === undefined ? null : { entityIds: v.entityIds }),
                ...(v.limit === undefined ? null : { limit: v.limit }),
                ...(v.offset === undefined ? null : { offset: v.offset }),
                ...(v.sort === undefined ? null : { sort: v.sort }),
            };
        });

    export type Outbound = {
        dateFrom?: number | undefined;
        dateTo?: number | undefined;
        entity?: Entity | undefined;
        entityIds?: string | undefined;
        limit: number;
        offset?: number | undefined;
        sort?: GetCrmFilesQueryParamSort | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCrmFilesRequest> = z
        .object({
            dateFrom: z.number().int().optional(),
            dateTo: z.number().int().optional(),
            entity: Entity$.optional(),
            entityIds: z.string().optional(),
            limit: z.number().int().default(50),
            offset: z.number().int().optional(),
            sort: GetCrmFilesQueryParamSort$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.dateFrom === undefined ? null : { dateFrom: v.dateFrom }),
                ...(v.dateTo === undefined ? null : { dateTo: v.dateTo }),
                ...(v.entity === undefined ? null : { entity: v.entity }),
                ...(v.entityIds === undefined ? null : { entityIds: v.entityIds }),
                limit: v.limit,
                ...(v.offset === undefined ? null : { offset: v.offset }),
                ...(v.sort === undefined ? null : { sort: v.sort }),
            };
        });
}

/** @internal */
export namespace GetCrmFilesResponse$ {
    export type Inbound = {
        ContentType: string;
        FileList?: Array<components.FileData$.Inbound> | undefined;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<GetCrmFilesResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            FileList: z.array(components.FileData$.inboundSchema).optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.FileList === undefined ? null : { fileList: v.FileList }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        FileList?: Array<components.FileData$.Outbound> | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCrmFilesResponse> = z
        .object({
            contentType: z.string(),
            fileList: z.array(components.FileData$.outboundSchema).optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.fileList === undefined ? null : { FileList: v.fileList }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
