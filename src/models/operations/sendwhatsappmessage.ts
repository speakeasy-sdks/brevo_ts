/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import { z } from "zod";

/**
 * Values to send WhatsApp message
 */
export type SendWhatsappMessageRequestBody =
    | components.SendWhatsappMessageTemplate
    | components.SendWhatsappMessageText;

/**
 * successfully created
 */
export type SendWhatsappMessageResponseBody = {
    /**
     * messageId of sent message
     */
    messageId: string;
};

export type SendWhatsappMessageResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * successfully created
     */
    object?: SendWhatsappMessageResponseBody | undefined;
};

/** @internal */
export namespace SendWhatsappMessageRequestBody$ {
    export type Inbound =
        | components.SendWhatsappMessageTemplate$.Inbound
        | components.SendWhatsappMessageText$.Inbound;

    export type Outbound =
        | components.SendWhatsappMessageTemplate$.Outbound
        | components.SendWhatsappMessageText$.Outbound;

    export const inboundSchema: z.ZodType<SendWhatsappMessageRequestBody, z.ZodTypeDef, Inbound> =
        z.union([
            components.SendWhatsappMessageTemplate$.inboundSchema,
            components.SendWhatsappMessageText$.inboundSchema,
        ]);

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SendWhatsappMessageRequestBody> =
        z.union([
            components.SendWhatsappMessageTemplate$.outboundSchema,
            components.SendWhatsappMessageText$.outboundSchema,
        ]);
}

/** @internal */
export namespace SendWhatsappMessageResponseBody$ {
    export type Inbound = {
        messageId: string;
    };

    export const inboundSchema: z.ZodType<SendWhatsappMessageResponseBody, z.ZodTypeDef, Inbound> =
        z
            .object({
                messageId: z.string(),
            })
            .transform((v) => {
                return {
                    messageId: v.messageId,
                };
            });

    export type Outbound = {
        messageId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        SendWhatsappMessageResponseBody
    > = z
        .object({
            messageId: z.string(),
        })
        .transform((v) => {
            return {
                messageId: v.messageId,
            };
        });
}

/** @internal */
export namespace SendWhatsappMessageResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: SendWhatsappMessageResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<SendWhatsappMessageResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => SendWhatsappMessageResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: SendWhatsappMessageResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SendWhatsappMessageResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => SendWhatsappMessageResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
