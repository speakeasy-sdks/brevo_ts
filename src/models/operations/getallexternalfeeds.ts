/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { RFCDate } from "../../types";
import * as components from "../components";
import * as z from "zod";

/**
 * Filter the records by `authType` of the feed.
 */
export enum AuthType {
    Basic = "basic",
    Token = "token",
    NoAuth = "noAuth",
}

/**
 * Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed.
 */
export enum GetAllExternalFeedsQueryParamSort {
    Asc = "asc",
    Desc = "desc",
}

export type GetAllExternalFeedsRequest = {
    /**
     * Filter the records by `authType` of the feed.
     */
    authType?: AuthType | undefined;
    /**
     * Mandatory if `startDate` is used. Ending date (YYYY-MM-DD) till which you want to fetch the list. Maximum time period that can be selected is one month.
     */
    endDate?: RFCDate | undefined;
    /**
     * Number of documents returned per page.
     */
    limit?: number | undefined;
    /**
     * Index of the first document on the page.
     */
    offset?: number | undefined;
    /**
     * Can be used to filter records by search keyword on feed name
     */
    search?: string | undefined;
    /**
     * Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed.
     */
    sort?: GetAllExternalFeedsQueryParamSort | undefined;
    /**
     * Mandatory if `endDate` is used. Starting date (YYYY-MM-DD) from which you want to fetch the list. Can be maximum 30 days older than current date.
     */
    startDate?: RFCDate | undefined;
};

export type GetAllExternalFeedsResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * External feeds
     */
    getAllExternalFeeds?: components.GetAllExternalFeeds | undefined;
};

/** @internal */
export const AuthType$ = z.nativeEnum(AuthType);

/** @internal */
export const GetAllExternalFeedsQueryParamSort$ = z.nativeEnum(GetAllExternalFeedsQueryParamSort);

/** @internal */
export namespace GetAllExternalFeedsRequest$ {
    export type Inbound = {
        authType?: AuthType | undefined;
        endDate?: string | undefined;
        limit?: number | undefined;
        offset?: number | undefined;
        search?: string | undefined;
        sort?: GetAllExternalFeedsQueryParamSort | undefined;
        startDate?: string | undefined;
    };

    export const inboundSchema: z.ZodType<GetAllExternalFeedsRequest, z.ZodTypeDef, Inbound> = z
        .object({
            authType: AuthType$.optional(),
            endDate: z
                .string()
                .transform((v) => new RFCDate(v))
                .optional(),
            limit: z.number().int().default(50),
            offset: z.number().int().default(0),
            search: z.string().optional(),
            sort: GetAllExternalFeedsQueryParamSort$.default(
                GetAllExternalFeedsQueryParamSort.Desc
            ),
            startDate: z
                .string()
                .transform((v) => new RFCDate(v))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.authType === undefined ? null : { authType: v.authType }),
                ...(v.endDate === undefined ? null : { endDate: v.endDate }),
                limit: v.limit,
                offset: v.offset,
                ...(v.search === undefined ? null : { search: v.search }),
                sort: v.sort,
                ...(v.startDate === undefined ? null : { startDate: v.startDate }),
            };
        });

    export type Outbound = {
        authType?: AuthType | undefined;
        endDate?: string | undefined;
        limit: number;
        offset: number;
        search?: string | undefined;
        sort: GetAllExternalFeedsQueryParamSort;
        startDate?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAllExternalFeedsRequest> = z
        .object({
            authType: AuthType$.optional(),
            endDate: z
                .instanceof(RFCDate)
                .transform((v) => v.toString())
                .optional(),
            limit: z.number().int().default(50),
            offset: z.number().int().default(0),
            search: z.string().optional(),
            sort: GetAllExternalFeedsQueryParamSort$.default(
                GetAllExternalFeedsQueryParamSort.Desc
            ),
            startDate: z
                .instanceof(RFCDate)
                .transform((v) => v.toString())
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.authType === undefined ? null : { authType: v.authType }),
                ...(v.endDate === undefined ? null : { endDate: v.endDate }),
                limit: v.limit,
                offset: v.offset,
                ...(v.search === undefined ? null : { search: v.search }),
                sort: v.sort,
                ...(v.startDate === undefined ? null : { startDate: v.startDate }),
            };
        });
}

/** @internal */
export namespace GetAllExternalFeedsResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        getAllExternalFeeds?: components.GetAllExternalFeeds$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetAllExternalFeedsResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            getAllExternalFeeds: z
                .lazy(() => components.GetAllExternalFeeds$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.getAllExternalFeeds === undefined
                    ? null
                    : { getAllExternalFeeds: v.getAllExternalFeeds }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        getAllExternalFeeds?: components.GetAllExternalFeeds$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAllExternalFeedsResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            getAllExternalFeeds: z
                .lazy(() => components.GetAllExternalFeeds$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.getAllExternalFeeds === undefined
                    ? null
                    : { getAllExternalFeeds: v.getAllExternalFeeds }),
            };
        });
}
