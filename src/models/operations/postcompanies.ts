/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Attributes for company creation
 */
export type PostCompaniesAttributes = {};

/**
 * Company create data.
 */
export type PostCompaniesRequestBody = {
    /**
     * Attributes for company creation
     */
    attributes?: PostCompaniesAttributes | undefined;
    /**
     * Country code if phone_number is passed in attributes.
     */
    countryCode?: number | undefined;
    /**
     * Name of company
     */
    name: string;
};

/**
 * Created company id
 */
export type PostCompaniesResponseBody = {
    /**
     * Unique company id
     */
    id: string;
};

export type PostCompaniesResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Created new Company
     */
    object?: PostCompaniesResponseBody | undefined;
};

/** @internal */
export namespace PostCompaniesAttributes$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PostCompaniesAttributes, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostCompaniesAttributes> =
        z.object({});
}

/** @internal */
export namespace PostCompaniesRequestBody$ {
    export type Inbound = {
        attributes?: PostCompaniesAttributes$.Inbound | undefined;
        countryCode?: number | undefined;
        name: string;
    };

    export const inboundSchema: z.ZodType<PostCompaniesRequestBody, z.ZodTypeDef, Inbound> = z
        .object({
            attributes: z.lazy(() => PostCompaniesAttributes$.inboundSchema).optional(),
            countryCode: z.number().int().optional(),
            name: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.attributes === undefined ? null : { attributes: v.attributes }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                name: v.name,
            };
        });

    export type Outbound = {
        attributes?: PostCompaniesAttributes$.Outbound | undefined;
        countryCode?: number | undefined;
        name: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostCompaniesRequestBody> = z
        .object({
            attributes: z.lazy(() => PostCompaniesAttributes$.outboundSchema).optional(),
            countryCode: z.number().int().optional(),
            name: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.attributes === undefined ? null : { attributes: v.attributes }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                name: v.name,
            };
        });
}

/** @internal */
export namespace PostCompaniesResponseBody$ {
    export type Inbound = {
        id: string;
    };

    export const inboundSchema: z.ZodType<PostCompaniesResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string(),
        })
        .transform((v) => {
            return {
                id: v.id,
            };
        });

    export type Outbound = {
        id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostCompaniesResponseBody> = z
        .object({
            id: z.string(),
        })
        .transform((v) => {
            return {
                id: v.id,
            };
        });
}

/** @internal */
export namespace PostCompaniesResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: PostCompaniesResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<PostCompaniesResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => PostCompaniesResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: PostCompaniesResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostCompaniesResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => PostCompaniesResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
