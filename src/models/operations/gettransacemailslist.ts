/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

/**
 * Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed
 */
export enum GetTransacEmailsListQueryParamSort {
    Asc = "asc",
    Desc = "desc",
}

export type GetTransacEmailsListRequest = {
    /**
     * **Mandatory if templateId and messageId are not passed in query filters.** Email address to which transactional email has been sent.
     *
     * @remarks
     *
     */
    email?: string | undefined;
    /**
     * **Mandatory if startDate is used.** Ending date (YYYY-MM-DD) till which you want to fetch the list. **Maximum time period that can be selected is one month.**
     *
     * @remarks
     *
     */
    endDate?: string | undefined;
    /**
     * Number of documents returned per page
     */
    limit?: number | undefined;
    /**
     * **Mandatory if templateId and email are not passed in query filters.** Message ID of the transactional email sent.
     *
     * @remarks
     *
     */
    messageId?: string | undefined;
    /**
     * Index of the first document in the page
     */
    offset?: number | undefined;
    /**
     * Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed
     */
    sort?: GetTransacEmailsListQueryParamSort | undefined;
    /**
     * **Mandatory if endDate is used.** Starting date (YYYY-MM-DD) from which you want to fetch the list. **Maximum time period that can be selected is one month**.
     *
     * @remarks
     *
     */
    startDate?: string | undefined;
    /**
     * **Mandatory if email and messageId are not passed in query filters.** Id of the template that was used to compose transactional email.
     *
     * @remarks
     *
     */
    templateId?: number | undefined;
};

export type GetTransacEmailsListResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * List of transactional emails
     */
    getTransacEmailsList?: components.GetTransacEmailsList | undefined;
};

/** @internal */
export const GetTransacEmailsListQueryParamSort$ = z.nativeEnum(GetTransacEmailsListQueryParamSort);

/** @internal */
export namespace GetTransacEmailsListRequest$ {
    export type Inbound = {
        email?: string | undefined;
        endDate?: string | undefined;
        limit?: number | undefined;
        messageId?: string | undefined;
        offset?: number | undefined;
        sort?: GetTransacEmailsListQueryParamSort | undefined;
        startDate?: string | undefined;
        templateId?: number | undefined;
    };

    export const inboundSchema: z.ZodType<GetTransacEmailsListRequest, z.ZodTypeDef, Inbound> = z
        .object({
            email: z.string().optional(),
            endDate: z.string().optional(),
            limit: z.number().int().optional(),
            messageId: z.string().optional(),
            offset: z.number().int().optional(),
            sort: GetTransacEmailsListQueryParamSort$.optional(),
            startDate: z.string().optional(),
            templateId: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.endDate === undefined ? null : { endDate: v.endDate }),
                ...(v.limit === undefined ? null : { limit: v.limit }),
                ...(v.messageId === undefined ? null : { messageId: v.messageId }),
                ...(v.offset === undefined ? null : { offset: v.offset }),
                ...(v.sort === undefined ? null : { sort: v.sort }),
                ...(v.startDate === undefined ? null : { startDate: v.startDate }),
                ...(v.templateId === undefined ? null : { templateId: v.templateId }),
            };
        });

    export type Outbound = {
        email?: string | undefined;
        endDate?: string | undefined;
        limit?: number | undefined;
        messageId?: string | undefined;
        offset?: number | undefined;
        sort?: GetTransacEmailsListQueryParamSort | undefined;
        startDate?: string | undefined;
        templateId?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTransacEmailsListRequest> = z
        .object({
            email: z.string().optional(),
            endDate: z.string().optional(),
            limit: z.number().int().optional(),
            messageId: z.string().optional(),
            offset: z.number().int().optional(),
            sort: GetTransacEmailsListQueryParamSort$.optional(),
            startDate: z.string().optional(),
            templateId: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.endDate === undefined ? null : { endDate: v.endDate }),
                ...(v.limit === undefined ? null : { limit: v.limit }),
                ...(v.messageId === undefined ? null : { messageId: v.messageId }),
                ...(v.offset === undefined ? null : { offset: v.offset }),
                ...(v.sort === undefined ? null : { sort: v.sort }),
                ...(v.startDate === undefined ? null : { startDate: v.startDate }),
                ...(v.templateId === undefined ? null : { templateId: v.templateId }),
            };
        });
}

/** @internal */
export namespace GetTransacEmailsListResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        getTransacEmailsList?: components.GetTransacEmailsList$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetTransacEmailsListResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            getTransacEmailsList: z
                .lazy(() => components.GetTransacEmailsList$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.getTransacEmailsList === undefined
                    ? null
                    : { getTransacEmailsList: v.getTransacEmailsList }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        getTransacEmailsList?: components.GetTransacEmailsList$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTransacEmailsListResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            getTransacEmailsList: z
                .lazy(() => components.GetTransacEmailsList$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.getTransacEmailsList === undefined
                    ? null
                    : { getTransacEmailsList: v.getTransacEmailsList }),
            };
        });
}
