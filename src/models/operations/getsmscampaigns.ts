/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

/**
 * Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed
 */
export enum GetSmsCampaignsQueryParamSort {
    Asc = "asc",
    Desc = "desc",
}

/**
 * Status of campaign.
 */
export enum QueryParamStatus {
    Suspended = "suspended",
    Archive = "archive",
    Sent = "sent",
    Queued = "queued",
    Draft = "draft",
    InProcess = "inProcess",
}

export type GetSmsCampaignsRequest = {
    /**
     * **Mandatory if startDate is used.** Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent sms campaigns. **Prefer to pass your timezone in date-time format for accurate result** ( only available if either 'status' not passed and if passed is set to 'sent' )
     *
     * @remarks
     *
     */
    endDate?: string | undefined;
    /**
     * Number limitation for the result returned
     */
    limit?: number | undefined;
    /**
     * Beginning point in the list to retrieve from.
     */
    offset?: number | undefined;
    /**
     * Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed
     */
    sort?: GetSmsCampaignsQueryParamSort | undefined;
    /**
     * **Mandatory if endDate is used.** Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent sms campaigns. **Prefer to pass your timezone in date-time format for accurate result** ( only available if either 'status' not passed and if passed is set to 'sent' )
     *
     * @remarks
     *
     */
    startDate?: string | undefined;
    /**
     * Status of campaign.
     */
    status?: QueryParamStatus | undefined;
};

export type GetSmsCampaignsResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * SMS campaigns informations
     */
    getSmsCampaigns?: components.GetSmsCampaigns | undefined;
};

/** @internal */
export const GetSmsCampaignsQueryParamSort$ = z.nativeEnum(GetSmsCampaignsQueryParamSort);

/** @internal */
export const QueryParamStatus$ = z.nativeEnum(QueryParamStatus);

/** @internal */
export namespace GetSmsCampaignsRequest$ {
    export type Inbound = {
        endDate?: string | undefined;
        limit?: number | undefined;
        offset?: number | undefined;
        sort?: GetSmsCampaignsQueryParamSort | undefined;
        startDate?: string | undefined;
        status?: QueryParamStatus | undefined;
    };

    export const inboundSchema: z.ZodType<GetSmsCampaignsRequest, z.ZodTypeDef, Inbound> = z
        .object({
            endDate: z.string().optional(),
            limit: z.number().int().default(500),
            offset: z.number().int().default(0),
            sort: GetSmsCampaignsQueryParamSort$.default(GetSmsCampaignsQueryParamSort.Desc),
            startDate: z.string().optional(),
            status: QueryParamStatus$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.endDate === undefined ? null : { endDate: v.endDate }),
                ...(v.limit === undefined ? null : { limit: v.limit }),
                ...(v.offset === undefined ? null : { offset: v.offset }),
                ...(v.sort === undefined ? null : { sort: v.sort }),
                ...(v.startDate === undefined ? null : { startDate: v.startDate }),
                ...(v.status === undefined ? null : { status: v.status }),
            };
        });

    export type Outbound = {
        endDate?: string | undefined;
        limit: number;
        offset: number;
        sort: GetSmsCampaignsQueryParamSort;
        startDate?: string | undefined;
        status?: QueryParamStatus | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetSmsCampaignsRequest> = z
        .object({
            endDate: z.string().optional(),
            limit: z.number().int().default(500),
            offset: z.number().int().default(0),
            sort: GetSmsCampaignsQueryParamSort$.default(GetSmsCampaignsQueryParamSort.Desc),
            startDate: z.string().optional(),
            status: QueryParamStatus$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.endDate === undefined ? null : { endDate: v.endDate }),
                limit: v.limit,
                offset: v.offset,
                sort: v.sort,
                ...(v.startDate === undefined ? null : { startDate: v.startDate }),
                ...(v.status === undefined ? null : { status: v.status }),
            };
        });
}

/** @internal */
export namespace GetSmsCampaignsResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        getSmsCampaigns?: components.GetSmsCampaigns$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetSmsCampaignsResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            getSmsCampaigns: z.lazy(() => components.GetSmsCampaigns$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.getSmsCampaigns === undefined
                    ? null
                    : { getSmsCampaigns: v.getSmsCampaigns }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        getSmsCampaigns?: components.GetSmsCampaigns$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetSmsCampaignsResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            getSmsCampaigns: z.lazy(() => components.GetSmsCampaigns$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.getSmsCampaigns === undefined
                    ? null
                    : { getSmsCampaigns: v.getSmsCampaigns }),
            };
        });
}
