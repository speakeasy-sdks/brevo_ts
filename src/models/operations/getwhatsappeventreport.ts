/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

/**
 * Filter the report for a specific event type
 */
export enum QueryParamEvent {
    Sent = "sent",
    Delivered = "delivered",
    Read = "read",
    Error = "error",
    Unsubscribe = "unsubscribe",
    Reply = "reply",
    SoftBounce = "soft-bounce",
}

/**
 * Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed
 */
export enum GetWhatsappEventReportQueryParamSort {
    Asc = "asc",
    Desc = "desc",
}

export type GetWhatsappEventReportRequest = {
    /**
     * Filter results for specific contact (WhatsApp Number with country code. Example, 85264318721)
     */
    contactNumber?: string | undefined;
    /**
     * Number of days in the past including today (positive integer). _Not compatible with 'startDate' and 'endDate'_
     *
     * @remarks
     *
     */
    days?: number | undefined;
    /**
     * **Mandatory if startDate is used.** Ending date of the report (YYYY-MM-DD). Must be greater than equal to startDate
     *
     * @remarks
     *
     */
    endDate?: string | undefined;
    /**
     * Filter the report for a specific event type
     */
    event?: QueryParamEvent | undefined;
    /**
     * Number limitation for the result returned
     */
    limit?: number | undefined;
    /**
     * Beginning point in the list to retrieve from
     */
    offset?: number | undefined;
    /**
     * Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed
     */
    sort?: GetWhatsappEventReportQueryParamSort | undefined;
    /**
     * **Mandatory if endDate is used.** Starting date of the report (YYYY-MM-DD). Must be lower than equal to endDate
     *
     * @remarks
     *
     */
    startDate?: string | undefined;
};

export type GetWhatsappEventReportResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * WhatsApp events report
     */
    getWhatsappEventReport?: components.GetWhatsappEventReport | undefined;
};

/** @internal */
export const QueryParamEvent$ = z.nativeEnum(QueryParamEvent);

/** @internal */
export const GetWhatsappEventReportQueryParamSort$ = z.nativeEnum(
    GetWhatsappEventReportQueryParamSort
);

/** @internal */
export namespace GetWhatsappEventReportRequest$ {
    export type Inbound = {
        contactNumber?: string | undefined;
        days?: number | undefined;
        endDate?: string | undefined;
        event?: QueryParamEvent | undefined;
        limit?: number | undefined;
        offset?: number | undefined;
        sort?: GetWhatsappEventReportQueryParamSort | undefined;
        startDate?: string | undefined;
    };

    export const inboundSchema: z.ZodType<GetWhatsappEventReportRequest, z.ZodTypeDef, Inbound> = z
        .object({
            contactNumber: z.string().optional(),
            days: z.number().int().optional(),
            endDate: z.string().optional(),
            event: QueryParamEvent$.optional(),
            limit: z.number().int().default(2500),
            offset: z.number().int().default(0),
            sort: GetWhatsappEventReportQueryParamSort$.default(
                GetWhatsappEventReportQueryParamSort.Desc
            ),
            startDate: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.contactNumber === undefined ? null : { contactNumber: v.contactNumber }),
                ...(v.days === undefined ? null : { days: v.days }),
                ...(v.endDate === undefined ? null : { endDate: v.endDate }),
                ...(v.event === undefined ? null : { event: v.event }),
                limit: v.limit,
                offset: v.offset,
                sort: v.sort,
                ...(v.startDate === undefined ? null : { startDate: v.startDate }),
            };
        });

    export type Outbound = {
        contactNumber?: string | undefined;
        days?: number | undefined;
        endDate?: string | undefined;
        event?: QueryParamEvent | undefined;
        limit: number;
        offset: number;
        sort: GetWhatsappEventReportQueryParamSort;
        startDate?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetWhatsappEventReportRequest> =
        z
            .object({
                contactNumber: z.string().optional(),
                days: z.number().int().optional(),
                endDate: z.string().optional(),
                event: QueryParamEvent$.optional(),
                limit: z.number().int().default(2500),
                offset: z.number().int().default(0),
                sort: GetWhatsappEventReportQueryParamSort$.default(
                    GetWhatsappEventReportQueryParamSort.Desc
                ),
                startDate: z.string().optional(),
            })
            .transform((v) => {
                return {
                    ...(v.contactNumber === undefined ? null : { contactNumber: v.contactNumber }),
                    ...(v.days === undefined ? null : { days: v.days }),
                    ...(v.endDate === undefined ? null : { endDate: v.endDate }),
                    ...(v.event === undefined ? null : { event: v.event }),
                    limit: v.limit,
                    offset: v.offset,
                    sort: v.sort,
                    ...(v.startDate === undefined ? null : { startDate: v.startDate }),
                };
            });
}

/** @internal */
export namespace GetWhatsappEventReportResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        getWhatsappEventReport?: components.GetWhatsappEventReport$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetWhatsappEventReportResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            getWhatsappEventReport: z
                .lazy(() => components.GetWhatsappEventReport$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.getWhatsappEventReport === undefined
                    ? null
                    : { getWhatsappEventReport: v.getWhatsappEventReport }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        getWhatsappEventReport?: components.GetWhatsappEventReport$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetWhatsappEventReportResponse> =
        z
            .object({
                contentType: z.string(),
                statusCode: z.number().int(),
                rawResponse: z.instanceof(Response).transform(() => {
                    throw new Error("Response cannot be serialized");
                }),
                getWhatsappEventReport: z
                    .lazy(() => components.GetWhatsappEventReport$.outboundSchema)
                    .optional(),
            })
            .transform((v) => {
                return {
                    ContentType: v.contentType,
                    StatusCode: v.statusCode,
                    RawResponse: v.rawResponse,
                    ...(v.getWhatsappEventReport === undefined
                        ? null
                        : { getWhatsappEventReport: v.getWhatsappEventReport }),
                };
            });
}
