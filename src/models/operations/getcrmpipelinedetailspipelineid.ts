/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import * as z from "zod";

export type GetCrmPipelineDetailsPipelineIDRequest = {
    pipelineID: string;
};

export type GetCrmPipelineDetailsPipelineIDResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * Returns pipeline and its details
     */
    pipelines?: Array<components.Pipeline> | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace GetCrmPipelineDetailsPipelineIDRequest$ {
    export type Inbound = {
        pipelineID: string;
    };

    export const inboundSchema: z.ZodType<
        GetCrmPipelineDetailsPipelineIDRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            pipelineID: z.string(),
        })
        .transform((v) => {
            return {
                pipelineID: v.pipelineID,
            };
        });

    export type Outbound = {
        pipelineID: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetCrmPipelineDetailsPipelineIDRequest
    > = z
        .object({
            pipelineID: z.string(),
        })
        .transform((v) => {
            return {
                pipelineID: v.pipelineID,
            };
        });
}

/** @internal */
export namespace GetCrmPipelineDetailsPipelineIDResponse$ {
    export type Inbound = {
        ContentType: string;
        Pipelines?: Array<components.Pipeline$.Inbound> | undefined;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<
        GetCrmPipelineDetailsPipelineIDResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            Pipelines: z.array(components.Pipeline$.inboundSchema).optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.Pipelines === undefined ? null : { pipelines: v.Pipelines }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        Pipelines?: Array<components.Pipeline$.Outbound> | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetCrmPipelineDetailsPipelineIDResponse
    > = z
        .object({
            contentType: z.string(),
            pipelines: z.array(components.Pipeline$.outboundSchema).optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.pipelines === undefined ? null : { Pipelines: v.pipelines }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
