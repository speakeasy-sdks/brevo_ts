/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../internal/utils";
import * as components from "../../models/components";
import { AxiosResponse } from "axios";

/**
 * Filter by note entity type
 */
export enum QueryParamEntity {
    Companies = "companies",
    Deals = "deals",
    Contacts = "contacts",
}

/**
 * Sort the results in the ascending/descending order. Default order is **descending** by creation if `sort` is not passed
 */
export enum GetCrmNotesQueryParamSort {
    Asc = "asc",
    Desc = "desc",
}

export class GetCrmNotesRequest extends SpeakeasyBase {
    /**
     * dateFrom to date range filter type (timestamp in milliseconds)
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=dateFrom" })
    dateFrom?: number;

    /**
     * dateTo to date range filter type (timestamp in milliseconds)
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=dateTo" })
    dateTo?: number;

    /**
     * Filter by note entity type
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=entity" })
    entity?: QueryParamEntity;

    /**
     * Filter by note entity IDs
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=entityIds" })
    entityIds?: string;

    /**
     * Number of documents per page
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=limit" })
    limit?: number;

    /**
     * Index of the first document of the page
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=offset" })
    offset?: number;

    /**
     * Sort the results in the ascending/descending order. Default order is **descending** by creation if `sort` is not passed
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=sort" })
    sort?: GetCrmNotesQueryParamSort;
}

export class GetCrmNotesResponse extends SpeakeasyBase {
    /**
     * HTTP response content type for this operation
     */
    @SpeakeasyMetadata()
    contentType: string;

    /**
     * Returns notes list with filters
     */
    @SpeakeasyMetadata({ elemType: components.Note })
    noteList?: components.Note[];

    /**
     * HTTP response status code for this operation
     */
    @SpeakeasyMetadata()
    statusCode: number;

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    @SpeakeasyMetadata()
    rawResponse: AxiosResponse;
}
