/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import * as z from "zod";

/**
 * Filter by note entity type
 */
export enum QueryParamEntity {
    Companies = "companies",
    Deals = "deals",
    Contacts = "contacts",
}

/**
 * Sort the results in the ascending/descending order. Default order is **descending** by creation if `sort` is not passed
 */
export enum GetCrmNotesQueryParamSort {
    Asc = "asc",
    Desc = "desc",
}

export type GetCrmNotesRequest = {
    /**
     * dateFrom to date range filter type (timestamp in milliseconds)
     */
    dateFrom?: number | undefined;
    /**
     * dateTo to date range filter type (timestamp in milliseconds)
     */
    dateTo?: number | undefined;
    /**
     * Filter by note entity type
     */
    entity?: QueryParamEntity | undefined;
    /**
     * Filter by note entity IDs
     */
    entityIds?: string | undefined;
    /**
     * Number of documents per page
     */
    limit?: number | undefined;
    /**
     * Index of the first document of the page
     */
    offset?: number | undefined;
    /**
     * Sort the results in the ascending/descending order. Default order is **descending** by creation if `sort` is not passed
     */
    sort?: GetCrmNotesQueryParamSort | undefined;
};

export type GetCrmNotesResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * Returns notes list with filters
     */
    noteList?: Array<components.Note> | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export const QueryParamEntity$ = z.nativeEnum(QueryParamEntity);

/** @internal */
export const GetCrmNotesQueryParamSort$ = z.nativeEnum(GetCrmNotesQueryParamSort);

/** @internal */
export namespace GetCrmNotesRequest$ {
    export type Inbound = {
        dateFrom?: number | undefined;
        dateTo?: number | undefined;
        entity?: QueryParamEntity | undefined;
        entityIds?: string | undefined;
        limit?: number | undefined;
        offset?: number | undefined;
        sort?: GetCrmNotesQueryParamSort | undefined;
    };

    export const inboundSchema: z.ZodType<GetCrmNotesRequest, z.ZodTypeDef, Inbound> = z
        .object({
            dateFrom: z.number().int().optional(),
            dateTo: z.number().int().optional(),
            entity: QueryParamEntity$.optional(),
            entityIds: z.string().optional(),
            limit: z.number().int().default(50),
            offset: z.number().int().optional(),
            sort: GetCrmNotesQueryParamSort$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.dateFrom === undefined ? null : { dateFrom: v.dateFrom }),
                ...(v.dateTo === undefined ? null : { dateTo: v.dateTo }),
                ...(v.entity === undefined ? null : { entity: v.entity }),
                ...(v.entityIds === undefined ? null : { entityIds: v.entityIds }),
                limit: v.limit,
                ...(v.offset === undefined ? null : { offset: v.offset }),
                ...(v.sort === undefined ? null : { sort: v.sort }),
            };
        });

    export type Outbound = {
        dateFrom?: number | undefined;
        dateTo?: number | undefined;
        entity?: QueryParamEntity | undefined;
        entityIds?: string | undefined;
        limit: number;
        offset?: number | undefined;
        sort?: GetCrmNotesQueryParamSort | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCrmNotesRequest> = z
        .object({
            dateFrom: z.number().int().optional(),
            dateTo: z.number().int().optional(),
            entity: QueryParamEntity$.optional(),
            entityIds: z.string().optional(),
            limit: z.number().int().default(50),
            offset: z.number().int().optional(),
            sort: GetCrmNotesQueryParamSort$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.dateFrom === undefined ? null : { dateFrom: v.dateFrom }),
                ...(v.dateTo === undefined ? null : { dateTo: v.dateTo }),
                ...(v.entity === undefined ? null : { entity: v.entity }),
                ...(v.entityIds === undefined ? null : { entityIds: v.entityIds }),
                limit: v.limit,
                ...(v.offset === undefined ? null : { offset: v.offset }),
                ...(v.sort === undefined ? null : { sort: v.sort }),
            };
        });
}

/** @internal */
export namespace GetCrmNotesResponse$ {
    export type Inbound = {
        ContentType: string;
        NoteList?: Array<components.Note$.Inbound> | undefined;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<GetCrmNotesResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            NoteList: z.array(components.Note$.inboundSchema).optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.NoteList === undefined ? null : { noteList: v.NoteList }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        NoteList?: Array<components.Note$.Outbound> | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCrmNotesResponse> = z
        .object({
            contentType: z.string(),
            noteList: z.array(components.Note$.outboundSchema).optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.noteList === undefined ? null : { NoteList: v.noteList }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
