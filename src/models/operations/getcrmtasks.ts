/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import * as z from "zod";

/**
 * Filter by date
 */
export enum FilterDate {
    Overdue = "overdue",
    Today = "today",
    Tomorrow = "tomorrow",
    Week = "week",
    Range = "range",
}

/**
 * Filter by task status
 */
export enum FilterStatus {
    Done = "done",
    Undone = "undone",
}

/**
 * Sort the results in the ascending/descending order. Default order is **descending** by creation if `sort` is not passed
 */
export enum GetCrmTasksQueryParamSort {
    Asc = "asc",
    Desc = "desc",
}

export type GetCrmTasksRequest = {
    /**
     * dateFrom to date range filter type (timestamp in milliseconds)
     */
    dateFrom?: number | undefined;
    /**
     * dateTo to date range filter type (timestamp in milliseconds)
     */
    dateTo?: number | undefined;
    /**
     * Filter by assignTo id
     */
    filterAssignTo?: string | undefined;
    /**
     * Filter by companies ids
     */
    filterCompanies?: string | undefined;
    /**
     * Filter by contact ids
     */
    filterContacts?: string | undefined;
    /**
     * Filter by date
     */
    filterDate?: FilterDate | undefined;
    /**
     * Filter by deals ids
     */
    filterDeals?: string | undefined;
    /**
     * Filter by task status
     */
    filterStatus?: FilterStatus | undefined;
    /**
     * Filter by task type (ID)
     */
    filterType?: string | undefined;
    /**
     * Number of documents per page
     */
    limit?: number | undefined;
    /**
     * Index of the first document of the page
     */
    offset?: number | undefined;
    /**
     * Sort the results in the ascending/descending order. Default order is **descending** by creation if `sort` is not passed
     */
    sort?: GetCrmTasksQueryParamSort | undefined;
    /**
     * The field used to sort field names.
     */
    sortBy?: string | undefined;
};

export type GetCrmTasksResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Returns task list with filters
     */
    taskList?: components.TaskList | undefined;
};

/** @internal */
export const FilterDate$ = z.nativeEnum(FilterDate);

/** @internal */
export const FilterStatus$ = z.nativeEnum(FilterStatus);

/** @internal */
export const GetCrmTasksQueryParamSort$ = z.nativeEnum(GetCrmTasksQueryParamSort);

/** @internal */
export namespace GetCrmTasksRequest$ {
    export type Inbound = {
        dateFrom?: number | undefined;
        dateTo?: number | undefined;
        "filter[assignTo]"?: string | undefined;
        "filter[companies]"?: string | undefined;
        "filter[contacts]"?: string | undefined;
        "filter[date]"?: FilterDate | undefined;
        "filter[deals]"?: string | undefined;
        "filter[status]"?: FilterStatus | undefined;
        "filter[type]"?: string | undefined;
        limit?: number | undefined;
        offset?: number | undefined;
        sort?: GetCrmTasksQueryParamSort | undefined;
        sortBy?: string | undefined;
    };

    export const inboundSchema: z.ZodType<GetCrmTasksRequest, z.ZodTypeDef, Inbound> = z
        .object({
            dateFrom: z.number().int().optional(),
            dateTo: z.number().int().optional(),
            "filter[assignTo]": z.string().optional(),
            "filter[companies]": z.string().optional(),
            "filter[contacts]": z.string().optional(),
            "filter[date]": FilterDate$.optional(),
            "filter[deals]": z.string().optional(),
            "filter[status]": FilterStatus$.optional(),
            "filter[type]": z.string().optional(),
            limit: z.number().int().default(50),
            offset: z.number().int().optional(),
            sort: GetCrmTasksQueryParamSort$.optional(),
            sortBy: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.dateFrom === undefined ? null : { dateFrom: v.dateFrom }),
                ...(v.dateTo === undefined ? null : { dateTo: v.dateTo }),
                ...(v["filter[assignTo]"] === undefined
                    ? null
                    : { filterAssignTo: v["filter[assignTo]"] }),
                ...(v["filter[companies]"] === undefined
                    ? null
                    : { filterCompanies: v["filter[companies]"] }),
                ...(v["filter[contacts]"] === undefined
                    ? null
                    : { filterContacts: v["filter[contacts]"] }),
                ...(v["filter[date]"] === undefined ? null : { filterDate: v["filter[date]"] }),
                ...(v["filter[deals]"] === undefined ? null : { filterDeals: v["filter[deals]"] }),
                ...(v["filter[status]"] === undefined
                    ? null
                    : { filterStatus: v["filter[status]"] }),
                ...(v["filter[type]"] === undefined ? null : { filterType: v["filter[type]"] }),
                limit: v.limit,
                ...(v.offset === undefined ? null : { offset: v.offset }),
                ...(v.sort === undefined ? null : { sort: v.sort }),
                ...(v.sortBy === undefined ? null : { sortBy: v.sortBy }),
            };
        });

    export type Outbound = {
        dateFrom?: number | undefined;
        dateTo?: number | undefined;
        "filter[assignTo]"?: string | undefined;
        "filter[companies]"?: string | undefined;
        "filter[contacts]"?: string | undefined;
        "filter[date]"?: FilterDate | undefined;
        "filter[deals]"?: string | undefined;
        "filter[status]"?: FilterStatus | undefined;
        "filter[type]"?: string | undefined;
        limit: number;
        offset?: number | undefined;
        sort?: GetCrmTasksQueryParamSort | undefined;
        sortBy?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCrmTasksRequest> = z
        .object({
            dateFrom: z.number().int().optional(),
            dateTo: z.number().int().optional(),
            filterAssignTo: z.string().optional(),
            filterCompanies: z.string().optional(),
            filterContacts: z.string().optional(),
            filterDate: FilterDate$.optional(),
            filterDeals: z.string().optional(),
            filterStatus: FilterStatus$.optional(),
            filterType: z.string().optional(),
            limit: z.number().int().default(50),
            offset: z.number().int().optional(),
            sort: GetCrmTasksQueryParamSort$.optional(),
            sortBy: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.dateFrom === undefined ? null : { dateFrom: v.dateFrom }),
                ...(v.dateTo === undefined ? null : { dateTo: v.dateTo }),
                ...(v.filterAssignTo === undefined
                    ? null
                    : { "filter[assignTo]": v.filterAssignTo }),
                ...(v.filterCompanies === undefined
                    ? null
                    : { "filter[companies]": v.filterCompanies }),
                ...(v.filterContacts === undefined
                    ? null
                    : { "filter[contacts]": v.filterContacts }),
                ...(v.filterDate === undefined ? null : { "filter[date]": v.filterDate }),
                ...(v.filterDeals === undefined ? null : { "filter[deals]": v.filterDeals }),
                ...(v.filterStatus === undefined ? null : { "filter[status]": v.filterStatus }),
                ...(v.filterType === undefined ? null : { "filter[type]": v.filterType }),
                limit: v.limit,
                ...(v.offset === undefined ? null : { offset: v.offset }),
                ...(v.sort === undefined ? null : { sort: v.sort }),
                ...(v.sortBy === undefined ? null : { sortBy: v.sortBy }),
            };
        });
}

/** @internal */
export namespace GetCrmTasksResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        TaskList?: components.TaskList$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetCrmTasksResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            TaskList: components.TaskList$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.TaskList === undefined ? null : { taskList: v.TaskList }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        TaskList?: components.TaskList$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCrmTasksResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            taskList: components.TaskList$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.taskList === undefined ? null : { TaskList: v.taskList }),
            };
        });
}
