/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

/**
 * Sort the results in the ascending/descending order of webhook creation
 */
export enum GetWebhooksQueryParamSort {
    Asc = "asc",
    Desc = "desc",
}

/**
 * Filter on webhook type
 */
export enum QueryParamType {
    Marketing = "marketing",
    Transactional = "transactional",
    Inbound = "inbound",
}

export type GetWebhooksRequest = {
    /**
     * Sort the results in the ascending/descending order of webhook creation
     */
    sort?: GetWebhooksQueryParamSort | undefined;
    /**
     * Filter on webhook type
     */
    type?: QueryParamType | undefined;
};

export type GetWebhooksResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Webhooks informations
     */
    getWebhooks?: components.GetWebhooks | undefined;
};

/** @internal */
export const GetWebhooksQueryParamSort$ = z.nativeEnum(GetWebhooksQueryParamSort);

/** @internal */
export const QueryParamType$ = z.nativeEnum(QueryParamType);

/** @internal */
export namespace GetWebhooksRequest$ {
    export type Inbound = {
        sort?: GetWebhooksQueryParamSort | undefined;
        type?: QueryParamType | undefined;
    };

    export const inboundSchema: z.ZodType<GetWebhooksRequest, z.ZodTypeDef, Inbound> = z
        .object({
            sort: GetWebhooksQueryParamSort$.default(GetWebhooksQueryParamSort.Desc),
            type: QueryParamType$.default(QueryParamType.Transactional),
        })
        .transform((v) => {
            return {
                ...(v.sort === undefined ? null : { sort: v.sort }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });

    export type Outbound = {
        sort: GetWebhooksQueryParamSort;
        type: QueryParamType;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetWebhooksRequest> = z
        .object({
            sort: GetWebhooksQueryParamSort$.default(GetWebhooksQueryParamSort.Desc),
            type: QueryParamType$.default(QueryParamType.Transactional),
        })
        .transform((v) => {
            return {
                sort: v.sort,
                type: v.type,
            };
        });
}

/** @internal */
export namespace GetWebhooksResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        getWebhooks?: components.GetWebhooks$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetWebhooksResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            getWebhooks: z.lazy(() => components.GetWebhooks$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.getWebhooks === undefined ? null : { getWebhooks: v.getWebhooks }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        getWebhooks?: components.GetWebhooks$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetWebhooksResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            getWebhooks: z.lazy(() => components.GetWebhooks$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.getWebhooks === undefined ? null : { getWebhooks: v.getWebhooks }),
            };
        });
}
