/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

/**
 * Attributes for deal creation
 *
 * @remarks
 *
 * If you want to create a deal on a specific pipeline and stage you can use the following attributes `pipeline` and `deal_stage`.
 *
 * Pipeline and deal_stage are ids you can fetch using this endpoint `/crm/pipeline/details/{pipelineID}`
 *
 */
export type PostCrmDealsAttributes = {};

/**
 * Deal create data.
 */
export type PostCrmDealsRequestBody = {
    /**
     * Attributes for deal creation
     *
     * @remarks
     *
     * If you want to create a deal on a specific pipeline and stage you can use the following attributes `pipeline` and `deal_stage`.
     *
     * Pipeline and deal_stage are ids you can fetch using this endpoint `/crm/pipeline/details/{pipelineID}`
     *
     */
    attributes?: PostCrmDealsAttributes | undefined;
    /**
     * Name of deal
     */
    name: string;
};

/**
 * Created deal id
 */
export type PostCrmDealsResponseBody = {
    /**
     * Unique deal id
     */
    id: string;
};

export type PostCrmDealsResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Created new Deal
     */
    object?: PostCrmDealsResponseBody | undefined;
};

/** @internal */
export namespace PostCrmDealsAttributes$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PostCrmDealsAttributes, z.ZodTypeDef, Inbound> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostCrmDealsAttributes> =
        z.object({});
}

/** @internal */
export namespace PostCrmDealsRequestBody$ {
    export type Inbound = {
        attributes?: PostCrmDealsAttributes$.Inbound | undefined;
        name: string;
    };

    export const inboundSchema: z.ZodType<PostCrmDealsRequestBody, z.ZodTypeDef, Inbound> = z
        .object({
            attributes: z.lazy(() => PostCrmDealsAttributes$.inboundSchema).optional(),
            name: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.attributes === undefined ? null : { attributes: v.attributes }),
                name: v.name,
            };
        });

    export type Outbound = {
        attributes?: PostCrmDealsAttributes$.Outbound | undefined;
        name: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostCrmDealsRequestBody> = z
        .object({
            attributes: z.lazy(() => PostCrmDealsAttributes$.outboundSchema).optional(),
            name: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.attributes === undefined ? null : { attributes: v.attributes }),
                name: v.name,
            };
        });
}

/** @internal */
export namespace PostCrmDealsResponseBody$ {
    export type Inbound = {
        id: string;
    };

    export const inboundSchema: z.ZodType<PostCrmDealsResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string(),
        })
        .transform((v) => {
            return {
                id: v.id,
            };
        });

    export type Outbound = {
        id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostCrmDealsResponseBody> = z
        .object({
            id: z.string(),
        })
        .transform((v) => {
            return {
                id: v.id,
            };
        });
}

/** @internal */
export namespace PostCrmDealsResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: PostCrmDealsResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<PostCrmDealsResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => PostCrmDealsResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: PostCrmDealsResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostCrmDealsResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => PostCrmDealsResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
