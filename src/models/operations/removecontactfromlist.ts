/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import { z } from "zod";

/**
 * Emails adresses OR IDs of the contacts OR 'all' true
 */
export type RemoveContactFromListRequestBody =
    | components.RemoveContactFromListByEmails
    | components.RemoveContactFromListByIDs
    | components.RemoveContactFromListByAll;

export type RemoveContactFromListRequest = {
    /**
     * Emails adresses OR IDs of the contacts OR 'all' true
     */
    requestBody:
        | components.RemoveContactFromListByEmails
        | components.RemoveContactFromListByIDs
        | components.RemoveContactFromListByAll;
    /**
     * Id of the list
     */
    listId: number;
};

export type RemoveContactFromListResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * All contacts have been removed successfully from the list with details of failed ones
     */
    postContactInfo?: components.PostContactInfo | undefined;
};

/** @internal */
export namespace RemoveContactFromListRequestBody$ {
    export type Inbound =
        | components.RemoveContactFromListByEmails$.Inbound
        | components.RemoveContactFromListByIDs$.Inbound
        | components.RemoveContactFromListByAll$.Inbound;

    export type Outbound =
        | components.RemoveContactFromListByEmails$.Outbound
        | components.RemoveContactFromListByIDs$.Outbound
        | components.RemoveContactFromListByAll$.Outbound;

    export const inboundSchema: z.ZodType<RemoveContactFromListRequestBody, z.ZodTypeDef, Inbound> =
        z.union([
            components.RemoveContactFromListByEmails$.inboundSchema,
            components.RemoveContactFromListByIDs$.inboundSchema,
            components.RemoveContactFromListByAll$.inboundSchema,
        ]);

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RemoveContactFromListRequestBody
    > = z.union([
        components.RemoveContactFromListByEmails$.outboundSchema,
        components.RemoveContactFromListByIDs$.outboundSchema,
        components.RemoveContactFromListByAll$.outboundSchema,
    ]);
}

/** @internal */
export namespace RemoveContactFromListRequest$ {
    export type Inbound = {
        RequestBody:
            | components.RemoveContactFromListByEmails$.Inbound
            | components.RemoveContactFromListByIDs$.Inbound
            | components.RemoveContactFromListByAll$.Inbound;
        listId: number;
    };

    export const inboundSchema: z.ZodType<RemoveContactFromListRequest, z.ZodTypeDef, Inbound> = z
        .object({
            RequestBody: z.union([
                components.RemoveContactFromListByEmails$.inboundSchema,
                components.RemoveContactFromListByIDs$.inboundSchema,
                components.RemoveContactFromListByAll$.inboundSchema,
            ]),
            listId: z.number().int(),
        })
        .transform((v) => {
            return {
                requestBody: v.RequestBody,
                listId: v.listId,
            };
        });

    export type Outbound = {
        RequestBody:
            | components.RemoveContactFromListByEmails$.Outbound
            | components.RemoveContactFromListByIDs$.Outbound
            | components.RemoveContactFromListByAll$.Outbound;
        listId: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RemoveContactFromListRequest> = z
        .object({
            requestBody: z.union([
                components.RemoveContactFromListByEmails$.outboundSchema,
                components.RemoveContactFromListByIDs$.outboundSchema,
                components.RemoveContactFromListByAll$.outboundSchema,
            ]),
            listId: z.number().int(),
        })
        .transform((v) => {
            return {
                RequestBody: v.requestBody,
                listId: v.listId,
            };
        });
}

/** @internal */
export namespace RemoveContactFromListResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        postContactInfo?: components.PostContactInfo$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<RemoveContactFromListResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            postContactInfo: components.PostContactInfo$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.postContactInfo === undefined
                    ? null
                    : { postContactInfo: v.postContactInfo }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        postContactInfo?: components.PostContactInfo$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RemoveContactFromListResponse> =
        z
            .object({
                contentType: z.string(),
                statusCode: z.number().int(),
                rawResponse: z.instanceof(Response).transform(() => {
                    throw new Error("Response cannot be serialized");
                }),
                postContactInfo: components.PostContactInfo$.outboundSchema.optional(),
            })
            .transform((v) => {
                return {
                    ContentType: v.contentType,
                    StatusCode: v.statusCode,
                    RawResponse: v.rawResponse,
                    ...(v.postContactInfo === undefined
                        ? null
                        : { postContactInfo: v.postContactInfo }),
                };
            });
}
