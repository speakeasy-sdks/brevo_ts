/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type DeleteScheduledEmailByIdRequest = {
    /**
     * The `batchId` of scheduled emails batch (Should be a valid UUIDv4) or the `messageId` of scheduled email.
     */
    identifier: string;
};

export type DeleteScheduledEmailByIdResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace DeleteScheduledEmailByIdRequest$ {
    export type Inbound = {
        identifier: string;
    };

    export const inboundSchema: z.ZodType<DeleteScheduledEmailByIdRequest, z.ZodTypeDef, Inbound> =
        z
            .object({
                identifier: z.string(),
            })
            .transform((v) => {
                return {
                    identifier: v.identifier,
                };
            });

    export type Outbound = {
        identifier: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        DeleteScheduledEmailByIdRequest
    > = z
        .object({
            identifier: z.string(),
        })
        .transform((v) => {
            return {
                identifier: v.identifier,
            };
        });
}

/** @internal */
export namespace DeleteScheduledEmailByIdResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<DeleteScheduledEmailByIdResponse, z.ZodTypeDef, Inbound> =
        z
            .object({
                ContentType: z.string(),
                StatusCode: z.number().int(),
                RawResponse: z.instanceof(Response),
            })
            .transform((v) => {
                return {
                    contentType: v.ContentType,
                    statusCode: v.StatusCode,
                    rawResponse: v.RawResponse,
                };
            });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        DeleteScheduledEmailByIdResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
