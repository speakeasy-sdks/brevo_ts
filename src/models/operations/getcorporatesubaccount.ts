/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type GetCorporateSubAccountRequest = {
    /**
     * Number of sub-accounts to be displayed on each page
     */
    limit: number;
    /**
     * Index of the first sub-account in the page
     */
    offset: number;
};

export type GetCorporateSubAccountResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Sub-accounts list
     */
    subAccountsResponse?: components.SubAccountsResponse | undefined;
};

/** @internal */
export namespace GetCorporateSubAccountRequest$ {
    export type Inbound = {
        limit: number;
        offset: number;
    };

    export const inboundSchema: z.ZodType<GetCorporateSubAccountRequest, z.ZodTypeDef, Inbound> = z
        .object({
            limit: z.number().int(),
            offset: z.number().int(),
        })
        .transform((v) => {
            return {
                limit: v.limit,
                offset: v.offset,
            };
        });

    export type Outbound = {
        limit: number;
        offset: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCorporateSubAccountRequest> =
        z
            .object({
                limit: z.number().int(),
                offset: z.number().int(),
            })
            .transform((v) => {
                return {
                    limit: v.limit,
                    offset: v.offset,
                };
            });
}

/** @internal */
export namespace GetCorporateSubAccountResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        subAccountsResponse?: components.SubAccountsResponse$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetCorporateSubAccountResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            subAccountsResponse: components.SubAccountsResponse$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.subAccountsResponse === undefined
                    ? null
                    : { subAccountsResponse: v.subAccountsResponse }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        subAccountsResponse?: components.SubAccountsResponse$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCorporateSubAccountResponse> =
        z
            .object({
                contentType: z.string(),
                statusCode: z.number().int(),
                rawResponse: z.instanceof(Response).transform(() => {
                    throw new Error("Response cannot be serialized");
                }),
                subAccountsResponse: components.SubAccountsResponse$.outboundSchema.optional(),
            })
            .transform((v) => {
                return {
                    ContentType: v.contentType,
                    StatusCode: v.statusCode,
                    RawResponse: v.rawResponse,
                    ...(v.subAccountsResponse === undefined
                        ? null
                        : { subAccountsResponse: v.subAccountsResponse }),
                };
            });
}
