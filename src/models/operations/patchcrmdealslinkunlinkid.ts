/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

/**
 * Linked / Unlinked contacts and companies ids.
 */
export type PatchCrmDealsLinkUnlinkIdRequestBody = {
    /**
     * Company ids to be linked with deal
     */
    linkCompanyIds?: Array<string> | undefined;
    /**
     * Contact ids for contacts to be linked with deal
     */
    linkContactIds?: Array<number> | undefined;
    /**
     * Company ids to be unlinked from deal
     */
    unlinkCompanyIds?: Array<string> | undefined;
    /**
     * Contact ids for contacts to be unlinked from deal
     */
    unlinkContactIds?: Array<number> | undefined;
};

export type PatchCrmDealsLinkUnlinkIdRequest = {
    /**
     * Linked / Unlinked contacts and companies ids.
     */
    requestBody: PatchCrmDealsLinkUnlinkIdRequestBody;
    id: string;
};

export type PatchCrmDealsLinkUnlinkIdResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace PatchCrmDealsLinkUnlinkIdRequestBody$ {
    export type Inbound = {
        linkCompanyIds?: Array<string> | undefined;
        linkContactIds?: Array<number> | undefined;
        unlinkCompanyIds?: Array<string> | undefined;
        unlinkContactIds?: Array<number> | undefined;
    };

    export const inboundSchema: z.ZodType<
        PatchCrmDealsLinkUnlinkIdRequestBody,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            linkCompanyIds: z.array(z.string()).optional(),
            linkContactIds: z.array(z.number().int()).optional(),
            unlinkCompanyIds: z.array(z.string()).optional(),
            unlinkContactIds: z.array(z.number().int()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.linkCompanyIds === undefined ? null : { linkCompanyIds: v.linkCompanyIds }),
                ...(v.linkContactIds === undefined ? null : { linkContactIds: v.linkContactIds }),
                ...(v.unlinkCompanyIds === undefined
                    ? null
                    : { unlinkCompanyIds: v.unlinkCompanyIds }),
                ...(v.unlinkContactIds === undefined
                    ? null
                    : { unlinkContactIds: v.unlinkContactIds }),
            };
        });

    export type Outbound = {
        linkCompanyIds?: Array<string> | undefined;
        linkContactIds?: Array<number> | undefined;
        unlinkCompanyIds?: Array<string> | undefined;
        unlinkContactIds?: Array<number> | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchCrmDealsLinkUnlinkIdRequestBody
    > = z
        .object({
            linkCompanyIds: z.array(z.string()).optional(),
            linkContactIds: z.array(z.number().int()).optional(),
            unlinkCompanyIds: z.array(z.string()).optional(),
            unlinkContactIds: z.array(z.number().int()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.linkCompanyIds === undefined ? null : { linkCompanyIds: v.linkCompanyIds }),
                ...(v.linkContactIds === undefined ? null : { linkContactIds: v.linkContactIds }),
                ...(v.unlinkCompanyIds === undefined
                    ? null
                    : { unlinkCompanyIds: v.unlinkCompanyIds }),
                ...(v.unlinkContactIds === undefined
                    ? null
                    : { unlinkContactIds: v.unlinkContactIds }),
            };
        });
}

/** @internal */
export namespace PatchCrmDealsLinkUnlinkIdRequest$ {
    export type Inbound = {
        RequestBody: PatchCrmDealsLinkUnlinkIdRequestBody$.Inbound;
        id: string;
    };

    export const inboundSchema: z.ZodType<PatchCrmDealsLinkUnlinkIdRequest, z.ZodTypeDef, Inbound> =
        z
            .object({
                RequestBody: z.lazy(() => PatchCrmDealsLinkUnlinkIdRequestBody$.inboundSchema),
                id: z.string(),
            })
            .transform((v) => {
                return {
                    requestBody: v.RequestBody,
                    id: v.id,
                };
            });

    export type Outbound = {
        RequestBody: PatchCrmDealsLinkUnlinkIdRequestBody$.Outbound;
        id: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchCrmDealsLinkUnlinkIdRequest
    > = z
        .object({
            requestBody: z.lazy(() => PatchCrmDealsLinkUnlinkIdRequestBody$.outboundSchema),
            id: z.string(),
        })
        .transform((v) => {
            return {
                RequestBody: v.requestBody,
                id: v.id,
            };
        });
}

/** @internal */
export namespace PatchCrmDealsLinkUnlinkIdResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<
        PatchCrmDealsLinkUnlinkIdResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchCrmDealsLinkUnlinkIdResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
