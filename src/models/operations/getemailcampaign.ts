/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import * as z from "zod";

/**
 * Filter on the type of statistics required. Example **globalStats** value will only fetch globalStats info of the campaign in returned response.
 */
export enum Statistics {
    GlobalStats = "globalStats",
    LinksStats = "linksStats",
    StatsByDomain = "statsByDomain",
    StatsByDevice = "statsByDevice",
    StatsByBrowser = "statsByBrowser",
}

export type GetEmailCampaignRequest = {
    /**
     * Id of the campaign
     */
    campaignId: number;
    /**
     * Filter on the type of statistics required. Example **globalStats** value will only fetch globalStats info of the campaign in returned response.
     */
    statistics?: Statistics | undefined;
};

export type GetEmailCampaignResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Email campaign informations
     */
    getEmailCampaign?: components.GetEmailCampaign | undefined;
};

/** @internal */
export const Statistics$ = z.nativeEnum(Statistics);

/** @internal */
export namespace GetEmailCampaignRequest$ {
    export type Inbound = {
        campaignId: number;
        statistics?: Statistics | undefined;
    };

    export const inboundSchema: z.ZodType<GetEmailCampaignRequest, z.ZodTypeDef, Inbound> = z
        .object({
            campaignId: z.number().int(),
            statistics: Statistics$.optional(),
        })
        .transform((v) => {
            return {
                campaignId: v.campaignId,
                ...(v.statistics === undefined ? null : { statistics: v.statistics }),
            };
        });

    export type Outbound = {
        campaignId: number;
        statistics?: Statistics | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetEmailCampaignRequest> = z
        .object({
            campaignId: z.number().int(),
            statistics: Statistics$.optional(),
        })
        .transform((v) => {
            return {
                campaignId: v.campaignId,
                ...(v.statistics === undefined ? null : { statistics: v.statistics }),
            };
        });
}

/** @internal */
export namespace GetEmailCampaignResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        getEmailCampaign?: components.GetEmailCampaign$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetEmailCampaignResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            getEmailCampaign: z.lazy(() => components.GetEmailCampaign$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.getEmailCampaign === undefined
                    ? null
                    : { getEmailCampaign: v.getEmailCampaign }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        getEmailCampaign?: components.GetEmailCampaign$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetEmailCampaignResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            getEmailCampaign: z.lazy(() => components.GetEmailCampaign$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.getEmailCampaign === undefined
                    ? null
                    : { getEmailCampaign: v.getEmailCampaign }),
            };
        });
}
