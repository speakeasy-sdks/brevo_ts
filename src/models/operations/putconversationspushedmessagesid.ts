/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import { z } from "zod";

export type PutConversationsPushedMessagesIdRequestBody = {
    /**
     * edited message text
     */
    text: string;
};

export type PutConversationsPushedMessagesIdRequest = {
    requestBody: PutConversationsPushedMessagesIdRequestBody;
    /**
     * ID of the message
     */
    id: string;
};

export type PutConversationsPushedMessagesIdResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * Updated message is returned as a response
     */
    conversationsMessage?: components.ConversationsMessage | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace PutConversationsPushedMessagesIdRequestBody$ {
    export type Inbound = {
        text: string;
    };

    export const inboundSchema: z.ZodType<
        PutConversationsPushedMessagesIdRequestBody,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            text: z.string(),
        })
        .transform((v) => {
            return {
                text: v.text,
            };
        });

    export type Outbound = {
        text: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PutConversationsPushedMessagesIdRequestBody
    > = z
        .object({
            text: z.string(),
        })
        .transform((v) => {
            return {
                text: v.text,
            };
        });
}

/** @internal */
export namespace PutConversationsPushedMessagesIdRequest$ {
    export type Inbound = {
        RequestBody: PutConversationsPushedMessagesIdRequestBody$.Inbound;
        id: string;
    };

    export const inboundSchema: z.ZodType<
        PutConversationsPushedMessagesIdRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            RequestBody: z.lazy(() => PutConversationsPushedMessagesIdRequestBody$.inboundSchema),
            id: z.string(),
        })
        .transform((v) => {
            return {
                requestBody: v.RequestBody,
                id: v.id,
            };
        });

    export type Outbound = {
        RequestBody: PutConversationsPushedMessagesIdRequestBody$.Outbound;
        id: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PutConversationsPushedMessagesIdRequest
    > = z
        .object({
            requestBody: z.lazy(() => PutConversationsPushedMessagesIdRequestBody$.outboundSchema),
            id: z.string(),
        })
        .transform((v) => {
            return {
                RequestBody: v.requestBody,
                id: v.id,
            };
        });
}

/** @internal */
export namespace PutConversationsPushedMessagesIdResponse$ {
    export type Inbound = {
        ContentType: string;
        ConversationsMessage?: components.ConversationsMessage$.Inbound | undefined;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<
        PutConversationsPushedMessagesIdResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            ConversationsMessage: components.ConversationsMessage$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.ConversationsMessage === undefined
                    ? null
                    : { conversationsMessage: v.ConversationsMessage }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        ConversationsMessage?: components.ConversationsMessage$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PutConversationsPushedMessagesIdResponse
    > = z
        .object({
            contentType: z.string(),
            conversationsMessage: components.ConversationsMessage$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.conversationsMessage === undefined
                    ? null
                    : { ConversationsMessage: v.conversationsMessage }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
