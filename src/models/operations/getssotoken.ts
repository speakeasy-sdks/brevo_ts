/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import * as z from "zod";

export type GetSsoTokenRequest = {
    /**
     * Either auth key or id of reseller's child
     */
    childIdentifier: string;
};

export type GetSsoTokenResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Session token
     */
    getSsoToken?: components.GetSsoToken | undefined;
};

/** @internal */
export namespace GetSsoTokenRequest$ {
    export type Inbound = {
        childIdentifier: string;
    };

    export const inboundSchema: z.ZodType<GetSsoTokenRequest, z.ZodTypeDef, Inbound> = z
        .object({
            childIdentifier: z.string(),
        })
        .transform((v) => {
            return {
                childIdentifier: v.childIdentifier,
            };
        });

    export type Outbound = {
        childIdentifier: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetSsoTokenRequest> = z
        .object({
            childIdentifier: z.string(),
        })
        .transform((v) => {
            return {
                childIdentifier: v.childIdentifier,
            };
        });
}

/** @internal */
export namespace GetSsoTokenResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        getSsoToken?: components.GetSsoToken$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetSsoTokenResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            getSsoToken: z.lazy(() => components.GetSsoToken$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.getSsoToken === undefined ? null : { getSsoToken: v.getSsoToken }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        getSsoToken?: components.GetSsoToken$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetSsoTokenResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            getSsoToken: z.lazy(() => components.GetSsoToken$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.getSsoToken === undefined ? null : { getSsoToken: v.getSsoToken }),
            };
        });
}
