/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

/**
 * Sort the results in the ascending/descending order. Default order is **descending** by creation if `sort` is not passed
 */
export enum GetCrmDealsQueryParamSort {
    Asc = "asc",
    Desc = "desc",
}

export type GetCrmDealsRequest = {
    /**
     * Filter by attributes. If you have filter for owner on your side please send it as `filters[attributes.deal_owner]`.
     */
    filtersAttributesDealName?: string | undefined;
    /**
     * Filter by linked companies ids
     */
    filtersLinkedCompaniesIds?: string | undefined;
    /**
     * Filter by linked companies ids
     */
    filtersLinkedContactsIds?: string | undefined;
    /**
     * Number of documents per page
     */
    limit?: number | undefined;
    /**
     * Index of the first document of the page
     */
    offset?: number | undefined;
    /**
     * Sort the results in the ascending/descending order. Default order is **descending** by creation if `sort` is not passed
     */
    sort?: GetCrmDealsQueryParamSort | undefined;
};

export type GetCrmDealsResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * Returns deals list with filters
     */
    dealsList?: components.DealsList | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export const GetCrmDealsQueryParamSort$ = z.nativeEnum(GetCrmDealsQueryParamSort);

/** @internal */
export namespace GetCrmDealsRequest$ {
    export type Inbound = {
        "filters[attributes.deal_name]"?: string | undefined;
        "filters[linkedCompaniesIds]"?: string | undefined;
        "filters[linkedContactsIds]"?: string | undefined;
        limit?: number | undefined;
        offset?: number | undefined;
        sort?: GetCrmDealsQueryParamSort | undefined;
    };

    export const inboundSchema: z.ZodType<GetCrmDealsRequest, z.ZodTypeDef, Inbound> = z
        .object({
            "filters[attributes.deal_name]": z.string().optional(),
            "filters[linkedCompaniesIds]": z.string().optional(),
            "filters[linkedContactsIds]": z.string().optional(),
            limit: z.number().int().optional(),
            offset: z.number().int().optional(),
            sort: GetCrmDealsQueryParamSort$.optional(),
        })
        .transform((v) => {
            return {
                ...(v["filters[attributes.deal_name]"] === undefined
                    ? null
                    : { filtersAttributesDealName: v["filters[attributes.deal_name]"] }),
                ...(v["filters[linkedCompaniesIds]"] === undefined
                    ? null
                    : { filtersLinkedCompaniesIds: v["filters[linkedCompaniesIds]"] }),
                ...(v["filters[linkedContactsIds]"] === undefined
                    ? null
                    : { filtersLinkedContactsIds: v["filters[linkedContactsIds]"] }),
                ...(v.limit === undefined ? null : { limit: v.limit }),
                ...(v.offset === undefined ? null : { offset: v.offset }),
                ...(v.sort === undefined ? null : { sort: v.sort }),
            };
        });

    export type Outbound = {
        "filters[attributes.deal_name]"?: string | undefined;
        "filters[linkedCompaniesIds]"?: string | undefined;
        "filters[linkedContactsIds]"?: string | undefined;
        limit?: number | undefined;
        offset?: number | undefined;
        sort?: GetCrmDealsQueryParamSort | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCrmDealsRequest> = z
        .object({
            filtersAttributesDealName: z.string().optional(),
            filtersLinkedCompaniesIds: z.string().optional(),
            filtersLinkedContactsIds: z.string().optional(),
            limit: z.number().int().optional(),
            offset: z.number().int().optional(),
            sort: GetCrmDealsQueryParamSort$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.filtersAttributesDealName === undefined
                    ? null
                    : { "filters[attributes.deal_name]": v.filtersAttributesDealName }),
                ...(v.filtersLinkedCompaniesIds === undefined
                    ? null
                    : { "filters[linkedCompaniesIds]": v.filtersLinkedCompaniesIds }),
                ...(v.filtersLinkedContactsIds === undefined
                    ? null
                    : { "filters[linkedContactsIds]": v.filtersLinkedContactsIds }),
                ...(v.limit === undefined ? null : { limit: v.limit }),
                ...(v.offset === undefined ? null : { offset: v.offset }),
                ...(v.sort === undefined ? null : { sort: v.sort }),
            };
        });
}

/** @internal */
export namespace GetCrmDealsResponse$ {
    export type Inbound = {
        ContentType: string;
        DealsList?: components.DealsList$.Inbound | undefined;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<GetCrmDealsResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            DealsList: components.DealsList$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.DealsList === undefined ? null : { dealsList: v.DealsList }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        DealsList?: components.DealsList$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCrmDealsResponse> = z
        .object({
            contentType: z.string(),
            dealsList: components.DealsList$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.dealsList === undefined ? null : { DealsList: v.dealsList }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
