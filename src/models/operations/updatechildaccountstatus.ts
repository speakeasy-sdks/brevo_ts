/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type UpdateChildAccountStatusRequest = {
    /**
     * Either auth key or id of reseller's child
     */
    childIdentifier: string;
    /**
     * values to update in child account status
     */
    updateChildAccountStatus: components.UpdateChildAccountStatus;
};

export type UpdateChildAccountStatusResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace UpdateChildAccountStatusRequest$ {
    export type Inbound = {
        childIdentifier: string;
        updateChildAccountStatus: components.UpdateChildAccountStatus$.Inbound;
    };

    export const inboundSchema: z.ZodType<UpdateChildAccountStatusRequest, z.ZodTypeDef, Inbound> =
        z
            .object({
                childIdentifier: z.string(),
                updateChildAccountStatus: z.lazy(
                    () => components.UpdateChildAccountStatus$.inboundSchema
                ),
            })
            .transform((v) => {
                return {
                    childIdentifier: v.childIdentifier,
                    updateChildAccountStatus: v.updateChildAccountStatus,
                };
            });

    export type Outbound = {
        childIdentifier: string;
        updateChildAccountStatus: components.UpdateChildAccountStatus$.Outbound;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UpdateChildAccountStatusRequest
    > = z
        .object({
            childIdentifier: z.string(),
            updateChildAccountStatus: z.lazy(
                () => components.UpdateChildAccountStatus$.outboundSchema
            ),
        })
        .transform((v) => {
            return {
                childIdentifier: v.childIdentifier,
                updateChildAccountStatus: v.updateChildAccountStatus,
            };
        });
}

/** @internal */
export namespace UpdateChildAccountStatusResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<UpdateChildAccountStatusResponse, z.ZodTypeDef, Inbound> =
        z
            .object({
                ContentType: z.string(),
                StatusCode: z.number().int(),
                RawResponse: z.instanceof(Response),
            })
            .transform((v) => {
                return {
                    contentType: v.ContentType,
                    statusCode: v.StatusCode,
                    rawResponse: v.RawResponse,
                };
            });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UpdateChildAccountStatusResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
