/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import { z } from "zod";

export type GetContactInfoRequest = {
    /**
     * **Mandatory if startDate is used.** Ending date (YYYY-MM-DD) of the statistic events specific to campaigns. Must be greater than equal to startDate.
     *
     * @remarks
     *
     */
    endDate?: string | undefined;
    /**
     * Email (urlencoded) OR ID of the contact OR its SMS attribute value
     */
    identifier?: any | undefined;
    /**
     * **Mandatory if endDate is used.** Starting date (YYYY-MM-DD) of the statistic events specific to campaigns. Must be lower than equal to endDate
     *
     * @remarks
     *
     */
    startDate?: string | undefined;
};

export type GetContactInfoResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Contact informations
     */
    getExtendedContactDetails?: components.GetExtendedContactDetails | undefined;
};

/** @internal */
export namespace GetContactInfoRequest$ {
    export type Inbound = {
        endDate?: string | undefined;
        identifier?: any | undefined;
        startDate?: string | undefined;
    };

    export const inboundSchema: z.ZodType<GetContactInfoRequest, z.ZodTypeDef, Inbound> = z
        .object({
            endDate: z.string().optional(),
            identifier: z.any().optional(),
            startDate: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.endDate === undefined ? null : { endDate: v.endDate }),
                ...(v.identifier === undefined ? null : { identifier: v.identifier }),
                ...(v.startDate === undefined ? null : { startDate: v.startDate }),
            };
        });

    export type Outbound = {
        endDate?: string | undefined;
        identifier?: any | undefined;
        startDate?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetContactInfoRequest> = z
        .object({
            endDate: z.string().optional(),
            identifier: z.any().optional(),
            startDate: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.endDate === undefined ? null : { endDate: v.endDate }),
                ...(v.identifier === undefined ? null : { identifier: v.identifier }),
                ...(v.startDate === undefined ? null : { startDate: v.startDate }),
            };
        });
}

/** @internal */
export namespace GetContactInfoResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        getExtendedContactDetails?: components.GetExtendedContactDetails$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetContactInfoResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            getExtendedContactDetails:
                components.GetExtendedContactDetails$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.getExtendedContactDetails === undefined
                    ? null
                    : { getExtendedContactDetails: v.getExtendedContactDetails }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        getExtendedContactDetails?: components.GetExtendedContactDetails$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetContactInfoResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            getExtendedContactDetails:
                components.GetExtendedContactDetails$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.getExtendedContactDetails === undefined
                    ? null
                    : { getExtendedContactDetails: v.getExtendedContactDetails }),
            };
        });
}
