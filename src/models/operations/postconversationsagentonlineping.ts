/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type PostConversationsAgentOnlinePingRequestBody = {
    /**
     * agent email. When sending online pings from a standalone system, it’s hard to maintain a 1-to-1 relationship between the users of both systems. In this case, an agent can be specified by their email address. If there’s no agent with the specified email address in your Brevo organization, a dummy agent will be created automatically.
     */
    agentEmail?: any | undefined;
    /**
     * agent ID. It can be found on agent’s page or received <a href="https://developers.brevo.com/docs/conversations-webhooks">from a webhook</a>. Alternatively, you can use `agentEmail` + `agentName` + `receivedFrom` instead (all 3 fields required).
     */
    agentId?: any | undefined;
    /**
     * agent name
     */
    agentName?: any | undefined;
    /**
     * mark your messages to distinguish messages created by you from the others.
     */
    receivedFrom?: any | undefined;
};

export type PostConversationsAgentOnlinePingResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace PostConversationsAgentOnlinePingRequestBody$ {
    export type Inbound = {
        agentEmail?: any | undefined;
        agentId?: any | undefined;
        agentName?: any | undefined;
        receivedFrom?: any | undefined;
    };

    export const inboundSchema: z.ZodType<
        PostConversationsAgentOnlinePingRequestBody,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            agentEmail: z.any().optional(),
            agentId: z.any().optional(),
            agentName: z.any().optional(),
            receivedFrom: z.any().optional(),
        })
        .transform((v) => {
            return {
                ...(v.agentEmail === undefined ? null : { agentEmail: v.agentEmail }),
                ...(v.agentId === undefined ? null : { agentId: v.agentId }),
                ...(v.agentName === undefined ? null : { agentName: v.agentName }),
                ...(v.receivedFrom === undefined ? null : { receivedFrom: v.receivedFrom }),
            };
        });

    export type Outbound = {
        agentEmail?: any | undefined;
        agentId?: any | undefined;
        agentName?: any | undefined;
        receivedFrom?: any | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostConversationsAgentOnlinePingRequestBody
    > = z
        .object({
            agentEmail: z.any().optional(),
            agentId: z.any().optional(),
            agentName: z.any().optional(),
            receivedFrom: z.any().optional(),
        })
        .transform((v) => {
            return {
                ...(v.agentEmail === undefined ? null : { agentEmail: v.agentEmail }),
                ...(v.agentId === undefined ? null : { agentId: v.agentId }),
                ...(v.agentName === undefined ? null : { agentName: v.agentName }),
                ...(v.receivedFrom === undefined ? null : { receivedFrom: v.receivedFrom }),
            };
        });
}

/** @internal */
export namespace PostConversationsAgentOnlinePingResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<
        PostConversationsAgentOnlinePingResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostConversationsAgentOnlinePingResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
