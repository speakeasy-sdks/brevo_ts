/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import * as z from "zod";

export type GetBlockedDomainsResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * List of blocked domains
     */
    getBlockedDomains?: components.GetBlockedDomains | undefined;
};

/** @internal */
export namespace GetBlockedDomainsResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        getBlockedDomains?: components.GetBlockedDomains$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetBlockedDomainsResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            getBlockedDomains: z.lazy(() => components.GetBlockedDomains$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.getBlockedDomains === undefined
                    ? null
                    : { getBlockedDomains: v.getBlockedDomains }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        getBlockedDomains?: components.GetBlockedDomains$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetBlockedDomainsResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            getBlockedDomains: z
                .lazy(() => components.GetBlockedDomains$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.getBlockedDomains === undefined
                    ? null
                    : { getBlockedDomains: v.getBlockedDomains }),
            };
        });
}
