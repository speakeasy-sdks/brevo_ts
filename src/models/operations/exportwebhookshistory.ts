/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import { z } from "zod";

/**
 * Values to submit for webhooks history
 */
export type ExportWebhooksHistoryRequestBody = components.ExportWebhooksHistory;

export type ExportWebhooksHistoryResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Request accepted
     */
    createdProcessId?: components.CreatedProcessId | undefined;
};

/** @internal */
export namespace ExportWebhooksHistoryRequestBody$ {
    export type Inbound = components.ExportWebhooksHistory$.Inbound;

    export type Outbound = components.ExportWebhooksHistory$.Outbound;

    export const inboundSchema: z.ZodType<ExportWebhooksHistoryRequestBody, z.ZodTypeDef, Inbound> =
        z.lazy(() => components.ExportWebhooksHistory$.inboundSchema);

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ExportWebhooksHistoryRequestBody
    > = z.lazy(() => components.ExportWebhooksHistory$.outboundSchema);
}

/** @internal */
export namespace ExportWebhooksHistoryResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        createdProcessId?: components.CreatedProcessId$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<ExportWebhooksHistoryResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            createdProcessId: components.CreatedProcessId$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.createdProcessId === undefined
                    ? null
                    : { createdProcessId: v.createdProcessId }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        createdProcessId?: components.CreatedProcessId$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ExportWebhooksHistoryResponse> =
        z
            .object({
                contentType: z.string(),
                statusCode: z.number().int(),
                rawResponse: z.instanceof(Response).transform(() => {
                    throw new Error("Response cannot be serialized");
                }),
                createdProcessId: components.CreatedProcessId$.outboundSchema.optional(),
            })
            .transform((v) => {
                return {
                    ContentType: v.contentType,
                    StatusCode: v.statusCode,
                    RawResponse: v.rawResponse,
                    ...(v.createdProcessId === undefined
                        ? null
                        : { createdProcessId: v.createdProcessId }),
                };
            });
}
