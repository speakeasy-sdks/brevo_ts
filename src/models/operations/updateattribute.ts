/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import { z } from "zod";

/**
 * Category of the attribute
 */
export enum UpdateAttributePathParamAttributeCategory {
    Category = "category",
    Calculated = "calculated",
    Global = "global",
}

export type UpdateAttributeRequest = {
    /**
     * Category of the attribute
     */
    attributeCategory: UpdateAttributePathParamAttributeCategory;
    /**
     * Name of the existing attribute
     */
    attributeName: string;
    /**
     * Values to update an attribute
     */
    updateAttribute: components.UpdateAttribute;
};

export type UpdateAttributeResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export const UpdateAttributePathParamAttributeCategory$ = z.nativeEnum(
    UpdateAttributePathParamAttributeCategory
);

/** @internal */
export namespace UpdateAttributeRequest$ {
    export type Inbound = {
        attributeCategory: UpdateAttributePathParamAttributeCategory;
        attributeName: string;
        updateAttribute: components.UpdateAttribute$.Inbound;
    };

    export const inboundSchema: z.ZodType<UpdateAttributeRequest, z.ZodTypeDef, Inbound> = z
        .object({
            attributeCategory: UpdateAttributePathParamAttributeCategory$,
            attributeName: z.string(),
            updateAttribute: z.lazy(() => components.UpdateAttribute$.inboundSchema),
        })
        .transform((v) => {
            return {
                attributeCategory: v.attributeCategory,
                attributeName: v.attributeName,
                updateAttribute: v.updateAttribute,
            };
        });

    export type Outbound = {
        attributeCategory: UpdateAttributePathParamAttributeCategory;
        attributeName: string;
        updateAttribute: components.UpdateAttribute$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateAttributeRequest> = z
        .object({
            attributeCategory: UpdateAttributePathParamAttributeCategory$,
            attributeName: z.string(),
            updateAttribute: z.lazy(() => components.UpdateAttribute$.outboundSchema),
        })
        .transform((v) => {
            return {
                attributeCategory: v.attributeCategory,
                attributeName: v.attributeName,
                updateAttribute: v.updateAttribute,
            };
        });
}

/** @internal */
export namespace UpdateAttributeResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<UpdateAttributeResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateAttributeResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
