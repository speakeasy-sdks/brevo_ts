/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type UpdateWebhookRequest = {
    /**
     * Values to update a webhook
     */
    updateWebhook: components.UpdateWebhook;
    /**
     * Id of the webhook
     */
    webhookId: number;
};

export type UpdateWebhookResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace UpdateWebhookRequest$ {
    export type Inbound = {
        updateWebhook: components.UpdateWebhook$.Inbound;
        webhookId: number;
    };

    export const inboundSchema: z.ZodType<UpdateWebhookRequest, z.ZodTypeDef, Inbound> = z
        .object({
            updateWebhook: z.lazy(() => components.UpdateWebhook$.inboundSchema),
            webhookId: z.number().int(),
        })
        .transform((v) => {
            return {
                updateWebhook: v.updateWebhook,
                webhookId: v.webhookId,
            };
        });

    export type Outbound = {
        updateWebhook: components.UpdateWebhook$.Outbound;
        webhookId: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateWebhookRequest> = z
        .object({
            updateWebhook: z.lazy(() => components.UpdateWebhook$.outboundSchema),
            webhookId: z.number().int(),
        })
        .transform((v) => {
            return {
                updateWebhook: v.updateWebhook,
                webhookId: v.webhookId,
            };
        });
}

/** @internal */
export namespace UpdateWebhookResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<UpdateWebhookResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateWebhookResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
