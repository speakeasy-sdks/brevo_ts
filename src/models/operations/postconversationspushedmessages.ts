/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import { z } from "zod";

export type PostConversationsPushedMessagesRequestBody = {
    /**
     * agent ID. It can be found on agent’s page or received <a href="https://developers.brevo.com/docs/conversations-webhooks">from a webhook</a>.
     */
    agentId?: any | undefined;
    /**
     * group ID. It can be found on group’s page.
     */
    groupId?: any | undefined;
    /**
     * message text
     */
    text?: any | undefined;
    /**
     * visitor’s ID received <a href="https://developers.brevo.com/docs/conversations-webhooks">from a webhook</a> or generated by you to <a href="https://developers.brevo.com/docs/customize-the-widget#identifying-existing-users">bind existing user account to Conversations</a>
     */
    visitorId?: any | undefined;
};

export type PostConversationsPushedMessagesResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * Newly created message is returned as a response
     */
    conversationsMessage?: components.ConversationsMessage | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace PostConversationsPushedMessagesRequestBody$ {
    export type Inbound = {
        agentId?: any | undefined;
        groupId?: any | undefined;
        text?: any | undefined;
        visitorId?: any | undefined;
    };

    export const inboundSchema: z.ZodType<
        PostConversationsPushedMessagesRequestBody,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            agentId: z.any().optional(),
            groupId: z.any().optional(),
            text: z.any().optional(),
            visitorId: z.any().optional(),
        })
        .transform((v) => {
            return {
                ...(v.agentId === undefined ? null : { agentId: v.agentId }),
                ...(v.groupId === undefined ? null : { groupId: v.groupId }),
                ...(v.text === undefined ? null : { text: v.text }),
                ...(v.visitorId === undefined ? null : { visitorId: v.visitorId }),
            };
        });

    export type Outbound = {
        agentId?: any | undefined;
        groupId?: any | undefined;
        text?: any | undefined;
        visitorId?: any | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostConversationsPushedMessagesRequestBody
    > = z
        .object({
            agentId: z.any().optional(),
            groupId: z.any().optional(),
            text: z.any().optional(),
            visitorId: z.any().optional(),
        })
        .transform((v) => {
            return {
                ...(v.agentId === undefined ? null : { agentId: v.agentId }),
                ...(v.groupId === undefined ? null : { groupId: v.groupId }),
                ...(v.text === undefined ? null : { text: v.text }),
                ...(v.visitorId === undefined ? null : { visitorId: v.visitorId }),
            };
        });
}

/** @internal */
export namespace PostConversationsPushedMessagesResponse$ {
    export type Inbound = {
        ContentType: string;
        ConversationsMessage?: components.ConversationsMessage$.Inbound | undefined;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<
        PostConversationsPushedMessagesResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            ConversationsMessage: components.ConversationsMessage$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.ConversationsMessage === undefined
                    ? null
                    : { conversationsMessage: v.ConversationsMessage }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        ConversationsMessage?: components.ConversationsMessage$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostConversationsPushedMessagesResponse
    > = z
        .object({
            contentType: z.string(),
            conversationsMessage: components.ConversationsMessage$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.conversationsMessage === undefined
                    ? null
                    : { ConversationsMessage: v.conversationsMessage }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
