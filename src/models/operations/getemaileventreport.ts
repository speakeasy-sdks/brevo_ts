/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

/**
 * Filter the report for a specific event type
 */
export enum GetEmailEventReportQueryParamEvent {
    Bounces = "bounces",
    HardBounces = "hardBounces",
    SoftBounces = "softBounces",
    Delivered = "delivered",
    Spam = "spam",
    Requests = "requests",
    Opened = "opened",
    Clicks = "clicks",
    Invalid = "invalid",
    Deferred = "deferred",
    Blocked = "blocked",
    Unsubscribed = "unsubscribed",
    Error = "error",
    LoadedByProxy = "loadedByProxy",
}

/**
 * Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed
 */
export enum GetEmailEventReportQueryParamSort {
    Asc = "asc",
    Desc = "desc",
}

export type GetEmailEventReportRequest = {
    /**
     * Number of days in the past including today (positive integer). _Not compatible with 'startDate' and 'endDate'_
     *
     * @remarks
     *
     */
    days?: number | undefined;
    /**
     * Filter the report for a specific email addresses
     */
    email?: string | undefined;
    /**
     * **Mandatory if startDate is used.** Ending date of the report (YYYY-MM-DD). Must be greater than equal to startDate
     *
     * @remarks
     *
     */
    endDate?: string | undefined;
    /**
     * Filter the report for a specific event type
     */
    event?: GetEmailEventReportQueryParamEvent | undefined;
    /**
     * Number limitation for the result returned
     */
    limit?: number | undefined;
    /**
     * Filter on a specific message id
     */
    messageId?: string | undefined;
    /**
     * Beginning point in the list to retrieve from.
     */
    offset?: number | undefined;
    /**
     * Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed
     */
    sort?: GetEmailEventReportQueryParamSort | undefined;
    /**
     * **Mandatory if endDate is used.** Starting date of the report (YYYY-MM-DD). Must be lower than equal to endDate
     *
     * @remarks
     *
     */
    startDate?: string | undefined;
    /**
     * Filter the report for tags (serialized and urlencoded array)
     */
    tags?: string | undefined;
    /**
     * Filter on a specific template id
     */
    templateId?: number | undefined;
};

export type GetEmailEventReportResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Email events report informations
     */
    getEmailEventReport?: components.GetEmailEventReport | undefined;
};

/** @internal */
export const GetEmailEventReportQueryParamEvent$ = z.nativeEnum(GetEmailEventReportQueryParamEvent);

/** @internal */
export const GetEmailEventReportQueryParamSort$ = z.nativeEnum(GetEmailEventReportQueryParamSort);

/** @internal */
export namespace GetEmailEventReportRequest$ {
    export type Inbound = {
        days?: number | undefined;
        email?: string | undefined;
        endDate?: string | undefined;
        event?: GetEmailEventReportQueryParamEvent | undefined;
        limit?: number | undefined;
        messageId?: string | undefined;
        offset?: number | undefined;
        sort?: GetEmailEventReportQueryParamSort | undefined;
        startDate?: string | undefined;
        tags?: string | undefined;
        templateId?: number | undefined;
    };

    export const inboundSchema: z.ZodType<GetEmailEventReportRequest, z.ZodTypeDef, Inbound> = z
        .object({
            days: z.number().int().optional(),
            email: z.string().optional(),
            endDate: z.string().optional(),
            event: GetEmailEventReportQueryParamEvent$.optional(),
            limit: z.number().int().default(2500),
            messageId: z.string().optional(),
            offset: z.number().int().default(0),
            sort: GetEmailEventReportQueryParamSort$.default(
                GetEmailEventReportQueryParamSort.Desc
            ),
            startDate: z.string().optional(),
            tags: z.string().optional(),
            templateId: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.days === undefined ? null : { days: v.days }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.endDate === undefined ? null : { endDate: v.endDate }),
                ...(v.event === undefined ? null : { event: v.event }),
                limit: v.limit,
                ...(v.messageId === undefined ? null : { messageId: v.messageId }),
                offset: v.offset,
                sort: v.sort,
                ...(v.startDate === undefined ? null : { startDate: v.startDate }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.templateId === undefined ? null : { templateId: v.templateId }),
            };
        });

    export type Outbound = {
        days?: number | undefined;
        email?: string | undefined;
        endDate?: string | undefined;
        event?: GetEmailEventReportQueryParamEvent | undefined;
        limit: number;
        messageId?: string | undefined;
        offset: number;
        sort: GetEmailEventReportQueryParamSort;
        startDate?: string | undefined;
        tags?: string | undefined;
        templateId?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetEmailEventReportRequest> = z
        .object({
            days: z.number().int().optional(),
            email: z.string().optional(),
            endDate: z.string().optional(),
            event: GetEmailEventReportQueryParamEvent$.optional(),
            limit: z.number().int().default(2500),
            messageId: z.string().optional(),
            offset: z.number().int().default(0),
            sort: GetEmailEventReportQueryParamSort$.default(
                GetEmailEventReportQueryParamSort.Desc
            ),
            startDate: z.string().optional(),
            tags: z.string().optional(),
            templateId: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.days === undefined ? null : { days: v.days }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.endDate === undefined ? null : { endDate: v.endDate }),
                ...(v.event === undefined ? null : { event: v.event }),
                limit: v.limit,
                ...(v.messageId === undefined ? null : { messageId: v.messageId }),
                offset: v.offset,
                sort: v.sort,
                ...(v.startDate === undefined ? null : { startDate: v.startDate }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.templateId === undefined ? null : { templateId: v.templateId }),
            };
        });
}

/** @internal */
export namespace GetEmailEventReportResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        getEmailEventReport?: components.GetEmailEventReport$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetEmailEventReportResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            getEmailEventReport: z
                .lazy(() => components.GetEmailEventReport$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.getEmailEventReport === undefined
                    ? null
                    : { getEmailEventReport: v.getEmailEventReport }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        getEmailEventReport?: components.GetEmailEventReport$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetEmailEventReportResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            getEmailEventReport: z
                .lazy(() => components.GetEmailEventReport$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.getEmailEventReport === undefined
                    ? null
                    : { getEmailEventReport: v.getEmailEventReport }),
            };
        });
}
