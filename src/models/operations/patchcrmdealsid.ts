/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Attributes for deal update
 *
 * @remarks
 *
 * If you wish to update the pipeline of a deal you need to provide the `pipeline` and the `deal_stage`
 *
 * Pipeline and deal_stage are ids you can fetch using this endpoint `/crm/pipeline/details/{pipelineID}`
 *
 */
export type PatchCrmDealsIdAttributes = {};

/**
 * Updated deal details.
 */
export type PatchCrmDealsIdRequestBody = {
    /**
     * Attributes for deal update
     *
     * @remarks
     *
     * If you wish to update the pipeline of a deal you need to provide the `pipeline` and the `deal_stage`
     *
     * Pipeline and deal_stage are ids you can fetch using this endpoint `/crm/pipeline/details/{pipelineID}`
     *
     */
    attributes?: PatchCrmDealsIdAttributes | undefined;
    /**
     * Name of deal
     */
    name?: string | undefined;
};

export type PatchCrmDealsIdRequest = {
    /**
     * Updated deal details.
     */
    requestBody: PatchCrmDealsIdRequestBody;
    id: string;
};

export type PatchCrmDealsIdResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace PatchCrmDealsIdAttributes$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PatchCrmDealsIdAttributes, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchCrmDealsIdAttributes> =
        z.object({});
}

/** @internal */
export namespace PatchCrmDealsIdRequestBody$ {
    export type Inbound = {
        attributes?: PatchCrmDealsIdAttributes$.Inbound | undefined;
        name?: string | undefined;
    };

    export const inboundSchema: z.ZodType<PatchCrmDealsIdRequestBody, z.ZodTypeDef, Inbound> = z
        .object({
            attributes: z.lazy(() => PatchCrmDealsIdAttributes$.inboundSchema).optional(),
            name: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.attributes === undefined ? null : { attributes: v.attributes }),
                ...(v.name === undefined ? null : { name: v.name }),
            };
        });

    export type Outbound = {
        attributes?: PatchCrmDealsIdAttributes$.Outbound | undefined;
        name?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchCrmDealsIdRequestBody> = z
        .object({
            attributes: z.lazy(() => PatchCrmDealsIdAttributes$.outboundSchema).optional(),
            name: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.attributes === undefined ? null : { attributes: v.attributes }),
                ...(v.name === undefined ? null : { name: v.name }),
            };
        });
}

/** @internal */
export namespace PatchCrmDealsIdRequest$ {
    export type Inbound = {
        RequestBody: PatchCrmDealsIdRequestBody$.Inbound;
        id: string;
    };

    export const inboundSchema: z.ZodType<PatchCrmDealsIdRequest, z.ZodTypeDef, Inbound> = z
        .object({
            RequestBody: z.lazy(() => PatchCrmDealsIdRequestBody$.inboundSchema),
            id: z.string(),
        })
        .transform((v) => {
            return {
                requestBody: v.RequestBody,
                id: v.id,
            };
        });

    export type Outbound = {
        RequestBody: PatchCrmDealsIdRequestBody$.Outbound;
        id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchCrmDealsIdRequest> = z
        .object({
            requestBody: z.lazy(() => PatchCrmDealsIdRequestBody$.outboundSchema),
            id: z.string(),
        })
        .transform((v) => {
            return {
                RequestBody: v.requestBody,
                id: v.id,
            };
        });
}

/** @internal */
export namespace PatchCrmDealsIdResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<PatchCrmDealsIdResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchCrmDealsIdResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
