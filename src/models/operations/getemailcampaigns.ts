/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../internal/utils";
import * as components from "../../models/components";
import { AxiosResponse } from "axios";

/**
 * Use this flag to exclude htmlContent from the response body. If set to **true**, htmlContent field will be returned as empty string in the response body
 */
export enum ExcludeHtmlContent {
    True = "true",
    False = "false",
}

/**
 * Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed
 */
export enum GetEmailCampaignsQueryParamSort {
    Asc = "asc",
    Desc = "desc",
}

/**
 * Filter on the type of statistics required. Example **globalStats** value will only fetch globalStats info of the campaign in returned response.
 */
export enum QueryParamStatistics {
    GlobalStats = "globalStats",
    LinksStats = "linksStats",
    StatsByDomain = "statsByDomain",
}

/**
 * Filter on the status of the campaign
 */
export enum Status {
    Suspended = "suspended",
    Archive = "archive",
    Sent = "sent",
    Queued = "queued",
    Draft = "draft",
    InProcess = "inProcess",
}

/**
 * Filter on the type of the campaigns
 */
export enum TypeT {
    Classic = "classic",
    Trigger = "trigger",
}

export class GetEmailCampaignsRequest extends SpeakeasyBase {
    /**
     * **Mandatory if startDate is used**. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent email campaigns.
     *
     * @remarks
     * **Prefer to pass your timezone in date-time format for accurate result** ( only available if either 'status' not passed and if passed is set to 'sent' )
     *
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=endDate" })
    endDate?: string;

    /**
     * Use this flag to exclude htmlContent from the response body. If set to **true**, htmlContent field will be returned as empty string in the response body
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=excludeHtmlContent" })
    excludeHtmlContent?: ExcludeHtmlContent;

    /**
     * Number of documents per page
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=limit" })
    limit?: number;

    /**
     * Index of the first document in the page
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=offset" })
    offset?: number;

    /**
     * Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=sort" })
    sort?: GetEmailCampaignsQueryParamSort;

    /**
     * **Mandatory if endDate is used**. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent email campaigns.
     *
     * @remarks
     * **Prefer to pass your timezone in date-time format for accurate result** ( only available if either 'status' not passed and if passed is set to 'sent' )
     *
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=startDate" })
    startDate?: string;

    /**
     * Filter on the type of statistics required. Example **globalStats** value will only fetch globalStats info of the campaign in returned response.
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=statistics" })
    statistics?: QueryParamStatistics;

    /**
     * Filter on the status of the campaign
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=status" })
    status?: Status;

    /**
     * Filter on the type of the campaigns
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=type" })
    type?: TypeT;
}

export class GetEmailCampaignsResponse extends SpeakeasyBase {
    /**
     * HTTP response content type for this operation
     */
    @SpeakeasyMetadata()
    contentType: string;

    /**
     * HTTP response status code for this operation
     */
    @SpeakeasyMetadata()
    statusCode: number;

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    @SpeakeasyMetadata()
    rawResponse: AxiosResponse;

    /**
     * Email campaigns informations
     */
    @SpeakeasyMetadata()
    getEmailCampaigns?: components.GetEmailCampaigns;
}
