/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import * as z from "zod";

export type GetAggregatedSmtpReportRequest = {
    /**
     * Number of days in the past including today (positive integer). _Not compatible with 'startDate' and 'endDate'_
     *
     * @remarks
     *
     */
    days?: number | undefined;
    /**
     * **Mandatory if startDate is used.** Ending date of the report (YYYY-MM-DD). Must be greater than equal to startDate
     *
     * @remarks
     *
     */
    endDate?: string | undefined;
    /**
     * **Mandatory if endDate is used.** Starting date of the report (YYYY-MM-DD). Must be lower than equal to endDate
     *
     * @remarks
     *
     */
    startDate?: string | undefined;
    /**
     * Tag of the emails
     */
    tag?: string | undefined;
};

export type GetAggregatedSmtpReportResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Aggregated report informations
     */
    getAggregatedReport?: components.GetAggregatedReport | undefined;
};

/** @internal */
export namespace GetAggregatedSmtpReportRequest$ {
    export type Inbound = {
        days?: number | undefined;
        endDate?: string | undefined;
        startDate?: string | undefined;
        tag?: string | undefined;
    };

    export const inboundSchema: z.ZodType<GetAggregatedSmtpReportRequest, z.ZodTypeDef, Inbound> = z
        .object({
            days: z.number().int().optional(),
            endDate: z.string().optional(),
            startDate: z.string().optional(),
            tag: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.days === undefined ? null : { days: v.days }),
                ...(v.endDate === undefined ? null : { endDate: v.endDate }),
                ...(v.startDate === undefined ? null : { startDate: v.startDate }),
                ...(v.tag === undefined ? null : { tag: v.tag }),
            };
        });

    export type Outbound = {
        days?: number | undefined;
        endDate?: string | undefined;
        startDate?: string | undefined;
        tag?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAggregatedSmtpReportRequest> =
        z
            .object({
                days: z.number().int().optional(),
                endDate: z.string().optional(),
                startDate: z.string().optional(),
                tag: z.string().optional(),
            })
            .transform((v) => {
                return {
                    ...(v.days === undefined ? null : { days: v.days }),
                    ...(v.endDate === undefined ? null : { endDate: v.endDate }),
                    ...(v.startDate === undefined ? null : { startDate: v.startDate }),
                    ...(v.tag === undefined ? null : { tag: v.tag }),
                };
            });
}

/** @internal */
export namespace GetAggregatedSmtpReportResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        getAggregatedReport?: components.GetAggregatedReport$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetAggregatedSmtpReportResponse, z.ZodTypeDef, Inbound> =
        z
            .object({
                ContentType: z.string(),
                StatusCode: z.number().int(),
                RawResponse: z.instanceof(Response),
                getAggregatedReport: components.GetAggregatedReport$.inboundSchema.optional(),
            })
            .transform((v) => {
                return {
                    contentType: v.ContentType,
                    statusCode: v.StatusCode,
                    rawResponse: v.RawResponse,
                    ...(v.getAggregatedReport === undefined
                        ? null
                        : { getAggregatedReport: v.getAggregatedReport }),
                };
            });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        getAggregatedReport?: components.GetAggregatedReport$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetAggregatedSmtpReportResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            getAggregatedReport: components.GetAggregatedReport$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.getAggregatedReport === undefined
                    ? null
                    : { getAggregatedReport: v.getAggregatedReport }),
            };
        });
}
