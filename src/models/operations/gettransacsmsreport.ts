/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { RFCDate } from "../../types";
import { z } from "zod";

/**
 * Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed
 */
export enum GetTransacSmsReportQueryParamSort {
    Asc = "asc",
    Desc = "desc",
}

export type GetTransacSmsReportRequest = {
    /**
     * Number of days in the past including today (positive integer). **Not compatible with 'startDate' and 'endDate'**
     *
     * @remarks
     *
     */
    days?: number | undefined;
    /**
     * **Mandatory if startDate is used.** Ending date (YYYY-MM-DD) of the report
     *
     * @remarks
     *
     */
    endDate?: string | undefined;
    /**
     * Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed
     */
    sort?: GetTransacSmsReportQueryParamSort | undefined;
    /**
     * **Mandatory if endDate is used.** Starting date (YYYY-MM-DD) of the report
     *
     * @remarks
     *
     */
    startDate?: string | undefined;
    /**
     * Filter on a tag
     */
    tag?: string | undefined;
};

export type GetTransacSmsReportResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Aggregated SMS report informations
     */
    getTransacSmsReport?: components.GetTransacSmsReport | undefined;
};

/** @internal */
export const GetTransacSmsReportQueryParamSort$ = z.nativeEnum(GetTransacSmsReportQueryParamSort);

/** @internal */
export namespace GetTransacSmsReportRequest$ {
    export type Inbound = {
        days?: number | undefined;
        endDate?: string | undefined;
        sort?: GetTransacSmsReportQueryParamSort | undefined;
        startDate?: string | undefined;
        tag?: string | undefined;
    };

    export const inboundSchema: z.ZodType<GetTransacSmsReportRequest, z.ZodTypeDef, Inbound> = z
        .object({
            days: z.number().int().optional(),
            endDate: z.string().optional(),
            sort: GetTransacSmsReportQueryParamSort$.default(
                GetTransacSmsReportQueryParamSort.Desc
            ),
            startDate: z.string().optional(),
            tag: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.days === undefined ? null : { days: v.days }),
                ...(v.endDate === undefined ? null : { endDate: v.endDate }),
                sort: v.sort,
                ...(v.startDate === undefined ? null : { startDate: v.startDate }),
                ...(v.tag === undefined ? null : { tag: v.tag }),
            };
        });

    export type Outbound = {
        days?: number | undefined;
        endDate?: string | undefined;
        sort: GetTransacSmsReportQueryParamSort;
        startDate?: string | undefined;
        tag?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTransacSmsReportRequest> = z
        .object({
            days: z.number().int().optional(),
            endDate: z.string().optional(),
            sort: GetTransacSmsReportQueryParamSort$.default(
                GetTransacSmsReportQueryParamSort.Desc
            ),
            startDate: z.string().optional(),
            tag: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.days === undefined ? null : { days: v.days }),
                ...(v.endDate === undefined ? null : { endDate: v.endDate }),
                sort: v.sort,
                ...(v.startDate === undefined ? null : { startDate: v.startDate }),
                ...(v.tag === undefined ? null : { tag: v.tag }),
            };
        });
}

/** @internal */
export namespace GetTransacSmsReportResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        getTransacSmsReport?: components.GetTransacSmsReport$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetTransacSmsReportResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            getTransacSmsReport: z
                .lazy(() => components.GetTransacSmsReport$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.getTransacSmsReport === undefined
                    ? null
                    : { getTransacSmsReport: v.getTransacSmsReport }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        getTransacSmsReport?: components.GetTransacSmsReport$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTransacSmsReportResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            getTransacSmsReport: z
                .lazy(() => components.GetTransacSmsReport$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.getTransacSmsReport === undefined
                    ? null
                    : { getTransacSmsReport: v.getTransacSmsReport }),
            };
        });
}
