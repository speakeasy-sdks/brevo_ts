/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type ValidateSenderByOTPRequest = {
    /**
     * otp
     */
    otp?: components.Otp | undefined;
    /**
     * Id of the sender
     */
    senderId: number;
};

export type ValidateSenderByOTPResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace ValidateSenderByOTPRequest$ {
    export type Inbound = {
        otp?: components.Otp$.Inbound | undefined;
        senderId: number;
    };

    export const inboundSchema: z.ZodType<ValidateSenderByOTPRequest, z.ZodTypeDef, Inbound> = z
        .object({
            otp: components.Otp$.inboundSchema.optional(),
            senderId: z.number().int(),
        })
        .transform((v) => {
            return {
                ...(v.otp === undefined ? null : { otp: v.otp }),
                senderId: v.senderId,
            };
        });

    export type Outbound = {
        otp?: components.Otp$.Outbound | undefined;
        senderId: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ValidateSenderByOTPRequest> = z
        .object({
            otp: components.Otp$.outboundSchema.optional(),
            senderId: z.number().int(),
        })
        .transform((v) => {
            return {
                ...(v.otp === undefined ? null : { otp: v.otp }),
                senderId: v.senderId,
            };
        });
}

/** @internal */
export namespace ValidateSenderByOTPResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<ValidateSenderByOTPResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ValidateSenderByOTPResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
