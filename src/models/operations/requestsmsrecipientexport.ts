/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import * as z from "zod";

export type RequestSmsRecipientExportRequest = {
    /**
     * id of the campaign
     */
    campaignId: number;
    /**
     * Values to send for a recipient export request
     */
    requestSmsRecipientExport?: components.RequestSmsRecipientExport | undefined;
};

export type RequestSmsRecipientExportResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * process id created
     */
    createdProcessId?: components.CreatedProcessId | undefined;
};

/** @internal */
export namespace RequestSmsRecipientExportRequest$ {
    export type Inbound = {
        campaignId: number;
        requestSmsRecipientExport?: components.RequestSmsRecipientExport$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<RequestSmsRecipientExportRequest, z.ZodTypeDef, Inbound> =
        z
            .object({
                campaignId: z.number().int(),
                requestSmsRecipientExport: z
                    .lazy(() => components.RequestSmsRecipientExport$.inboundSchema)
                    .optional(),
            })
            .transform((v) => {
                return {
                    campaignId: v.campaignId,
                    ...(v.requestSmsRecipientExport === undefined
                        ? null
                        : { requestSmsRecipientExport: v.requestSmsRecipientExport }),
                };
            });

    export type Outbound = {
        campaignId: number;
        requestSmsRecipientExport?: components.RequestSmsRecipientExport$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestSmsRecipientExportRequest
    > = z
        .object({
            campaignId: z.number().int(),
            requestSmsRecipientExport: z
                .lazy(() => components.RequestSmsRecipientExport$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                campaignId: v.campaignId,
                ...(v.requestSmsRecipientExport === undefined
                    ? null
                    : { requestSmsRecipientExport: v.requestSmsRecipientExport }),
            };
        });
}

/** @internal */
export namespace RequestSmsRecipientExportResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        createdProcessId?: components.CreatedProcessId$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<
        RequestSmsRecipientExportResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            createdProcessId: components.CreatedProcessId$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.createdProcessId === undefined
                    ? null
                    : { createdProcessId: v.createdProcessId }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        createdProcessId?: components.CreatedProcessId$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RequestSmsRecipientExportResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            createdProcessId: components.CreatedProcessId$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.createdProcessId === undefined
                    ? null
                    : { createdProcessId: v.createdProcessId }),
            };
        });
}
