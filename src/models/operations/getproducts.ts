/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

/**
 * Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed
 */
export enum GetProductsQueryParamSort {
    Asc = "asc",
    Desc = "desc",
}

export type GetProductsRequest = {
    /**
     * Filter by product categories
     */
    categories?: Array<string> | undefined;
    /**
     * Filter by product ids
     */
    ids?: Array<string> | undefined;
    /**
     * Number of documents per page
     */
    limit?: number | undefined;
    /**
     * Filter by product name, minimum 3 characters should be present for search
     */
    name?: string | undefined;
    /**
     * Index of the first document in the page
     */
    offset?: number | undefined;
    /**
     * Price filter for products equals to particular amount
     */
    priceEq?: number | undefined;
    /**
     * Price filter for products greater than particular amount
     */
    priceGt?: number | undefined;
    /**
     * Price filter for products greater than and equals to particular amount
     */
    priceGte?: number | undefined;
    /**
     * Price filter for products less than particular amount
     */
    priceLt?: number | undefined;
    /**
     * Price filter for products less than and equals to particular amount
     */
    priceLte?: number | undefined;
    /**
     * Price filter for products not equals to particular amount
     */
    priceNe?: number | undefined;
    /**
     * Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed
     */
    sort?: GetProductsQueryParamSort | undefined;
};

export type GetProductsResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * All products listed
     */
    getProducts?: components.GetProducts | undefined;
};

/** @internal */
export const GetProductsQueryParamSort$ = z.nativeEnum(GetProductsQueryParamSort);

/** @internal */
export namespace GetProductsRequest$ {
    export type Inbound = {
        categories?: Array<string> | undefined;
        ids?: Array<string> | undefined;
        limit?: number | undefined;
        name?: string | undefined;
        offset?: number | undefined;
        "price[eq]"?: number | undefined;
        "price[gt]"?: number | undefined;
        "price[gte]"?: number | undefined;
        "price[lt]"?: number | undefined;
        "price[lte]"?: number | undefined;
        "price[ne]"?: number | undefined;
        sort?: GetProductsQueryParamSort | undefined;
    };

    export const inboundSchema: z.ZodType<GetProductsRequest, z.ZodTypeDef, Inbound> = z
        .object({
            categories: z.array(z.string()).optional(),
            ids: z.array(z.string()).optional(),
            limit: z.number().int().default(50),
            name: z.string().optional(),
            offset: z.number().int().default(0),
            "price[eq]": z.number().optional(),
            "price[gt]": z.number().optional(),
            "price[gte]": z.number().optional(),
            "price[lt]": z.number().optional(),
            "price[lte]": z.number().optional(),
            "price[ne]": z.number().optional(),
            sort: GetProductsQueryParamSort$.default(GetProductsQueryParamSort.Desc),
        })
        .transform((v) => {
            return {
                ...(v.categories === undefined ? null : { categories: v.categories }),
                ...(v.ids === undefined ? null : { ids: v.ids }),
                limit: v.limit,
                ...(v.name === undefined ? null : { name: v.name }),
                offset: v.offset,
                ...(v["price[eq]"] === undefined ? null : { priceEq: v["price[eq]"] }),
                ...(v["price[gt]"] === undefined ? null : { priceGt: v["price[gt]"] }),
                ...(v["price[gte]"] === undefined ? null : { priceGte: v["price[gte]"] }),
                ...(v["price[lt]"] === undefined ? null : { priceLt: v["price[lt]"] }),
                ...(v["price[lte]"] === undefined ? null : { priceLte: v["price[lte]"] }),
                ...(v["price[ne]"] === undefined ? null : { priceNe: v["price[ne]"] }),
                sort: v.sort,
            };
        });

    export type Outbound = {
        categories?: Array<string> | undefined;
        ids?: Array<string> | undefined;
        limit: number;
        name?: string | undefined;
        offset: number;
        "price[eq]"?: number | undefined;
        "price[gt]"?: number | undefined;
        "price[gte]"?: number | undefined;
        "price[lt]"?: number | undefined;
        "price[lte]"?: number | undefined;
        "price[ne]"?: number | undefined;
        sort: GetProductsQueryParamSort;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProductsRequest> = z
        .object({
            categories: z.array(z.string()).optional(),
            ids: z.array(z.string()).optional(),
            limit: z.number().int().default(50),
            name: z.string().optional(),
            offset: z.number().int().default(0),
            priceEq: z.number().optional(),
            priceGt: z.number().optional(),
            priceGte: z.number().optional(),
            priceLt: z.number().optional(),
            priceLte: z.number().optional(),
            priceNe: z.number().optional(),
            sort: GetProductsQueryParamSort$.default(GetProductsQueryParamSort.Desc),
        })
        .transform((v) => {
            return {
                ...(v.categories === undefined ? null : { categories: v.categories }),
                ...(v.ids === undefined ? null : { ids: v.ids }),
                limit: v.limit,
                ...(v.name === undefined ? null : { name: v.name }),
                offset: v.offset,
                ...(v.priceEq === undefined ? null : { "price[eq]": v.priceEq }),
                ...(v.priceGt === undefined ? null : { "price[gt]": v.priceGt }),
                ...(v.priceGte === undefined ? null : { "price[gte]": v.priceGte }),
                ...(v.priceLt === undefined ? null : { "price[lt]": v.priceLt }),
                ...(v.priceLte === undefined ? null : { "price[lte]": v.priceLte }),
                ...(v.priceNe === undefined ? null : { "price[ne]": v.priceNe }),
                sort: v.sort,
            };
        });
}

/** @internal */
export namespace GetProductsResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        getProducts?: components.GetProducts$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetProductsResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            getProducts: z.lazy(() => components.GetProducts$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.getProducts === undefined ? null : { getProducts: v.getProducts }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        getProducts?: components.GetProducts$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProductsResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            getProducts: z.lazy(() => components.GetProducts$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.getProducts === undefined ? null : { getProducts: v.getProducts }),
            };
        });
}
