/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

/**
 * Category of the attribute
 */
export enum AttributeCategory {
    Normal = "normal",
    Transactional = "transactional",
    Category = "category",
    Calculated = "calculated",
    Global = "global",
}

export type CreateAttributeRequest = {
    /**
     * Category of the attribute
     */
    attributeCategory: AttributeCategory;
    /**
     * Name of the attribute
     */
    attributeName: string;
    /**
     * Values to create an attribute
     */
    createAttribute: components.CreateAttribute;
};

export type CreateAttributeResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export const AttributeCategory$ = z.nativeEnum(AttributeCategory);

/** @internal */
export namespace CreateAttributeRequest$ {
    export type Inbound = {
        attributeCategory: AttributeCategory;
        attributeName: string;
        createAttribute: components.CreateAttribute$.Inbound;
    };

    export const inboundSchema: z.ZodType<CreateAttributeRequest, z.ZodTypeDef, Inbound> = z
        .object({
            attributeCategory: AttributeCategory$,
            attributeName: z.string(),
            createAttribute: z.lazy(() => components.CreateAttribute$.inboundSchema),
        })
        .transform((v) => {
            return {
                attributeCategory: v.attributeCategory,
                attributeName: v.attributeName,
                createAttribute: v.createAttribute,
            };
        });

    export type Outbound = {
        attributeCategory: AttributeCategory;
        attributeName: string;
        createAttribute: components.CreateAttribute$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateAttributeRequest> = z
        .object({
            attributeCategory: AttributeCategory$,
            attributeName: z.string(),
            createAttribute: z.lazy(() => components.CreateAttribute$.outboundSchema),
        })
        .transform((v) => {
            return {
                attributeCategory: v.attributeCategory,
                attributeName: v.attributeName,
                createAttribute: v.createAttribute,
            };
        });
}

/** @internal */
export namespace CreateAttributeResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<CreateAttributeResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateAttributeResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
