/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../internal/utils";
import * as components from "../../models/components";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

export class PostConversationsMessagesRequestBody extends SpeakeasyBase {
    /**
     * agent email. When sending messages from a standalone system, it’s hard to maintain a 1-to-1 relationship between the users of both systems. In this case, an agent can be specified by their email address.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "agentEmail" })
    agentEmail?: any;

    /**
     * agent ID. It can be found on agent’s page or received <a href="https://developers.brevo.com/docs/conversations-webhooks">from a webhook</a>. Alternatively, you can use `agentEmail` + `agentName` + `receivedFrom` instead (all 3 fields required).
     */
    @SpeakeasyMetadata()
    @Expose({ name: "agentId" })
    agentId?: any;

    /**
     * agent name
     */
    @SpeakeasyMetadata()
    @Expose({ name: "agentName" })
    agentName?: any;

    /**
     * mark your messages to distinguish messages created by you from the others.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "receivedFrom" })
    receivedFrom?: any;

    /**
     * message text
     */
    @SpeakeasyMetadata()
    @Expose({ name: "text" })
    text: any;

    /**
     * visitor’s ID received <a href="https://developers.brevo.com/docs/conversations-webhooks">from a webhook</a> or generated by you to <a href="https://developers.brevo.com/docs/customize-the-widget#identifying-existing-users">bind existing user account to Conversations</a>
     */
    @SpeakeasyMetadata()
    @Expose({ name: "visitorId" })
    visitorId: any;
}

export class PostConversationsMessagesResponse extends SpeakeasyBase {
    /**
     * HTTP response content type for this operation
     */
    @SpeakeasyMetadata()
    contentType: string;

    /**
     * Newly created message is returned as a response
     */
    @SpeakeasyMetadata()
    conversationsMessage?: components.ConversationsMessage;

    /**
     * HTTP response status code for this operation
     */
    @SpeakeasyMetadata()
    statusCode: number;

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    @SpeakeasyMetadata()
    rawResponse?: AxiosResponse;
}
