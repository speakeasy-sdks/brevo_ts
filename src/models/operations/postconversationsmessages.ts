/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import * as z from "zod";

export type PostConversationsMessagesRequestBody = {
    /**
     * agent email. When sending messages from a standalone system, it’s hard to maintain a 1-to-1 relationship between the users of both systems. In this case, an agent can be specified by their email address.
     */
    agentEmail?: any | undefined;
    /**
     * agent ID. It can be found on agent’s page or received <a href="https://developers.brevo.com/docs/conversations-webhooks">from a webhook</a>. Alternatively, you can use `agentEmail` + `agentName` + `receivedFrom` instead (all 3 fields required).
     */
    agentId?: any | undefined;
    /**
     * agent name
     */
    agentName?: any | undefined;
    /**
     * mark your messages to distinguish messages created by you from the others.
     */
    receivedFrom?: any | undefined;
    /**
     * message text
     */
    text?: any | undefined;
    /**
     * visitor’s ID received <a href="https://developers.brevo.com/docs/conversations-webhooks">from a webhook</a> or generated by you to <a href="https://developers.brevo.com/docs/customize-the-widget#identifying-existing-users">bind existing user account to Conversations</a>
     */
    visitorId?: any | undefined;
};

export type PostConversationsMessagesResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * Newly created message is returned as a response
     */
    conversationsMessage?: components.ConversationsMessage | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace PostConversationsMessagesRequestBody$ {
    export type Inbound = {
        agentEmail?: any | undefined;
        agentId?: any | undefined;
        agentName?: any | undefined;
        receivedFrom?: any | undefined;
        text?: any | undefined;
        visitorId?: any | undefined;
    };

    export const inboundSchema: z.ZodType<
        PostConversationsMessagesRequestBody,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            agentEmail: z.any().optional(),
            agentId: z.any().optional(),
            agentName: z.any().optional(),
            receivedFrom: z.any().optional(),
            text: z.any().optional(),
            visitorId: z.any().optional(),
        })
        .transform((v) => {
            return {
                ...(v.agentEmail === undefined ? null : { agentEmail: v.agentEmail }),
                ...(v.agentId === undefined ? null : { agentId: v.agentId }),
                ...(v.agentName === undefined ? null : { agentName: v.agentName }),
                ...(v.receivedFrom === undefined ? null : { receivedFrom: v.receivedFrom }),
                ...(v.text === undefined ? null : { text: v.text }),
                ...(v.visitorId === undefined ? null : { visitorId: v.visitorId }),
            };
        });

    export type Outbound = {
        agentEmail?: any | undefined;
        agentId?: any | undefined;
        agentName?: any | undefined;
        receivedFrom?: any | undefined;
        text?: any | undefined;
        visitorId?: any | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostConversationsMessagesRequestBody
    > = z
        .object({
            agentEmail: z.any().optional(),
            agentId: z.any().optional(),
            agentName: z.any().optional(),
            receivedFrom: z.any().optional(),
            text: z.any().optional(),
            visitorId: z.any().optional(),
        })
        .transform((v) => {
            return {
                ...(v.agentEmail === undefined ? null : { agentEmail: v.agentEmail }),
                ...(v.agentId === undefined ? null : { agentId: v.agentId }),
                ...(v.agentName === undefined ? null : { agentName: v.agentName }),
                ...(v.receivedFrom === undefined ? null : { receivedFrom: v.receivedFrom }),
                ...(v.text === undefined ? null : { text: v.text }),
                ...(v.visitorId === undefined ? null : { visitorId: v.visitorId }),
            };
        });
}

/** @internal */
export namespace PostConversationsMessagesResponse$ {
    export type Inbound = {
        ContentType: string;
        ConversationsMessage?: components.ConversationsMessage$.Inbound | undefined;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<
        PostConversationsMessagesResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            ConversationsMessage: components.ConversationsMessage$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.ConversationsMessage === undefined
                    ? null
                    : { conversationsMessage: v.ConversationsMessage }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        ConversationsMessage?: components.ConversationsMessage$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostConversationsMessagesResponse
    > = z
        .object({
            contentType: z.string(),
            conversationsMessage: components.ConversationsMessage$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.conversationsMessage === undefined
                    ? null
                    : { ConversationsMessage: v.conversationsMessage }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
