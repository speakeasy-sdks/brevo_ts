/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as b64$ from "../../lib/base64";
import { blobLikeSchema } from "../../types";
import * as components from "../components";
import * as z from "zod";

export type FileT = {
    content: Uint8Array | string;
    fileName: string;
};

export type PostCrmFilesRequestBody = {
    /**
     * File data to create a file.
     */
    file: FileT | Blob;
    companyId?: string | undefined;
    contactId?: number | undefined;
    dealId?: string | undefined;
};

export type PostCrmFilesResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * Returns the created File with additional details
     */
    fileData?: components.FileData | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace FileT$ {
    export type Inbound = {
        content: Uint8Array | string;
        fileName: string;
    };

    export const inboundSchema: z.ZodType<FileT, z.ZodTypeDef, Inbound> = z
        .object({
            content: b64$.zodInbound,
            fileName: z.string(),
        })
        .transform((v) => {
            return {
                content: v.content,
                fileName: v.fileName,
            };
        });

    export type Outbound = {
        content: Uint8Array;
        fileName: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FileT> = z
        .object({
            content: b64$.zodOutbound,
            fileName: z.string(),
        })
        .transform((v) => {
            return {
                content: v.content,
                fileName: v.fileName,
            };
        });
}

/** @internal */
export namespace PostCrmFilesRequestBody$ {
    export type Inbound = {
        file: FileT$.Inbound;
        companyId?: string | undefined;
        contactId?: number | undefined;
        dealId?: string | undefined;
    };

    export const inboundSchema: z.ZodType<PostCrmFilesRequestBody, z.ZodTypeDef, Inbound> = z
        .object({
            file: z.lazy(() => FileT$.inboundSchema),
            companyId: z.string().optional(),
            contactId: z.number().int().optional(),
            dealId: z.string().optional(),
        })
        .transform((v) => {
            return {
                file: v.file,
                ...(v.companyId === undefined ? null : { companyId: v.companyId }),
                ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                ...(v.dealId === undefined ? null : { dealId: v.dealId }),
            };
        });

    export type Outbound = {
        file: FileT$.Outbound | Blob;
        companyId?: string | undefined;
        contactId?: number | undefined;
        dealId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostCrmFilesRequestBody> = z
        .object({
            file: z.lazy(() => FileT$.outboundSchema).or(blobLikeSchema),
            companyId: z.string().optional(),
            contactId: z.number().int().optional(),
            dealId: z.string().optional(),
        })
        .transform((v) => {
            return {
                file: v.file,
                ...(v.companyId === undefined ? null : { companyId: v.companyId }),
                ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                ...(v.dealId === undefined ? null : { dealId: v.dealId }),
            };
        });
}

/** @internal */
export namespace PostCrmFilesResponse$ {
    export type Inbound = {
        ContentType: string;
        FileData?: components.FileData$.Inbound | undefined;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<PostCrmFilesResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            FileData: components.FileData$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.FileData === undefined ? null : { fileData: v.FileData }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        FileData?: components.FileData$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostCrmFilesResponse> = z
        .object({
            contentType: z.string(),
            fileData: components.FileData$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.fileData === undefined ? null : { FileData: v.fileData }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
