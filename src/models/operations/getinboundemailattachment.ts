/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as b64$ from "../../lib/base64";
import { z } from "zod";

export type GetInboundEmailAttachmentRequest = {
    /**
     * Token to fetch a particular attachment
     */
    downloadToken: string;
};

export type GetInboundEmailAttachmentResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    headers: Record<string, Array<string>>;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Attachment information
     */
    bytes?: Uint8Array | string | undefined;
};

/** @internal */
export namespace GetInboundEmailAttachmentRequest$ {
    export type Inbound = {
        downloadToken: string;
    };

    export const inboundSchema: z.ZodType<GetInboundEmailAttachmentRequest, z.ZodTypeDef, Inbound> =
        z
            .object({
                downloadToken: z.string(),
            })
            .transform((v) => {
                return {
                    downloadToken: v.downloadToken,
                };
            });

    export type Outbound = {
        downloadToken: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetInboundEmailAttachmentRequest
    > = z
        .object({
            downloadToken: z.string(),
        })
        .transform((v) => {
            return {
                downloadToken: v.downloadToken,
            };
        });
}

/** @internal */
export namespace GetInboundEmailAttachmentResponse$ {
    export type Inbound = {
        ContentType: string;
        Headers: Record<string, Array<string>>;
        StatusCode: number;
        RawResponse: Response;
        bytes?: Uint8Array | string | undefined;
    };

    export const inboundSchema: z.ZodType<
        GetInboundEmailAttachmentResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            Headers: z.record(z.array(z.string())),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            bytes: b64$.zodInbound.optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                headers: v.Headers,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.bytes === undefined ? null : { bytes: v.bytes }),
            };
        });

    export type Outbound = {
        ContentType: string;
        Headers: Record<string, Array<string>>;
        StatusCode: number;
        RawResponse: never;
        bytes?: Uint8Array | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetInboundEmailAttachmentResponse
    > = z
        .object({
            contentType: z.string(),
            headers: z.record(z.array(z.string())),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            bytes: b64$.zodOutbound.optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                Headers: v.headers,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.bytes === undefined ? null : { bytes: v.bytes }),
            };
        });
}
