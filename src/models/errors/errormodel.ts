/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyMetadata } from "../../internal/utils";
import { classToPlain, Expose } from "class-transformer";

/**
 * Error code displayed in case of a failure
 */
export enum Code {
    InvalidParameter = "invalid_parameter",
    MissingParameter = "missing_parameter",
    OutOfRange = "out_of_range",
    CampaignProcessing = "campaign_processing",
    CampaignSent = "campaign_sent",
    DocumentNotFound = "document_not_found",
    ResellerPermissionDenied = "reseller_permission_denied",
    NotEnoughCredits = "not_enough_credits",
    PermissionDenied = "permission_denied",
    DuplicateParameter = "duplicate_parameter",
    DuplicateRequest = "duplicate_request",
    MethodNotAllowed = "method_not_allowed",
    Unauthorized = "unauthorized",
    AccountUnderValidation = "account_under_validation",
    NotAcceptable = "not_acceptable",
    BadRequest = "bad_request",
}

export class ErrorModel extends Error {
    /**
     * Error code displayed in case of a failure
     */
    @SpeakeasyMetadata()
    @Expose({ name: "code" })
    code: Code;

    /**
     * Readable message associated to the failure
     */
    @SpeakeasyMetadata()
    @Expose({ name: "message" })
    message: string;

    constructor(err?: ErrorModel) {
        super();
        if (err) {
            Object.assign(this, err);
            this.message = JSON.stringify(
                classToPlain(err, { exposeUnsetFields: false, excludeExtraneousValues: true })
            );
        }

        this.name = "ErrorModel";
        Object.setPrototypeOf(this, ErrorModel.prototype);
    }
}
