/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config";
import * as enc$ from "../lib/encodings";
import { HTTPClient } from "../lib/http";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import * as components from "../models/components";
import * as errors from "../models/errors";
import * as operations from "../models/operations";

export class Ecommerce extends ClientSDK {
    private readonly options$: SDKOptions;

    constructor(options: SDKOptions = {}) {
        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
        });

        this.options$ = options;
        void this.options$;
    }
    /**
     * Create orders in batch
     *
     * @remarks
     * Create multiple orders at one time instead of one order at a time
     */
    async createBatchOrder(
        input: components.OrderBatch,
        options?: RequestOptions
    ): Promise<operations.CreateBatchOrderResponse> {
        const headers = new Headers();
        headers.set("user-agent", SDK_METADATA.userAgent);
        headers.set("Content-Type", "application/json");
        headers.set("Accept", "application/json");

        const payload = components.OrderBatch$.outboundSchema.parse(input);
        const body = enc$.encodeJSON("body", payload, { explode: true });

        const path = this.templateURLComponent("/orders/status/batch")();

        const security = this.options$.apiKey ? { apiKey: this.options$.apiKey } : {};
        const securitySettings = this.resolveGlobalSecurity(security);

        const response = await this.fetch$(
            { security: securitySettings, method: "post", path, headers, body },
            options
        );

        const responseFields = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 202, "application/json")) {
            const responseBody = await response.json();
            const result = operations.CreateBatchOrderResponse$.inboundSchema.parse({
                ...responseFields,
                createdBatchId: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, 400, "application/json")) {
            const responseBody = await response.json();
            const result = errors.ErrorModel$.inboundSchema.parse({
                ...responseFields,
                ...responseBody,
            });
            throw new errors.ErrorModel(result);
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Managing the status of the order
     *
     * @remarks
     * Manages the transactional status of the order
     */
    async createOrder(
        input: components.Order,
        options?: RequestOptions
    ): Promise<operations.CreateOrderResponse> {
        const headers = new Headers();
        headers.set("user-agent", SDK_METADATA.userAgent);
        headers.set("Content-Type", "application/json");
        headers.set("Accept", "application/json");

        const payload = components.Order$.outboundSchema.parse(input);
        const body = enc$.encodeJSON("body", payload, { explode: true });

        const path = this.templateURLComponent("/orders/status")();

        const security = this.options$.apiKey ? { apiKey: this.options$.apiKey } : {};
        const securitySettings = this.resolveGlobalSecurity(security);

        const response = await this.fetch$(
            { security: securitySettings, method: "post", path, headers, body },
            options
        );

        const responseFields = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 204)) {
            // fallthrough
        } else if (this.matchResponse(response, 400, "application/json")) {
            const responseBody = await response.json();
            const result = errors.ErrorModel$.inboundSchema.parse({
                ...responseFields,
                ...responseBody,
            });
            throw new errors.ErrorModel(result);
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return operations.CreateOrderResponse$.inboundSchema.parse(responseFields);
    }

    /**
     * Create categories in batch
     */
    async createUpdateBatchCategory(
        input: components.CreateUpdateBatchCategory,
        options?: RequestOptions
    ): Promise<operations.CreateUpdateBatchCategoryResponse> {
        const headers = new Headers();
        headers.set("user-agent", SDK_METADATA.userAgent);
        headers.set("Content-Type", "application/json");
        headers.set("Accept", "application/json");

        const payload = components.CreateUpdateBatchCategory$.outboundSchema.parse(input);
        const body = enc$.encodeJSON("body", payload, { explode: true });

        const path = this.templateURLComponent("/categories/batch")();

        const security = this.options$.apiKey ? { apiKey: this.options$.apiKey } : {};
        const securitySettings = this.resolveGlobalSecurity(security);

        const response = await this.fetch$(
            { security: securitySettings, method: "post", path, headers, body },
            options
        );

        const responseFields = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 201, "application/json")) {
            const responseBody = await response.json();
            const result = operations.CreateUpdateBatchCategoryResponse$.inboundSchema.parse({
                ...responseFields,
                createUpdateBatchCategoryModel: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, 400, "application/json")) {
            const responseBody = await response.json();
            const result = errors.ErrorModel$.inboundSchema.parse({
                ...responseFields,
                ...responseBody,
            });
            throw new errors.ErrorModel(result);
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Create products in batch
     */
    async createUpdateBatchProducts(
        input: components.CreateUpdateBatchProducts,
        options?: RequestOptions
    ): Promise<operations.CreateUpdateBatchProductsResponse> {
        const headers = new Headers();
        headers.set("user-agent", SDK_METADATA.userAgent);
        headers.set("Content-Type", "application/json");
        headers.set("Accept", "application/json");

        const payload = components.CreateUpdateBatchProducts$.outboundSchema.parse(input);
        const body = enc$.encodeJSON("body", payload, { explode: true });

        const path = this.templateURLComponent("/products/batch")();

        const security = this.options$.apiKey ? { apiKey: this.options$.apiKey } : {};
        const securitySettings = this.resolveGlobalSecurity(security);

        const response = await this.fetch$(
            { security: securitySettings, method: "post", path, headers, body },
            options
        );

        const responseFields = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 201, "application/json")) {
            const responseBody = await response.json();
            const result = operations.CreateUpdateBatchProductsResponse$.inboundSchema.parse({
                ...responseFields,
                createUpdateBatchProductsModel: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, 400, "application/json")) {
            const responseBody = await response.json();
            const result = errors.ErrorModel$.inboundSchema.parse({
                ...responseFields,
                ...responseBody,
            });
            throw new errors.ErrorModel(result);
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Create/Update a category
     */
    async createUpdateCategory(
        input: components.CreateUpdateCategory,
        options?: RequestOptions
    ): Promise<operations.CreateUpdateCategoryResponse> {
        const headers = new Headers();
        headers.set("user-agent", SDK_METADATA.userAgent);
        headers.set("Content-Type", "application/json");
        headers.set("Accept", "application/json");

        const payload = components.CreateUpdateCategory$.outboundSchema.parse(input);
        const body = enc$.encodeJSON("body", payload, { explode: true });

        const path = this.templateURLComponent("/categories")();

        const security = this.options$.apiKey ? { apiKey: this.options$.apiKey } : {};
        const securitySettings = this.resolveGlobalSecurity(security);

        const response = await this.fetch$(
            { security: securitySettings, method: "post", path, headers, body },
            options
        );

        const responseFields = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 201, "application/json")) {
            const responseBody = await response.json();
            const result = operations.CreateUpdateCategoryResponse$.inboundSchema.parse({
                ...responseFields,
                createCategoryModel: responseBody,
            });
            return result;
        } else if (this.matchStatusCode(response, 204)) {
            // fallthrough
        } else if (this.matchResponse(response, 400, "application/json")) {
            const responseBody = await response.json();
            const result = errors.ErrorModel$.inboundSchema.parse({
                ...responseFields,
                ...responseBody,
            });
            throw new errors.ErrorModel(result);
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return operations.CreateUpdateCategoryResponse$.inboundSchema.parse(responseFields);
    }

    /**
     * Create/Update a product
     */
    async createUpdateProduct(
        input: components.CreateUpdateProduct,
        options?: RequestOptions
    ): Promise<operations.CreateUpdateProductResponse> {
        const headers = new Headers();
        headers.set("user-agent", SDK_METADATA.userAgent);
        headers.set("Content-Type", "application/json");
        headers.set("Accept", "application/json");

        const payload = components.CreateUpdateProduct$.outboundSchema.parse(input);
        const body = enc$.encodeJSON("body", payload, { explode: true });

        const path = this.templateURLComponent("/products")();

        const security = this.options$.apiKey ? { apiKey: this.options$.apiKey } : {};
        const securitySettings = this.resolveGlobalSecurity(security);

        const response = await this.fetch$(
            { security: securitySettings, method: "post", path, headers, body },
            options
        );

        const responseFields = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 201, "application/json")) {
            const responseBody = await response.json();
            const result = operations.CreateUpdateProductResponse$.inboundSchema.parse({
                ...responseFields,
                createProductModel: responseBody,
            });
            return result;
        } else if (this.matchStatusCode(response, 204)) {
            // fallthrough
        } else if (this.matchResponse(response, 400, "application/json")) {
            const responseBody = await response.json();
            const result = errors.ErrorModel$.inboundSchema.parse({
                ...responseFields,
                ...responseBody,
            });
            throw new errors.ErrorModel(result);
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return operations.CreateUpdateProductResponse$.inboundSchema.parse(responseFields);
    }

    /**
     * Return all your categories
     */
    async getCategories(
        input: operations.GetCategoriesRequest,
        options?: RequestOptions
    ): Promise<operations.GetCategoriesResponse> {
        const headers = new Headers();
        headers.set("user-agent", SDK_METADATA.userAgent);
        headers.set("Accept", "application/json");

        const payload = operations.GetCategoriesRequest$.outboundSchema.parse(input);
        const body = null;

        const path = this.templateURLComponent("/categories")();

        const query = [
            enc$.encodeForm("ids", payload.ids, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("limit", payload.limit, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("name", payload.name, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("offset", payload.offset, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("sort", payload.sort, { explode: true, charEncoding: "percent" }),
        ]
            .filter(Boolean)
            .join("&");

        const security = this.options$.apiKey ? { apiKey: this.options$.apiKey } : {};
        const securitySettings = this.resolveGlobalSecurity(security);

        const response = await this.fetch$(
            { security: securitySettings, method: "get", path, headers, query, body },
            options
        );

        const responseFields = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetCategoriesResponse$.inboundSchema.parse({
                ...responseFields,
                getCategories: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, 400, "application/json")) {
            const responseBody = await response.json();
            const result = errors.ErrorModel$.inboundSchema.parse({
                ...responseFields,
                ...responseBody,
            });
            throw new errors.ErrorModel(result);
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Get a category details
     */
    async getCategoryInfo(
        input: operations.GetCategoryInfoRequest,
        options?: RequestOptions
    ): Promise<operations.GetCategoryInfoResponse> {
        const headers = new Headers();
        headers.set("user-agent", SDK_METADATA.userAgent);
        headers.set("Accept", "application/json");

        const payload = operations.GetCategoryInfoRequest$.outboundSchema.parse(input);
        const body = null;

        const pathParams = {
            id: enc$.encodeSimple("id", payload.id, { explode: false, charEncoding: "percent" }),
        };

        const path = this.templateURLComponent("/categories/{id}")(pathParams);

        const security = this.options$.apiKey ? { apiKey: this.options$.apiKey } : {};
        const securitySettings = this.resolveGlobalSecurity(security);

        const response = await this.fetch$(
            { security: securitySettings, method: "get", path, headers, body },
            options
        );

        const responseFields = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetCategoryInfoResponse$.inboundSchema.parse({
                ...responseFields,
                getCategoryDetails: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, [400, 404], "application/json")) {
            const responseBody = await response.json();
            const result = errors.ErrorModel$.inboundSchema.parse({
                ...responseFields,
                ...responseBody,
            });
            throw new errors.ErrorModel(result);
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Get a product's details
     */
    async getProductInfo(
        input: operations.GetProductInfoRequest,
        options?: RequestOptions
    ): Promise<operations.GetProductInfoResponse> {
        const headers = new Headers();
        headers.set("user-agent", SDK_METADATA.userAgent);
        headers.set("Accept", "application/json");

        const payload = operations.GetProductInfoRequest$.outboundSchema.parse(input);
        const body = null;

        const pathParams = {
            id: enc$.encodeSimple("id", payload.id, { explode: false, charEncoding: "percent" }),
        };

        const path = this.templateURLComponent("/products/{id}")(pathParams);

        const security = this.options$.apiKey ? { apiKey: this.options$.apiKey } : {};
        const securitySettings = this.resolveGlobalSecurity(security);

        const response = await this.fetch$(
            { security: securitySettings, method: "get", path, headers, body },
            options
        );

        const responseFields = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetProductInfoResponse$.inboundSchema.parse({
                ...responseFields,
                getProductDetails: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, [400, 404], "application/json")) {
            const responseBody = await response.json();
            const result = errors.ErrorModel$.inboundSchema.parse({
                ...responseFields,
                ...responseBody,
            });
            throw new errors.ErrorModel(result);
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Return all your products
     */
    async getProducts(
        input: operations.GetProductsRequest,
        options?: RequestOptions
    ): Promise<operations.GetProductsResponse> {
        const headers = new Headers();
        headers.set("user-agent", SDK_METADATA.userAgent);
        headers.set("Accept", "application/json");

        const payload = operations.GetProductsRequest$.outboundSchema.parse(input);
        const body = null;

        const path = this.templateURLComponent("/products")();

        const query = [
            enc$.encodeForm("categories", payload.categories, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("ids", payload.ids, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("limit", payload.limit, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("name", payload.name, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("offset", payload.offset, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("price[eq]", payload["price[eq]"], {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("price[gt]", payload["price[gt]"], {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("price[gte]", payload["price[gte]"], {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("price[lt]", payload["price[lt]"], {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("price[lte]", payload["price[lte]"], {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("price[ne]", payload["price[ne]"], {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("sort", payload.sort, { explode: true, charEncoding: "percent" }),
        ]
            .filter(Boolean)
            .join("&");

        const security = this.options$.apiKey ? { apiKey: this.options$.apiKey } : {};
        const securitySettings = this.resolveGlobalSecurity(security);

        const response = await this.fetch$(
            { security: securitySettings, method: "get", path, headers, query, body },
            options
        );

        const responseFields = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetProductsResponse$.inboundSchema.parse({
                ...responseFields,
                getProducts: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, 400, "application/json")) {
            const responseBody = await response.json();
            const result = errors.ErrorModel$.inboundSchema.parse({
                ...responseFields,
                ...responseBody,
            });
            throw new errors.ErrorModel(result);
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Activate the eCommerce app
     *
     * @remarks
     * Getting access to Brevo eCommerce.
     */
    async postEcommerceActivate(
        options?: RequestOptions
    ): Promise<operations.PostEcommerceActivateResponse> {
        const headers = new Headers();
        headers.set("user-agent", SDK_METADATA.userAgent);
        headers.set("Accept", "application/json");

        const path = this.templateURLComponent("/ecommerce/activate")();

        const security = this.options$.apiKey ? { apiKey: this.options$.apiKey } : {};
        const securitySettings = this.resolveGlobalSecurity(security);

        const response = await this.fetch$(
            { security: securitySettings, method: "post", path, headers },
            options
        );

        const responseFields = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 200)) {
            // fallthrough
        } else if (this.matchResponse(response, [401, 404], "application/json")) {
            const responseBody = await response.json();
            const result = errors.ErrorModel$.inboundSchema.parse({
                ...responseFields,
                ...responseBody,
            });
            throw new errors.ErrorModel(result);
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return operations.PostEcommerceActivateResponse$.inboundSchema.parse(responseFields);
    }
}
