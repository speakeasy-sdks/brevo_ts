/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config";
import * as enc$ from "../lib/encodings";
import { HTTPClient } from "../lib/http";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import * as components from "../models/components";
import * as errors from "../models/errors";
import * as operations from "../models/operations";
import { z } from "zod";

export class Webhooks extends ClientSDK {
    private readonly options$: SDKOptions;

    constructor(options: SDKOptions = {}) {
        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
        });

        this.options$ = options;
        void this.options$;
    }
    /**
     * Create a webhook
     */
    async createWebhook(
        input: components.CreateWebhook,
        options?: RequestOptions
    ): Promise<operations.CreateWebhookResponse> {
        const headers = new Headers();
        headers.set("user-agent", SDK_METADATA.userAgent);
        headers.set("Content-Type", "application/json");
        headers.set("Accept", "application/json");

        const payload = components.CreateWebhook$.outboundSchema.parse(input);
        const body = enc$.encodeJSON("body", payload, { explode: true });

        const path = this.templateURLComponent("/webhooks")();

        const security = this.options$.apiKey ? { apiKey: this.options$.apiKey } : {};
        const securitySettings = this.resolveGlobalSecurity(security);

        const response = await this.fetch$(
            { security: securitySettings, method: "post", path, headers, body },
            options
        );

        const responseFields = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 201, "application/json")) {
            const responseBody = await response.json();
            const result = operations.CreateWebhookResponse$.inboundSchema.parse({
                ...responseFields,
                createModel: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, 400, "application/json")) {
            const responseBody = await response.json();
            const result = errors.ErrorModel$.inboundSchema.parse({
                ...responseFields,
                ...responseBody,
            });
            throw new errors.ErrorModel(result);
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Delete a webhook
     */
    async deleteWebhook(
        input: operations.DeleteWebhookRequest,
        options?: RequestOptions
    ): Promise<operations.DeleteWebhookResponse> {
        const headers = new Headers();
        headers.set("user-agent", SDK_METADATA.userAgent);
        headers.set("Accept", "application/json");

        const payload = operations.DeleteWebhookRequest$.outboundSchema.parse(input);
        const body = null;

        const pathParams = {
            webhookId: enc$.encodeSimple("webhookId", payload.webhookId, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path = this.templateURLComponent("/webhooks/{webhookId}")(pathParams);

        const security = this.options$.apiKey ? { apiKey: this.options$.apiKey } : {};
        const securitySettings = this.resolveGlobalSecurity(security);

        const response = await this.fetch$(
            { security: securitySettings, method: "delete", path, headers, body },
            options
        );

        const responseFields = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 204)) {
            // fallthrough
        } else if (this.matchResponse(response, [400, 404], "application/json")) {
            const responseBody = await response.json();
            const result = errors.ErrorModel$.inboundSchema.parse({
                ...responseFields,
                ...responseBody,
            });
            throw new errors.ErrorModel(result);
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return operations.DeleteWebhookResponse$.inboundSchema.parse(responseFields);
    }

    /**
     * Export all transactional events
     *
     * @remarks
     * This endpoint will submit a request to get the history of webhooks in the CSV file. The link to download that CSV file will send to the webhook link provided in notifyURL of the body payload.
     */
    async exportWebhooksHistory(
        input: any,
        options?: RequestOptions
    ): Promise<operations.ExportWebhooksHistoryResponse> {
        const headers = new Headers();
        headers.set("user-agent", SDK_METADATA.userAgent);
        headers.set("Content-Type", "application/json");
        headers.set("Accept", "application/json");

        const payload = z.any().parse(input);
        const body = enc$.encodeJSON("body", payload, { explode: true });

        const path = this.templateURLComponent("/webhooks/export")();

        const security = this.options$.apiKey ? { apiKey: this.options$.apiKey } : {};
        const securitySettings = this.resolveGlobalSecurity(security);

        const response = await this.fetch$(
            { security: securitySettings, method: "post", path, headers, body },
            options
        );

        const responseFields = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 202, "application/json")) {
            const responseBody = await response.json();
            const result = operations.ExportWebhooksHistoryResponse$.inboundSchema.parse({
                ...responseFields,
                createdProcessId: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, 400, "application/json")) {
            const responseBody = await response.json();
            const result = errors.ErrorModel$.inboundSchema.parse({
                ...responseFields,
                ...responseBody,
            });
            throw new errors.ErrorModel(result);
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Get a webhook details
     */
    async getWebhook(
        input: operations.GetWebhookRequest,
        options?: RequestOptions
    ): Promise<operations.GetWebhookResponse> {
        const headers = new Headers();
        headers.set("user-agent", SDK_METADATA.userAgent);
        headers.set("Accept", "application/json");

        const payload = operations.GetWebhookRequest$.outboundSchema.parse(input);
        const body = null;

        const pathParams = {
            webhookId: enc$.encodeSimple("webhookId", payload.webhookId, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path = this.templateURLComponent("/webhooks/{webhookId}")(pathParams);

        const security = this.options$.apiKey ? { apiKey: this.options$.apiKey } : {};
        const securitySettings = this.resolveGlobalSecurity(security);

        const response = await this.fetch$(
            { security: securitySettings, method: "get", path, headers, body },
            options
        );

        const responseFields = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetWebhookResponse$.inboundSchema.parse({
                ...responseFields,
                getWebhook: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, [400, 404], "application/json")) {
            const responseBody = await response.json();
            const result = errors.ErrorModel$.inboundSchema.parse({
                ...responseFields,
                ...responseBody,
            });
            throw new errors.ErrorModel(result);
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Get all webhooks
     */
    async getWebhooks(
        input: operations.GetWebhooksRequest,
        options?: RequestOptions
    ): Promise<operations.GetWebhooksResponse> {
        const headers = new Headers();
        headers.set("user-agent", SDK_METADATA.userAgent);
        headers.set("Accept", "application/json");

        const payload = operations.GetWebhooksRequest$.outboundSchema.parse(input);
        const body = null;

        const path = this.templateURLComponent("/webhooks")();

        const query = [
            enc$.encodeForm("sort", payload.sort, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("type", payload.type, { explode: true, charEncoding: "percent" }),
        ]
            .filter(Boolean)
            .join("&");

        const security = this.options$.apiKey ? { apiKey: this.options$.apiKey } : {};
        const securitySettings = this.resolveGlobalSecurity(security);

        const response = await this.fetch$(
            { security: securitySettings, method: "get", path, headers, query, body },
            options
        );

        const responseFields = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetWebhooksResponse$.inboundSchema.parse({
                ...responseFields,
                getWebhooks: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, 400, "application/json")) {
            const responseBody = await response.json();
            const result = errors.ErrorModel$.inboundSchema.parse({
                ...responseFields,
                ...responseBody,
            });
            throw new errors.ErrorModel(result);
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Update a webhook
     */
    async updateWebhook(
        input: operations.UpdateWebhookRequest,
        options?: RequestOptions
    ): Promise<operations.UpdateWebhookResponse> {
        const headers = new Headers();
        headers.set("user-agent", SDK_METADATA.userAgent);
        headers.set("Content-Type", "application/json");
        headers.set("Accept", "application/json");

        const payload = operations.UpdateWebhookRequest$.outboundSchema.parse(input);

        const body = enc$.encodeJSON("body", payload.updateWebhook, { explode: true });

        const pathParams = {
            webhookId: enc$.encodeSimple("webhookId", payload.webhookId, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path = this.templateURLComponent("/webhooks/{webhookId}")(pathParams);

        const security = this.options$.apiKey ? { apiKey: this.options$.apiKey } : {};
        const securitySettings = this.resolveGlobalSecurity(security);

        const response = await this.fetch$(
            { security: securitySettings, method: "put", path, headers, body },
            options
        );

        const responseFields = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 204)) {
            // fallthrough
        } else if (this.matchResponse(response, [400, 404], "application/json")) {
            const responseBody = await response.json();
            const result = errors.ErrorModel$.inboundSchema.parse({
                ...responseFields,
                ...responseBody,
            });
            throw new errors.ErrorModel(result);
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return operations.UpdateWebhookResponse$.inboundSchema.parse(responseFields);
    }
}
