/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

/**
 * Sort the results in the ascending/descending order. Default order is **descending** by creation if `sort` is not passed
 */
export enum GetCrmDealsSort {
    Asc = "asc",
    Desc = "desc",
}

export class GetCrmDealsRequest extends SpeakeasyBase {
    /**
     * Filter by attributes. If you have filter for owner on your side please send it as `filters[attributes.deal_owner]`.
     */
    @SpeakeasyMetadata({
        data: "queryParam, style=form;explode=true;name=filters[attributes.deal_name]",
    })
    filtersAttributesDealName?: string;

    /**
     * Filter by linked companies ids
     */
    @SpeakeasyMetadata({
        data: "queryParam, style=form;explode=true;name=filters[linkedCompaniesIds]",
    })
    filtersLinkedCompaniesIds?: string;

    /**
     * Filter by linked companies ids
     */
    @SpeakeasyMetadata({
        data: "queryParam, style=form;explode=true;name=filters[linkedContactsIds]",
    })
    filtersLinkedContactsIds?: string;

    /**
     * Number of documents per page
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=limit" })
    limit?: number;

    /**
     * Index of the first document of the page
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=offset" })
    offset?: number;

    /**
     * Sort the results in the ascending/descending order. Default order is **descending** by creation if `sort` is not passed
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=sort" })
    sort?: GetCrmDealsSort;
}

export class GetCrmDealsResponse extends SpeakeasyBase {
    @SpeakeasyMetadata()
    contentType: string;

    /**
     * Returns deals list with filters
     */
    @SpeakeasyMetadata()
    dealsList?: shared.DealsList;

    @SpeakeasyMetadata()
    statusCode: number;

    @SpeakeasyMetadata()
    rawResponse?: AxiosResponse;

    /**
     * Returned when query params are invalid
     */
    @SpeakeasyMetadata()
    errorModel?: shared.ErrorModel;
}
