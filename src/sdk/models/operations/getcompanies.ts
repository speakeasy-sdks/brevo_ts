/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

/**
 * Sort the results in the ascending/descending order. Default order is **descending** by creation if `sort` is not passed
 */
export enum GetCompaniesSort {
    Asc = "asc",
    Desc = "desc",
}

export class GetCompaniesRequest extends SpeakeasyBase {
    /**
     * Filter by attrbutes. If you have filter for owner on your side please send it as {"attributes.owner":"6299dcf3874a14eacbc65c46"}
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=filters" })
    filters?: string;

    /**
     * Number of documents per page
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=limit" })
    limit?: number;

    /**
     * Filter by linked contacts ids
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=linkedContactsIds" })
    linkedContactsIds?: number;

    /**
     * Filter by linked Deals ids
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=linkedDealsIds" })
    linkedDealsIds?: string;

    /**
     * Index of the first document of the page
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=page" })
    page?: number;

    /**
     * Sort the results in the ascending/descending order. Default order is **descending** by creation if `sort` is not passed
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=sort" })
    sort?: GetCompaniesSort;

    /**
     * The field used to sort field names.
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=sortBy" })
    sortBy?: string;
}

export class GetCompaniesResponse extends SpeakeasyBase {
    /**
     * Returns companies list with filters
     */
    @SpeakeasyMetadata()
    companiesList?: shared.CompaniesList;

    @SpeakeasyMetadata()
    contentType: string;

    @SpeakeasyMetadata()
    statusCode: number;

    @SpeakeasyMetadata()
    rawResponse?: AxiosResponse;

    /**
     * Returned when query params are invalid
     */
    @SpeakeasyMetadata()
    errorModel?: shared.ErrorModel;
}
