/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Type } from "class-transformer";

export class UpdateSenderIps extends SpeakeasyBase {
    /**
     * Domain of the IP
     */
    @SpeakeasyMetadata()
    @Expose({ name: "domain" })
    domain: string;

    /**
     * Dedicated IP available in your account
     */
    @SpeakeasyMetadata()
    @Expose({ name: "ip" })
    ip: string;

    /**
     * Weight to apply to the IP. Sum of all IP weights must be 100. Should be passed for either ALL or NONE of the IPs. If it's not passed, the sending will be equally balanced on all IPs.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "weight" })
    weight?: number;
}

/**
 * sender's name
 */
export class UpdateSender extends SpeakeasyBase {
    /**
     * From Email to update the sender
     */
    @SpeakeasyMetadata()
    @Expose({ name: "email" })
    email?: string;

    /**
     * **Only in case of dedicated IP**. IPs to associate to the sender. If passed, will replace all the existing IPs.
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata({ elemType: UpdateSenderIps })
    @Expose({ name: "ips" })
    @Type(() => UpdateSenderIps)
    ips?: UpdateSenderIps[];

    /**
     * From Name to update the sender
     */
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;
}
