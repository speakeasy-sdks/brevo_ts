/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config";
import * as enc$ from "../lib/encodings";
import { HTTPClient } from "../lib/http";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import * as errors from "../models/errors";
import * as operations from "../models/operations";

export class Coupons extends ClientSDK {
    private readonly options$: SDKOptions;

    constructor(options: SDKOptions = {}) {
        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
        });

        this.options$ = options;
        void this.options$;
    }
    /**
     * Create Ð° coupon collection
     */
    async createCouponCollection(
        input: operations.CreateCouponCollectionRequestBody,
        options?: RequestOptions
    ): Promise<operations.CreateCouponCollectionResponse> {
        const headers = new Headers();
        headers.set("user-agent", SDK_METADATA.userAgent);
        headers.set("Content-Type", "application/json");
        headers.set("Accept", "application/json");

        const payload = operations.CreateCouponCollectionRequestBody$.outboundSchema.parse(input);
        const body = enc$.encodeJSON("body", payload, { explode: true });

        const path = this.templateURLComponent("/couponCollections")();

        const security = this.options$.apiKey ? { apiKey: this.options$.apiKey } : {};
        const securitySettings = this.resolveGlobalSecurity(security);

        const response = await this.fetch$(
            { security: securitySettings, method: "post", path, headers, body },
            options
        );

        const responseFields = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 201, "application/json")) {
            const responseBody = await response.json();
            const result = operations.CreateCouponCollectionResponse$.inboundSchema.parse({
                ...responseFields,
                object: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, [400, 401], "application/json")) {
            const responseBody = await response.json();
            const result = errors.ErrorModel$.inboundSchema.parse({
                ...responseFields,
                ...responseBody,
            });
            throw new errors.ErrorModel(result);
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Create coupons for a coupon collection
     */
    async createCoupons(
        input: operations.CreateCouponsRequestBody,
        options?: RequestOptions
    ): Promise<operations.CreateCouponsResponse> {
        const headers = new Headers();
        headers.set("user-agent", SDK_METADATA.userAgent);
        headers.set("Content-Type", "application/json");
        headers.set("Accept", "application/json");

        const payload = operations.CreateCouponsRequestBody$.outboundSchema.parse(input);
        const body = enc$.encodeJSON("body", payload, { explode: true });

        const path = this.templateURLComponent("/coupons")();

        const security = this.options$.apiKey ? { apiKey: this.options$.apiKey } : {};
        const securitySettings = this.resolveGlobalSecurity(security);

        const response = await this.fetch$(
            { security: securitySettings, method: "post", path, headers, body },
            options
        );

        const responseFields = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 204)) {
            // fallthrough
        } else if (this.matchResponse(response, [400, 401, 404], "application/json")) {
            const responseBody = await response.json();
            const result = errors.ErrorModel$.inboundSchema.parse({
                ...responseFields,
                ...responseBody,
            });
            throw new errors.ErrorModel(result);
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return operations.CreateCouponsResponse$.inboundSchema.parse(responseFields);
    }

    /**
     * Get a coupon collection by id
     */
    async getCouponCollection(
        input: operations.GetCouponCollectionRequest,
        options?: RequestOptions
    ): Promise<operations.GetCouponCollectionResponse> {
        const headers = new Headers();
        headers.set("user-agent", SDK_METADATA.userAgent);
        headers.set("Accept", "application/json");

        const payload = operations.GetCouponCollectionRequest$.outboundSchema.parse(input);
        const body = null;

        const pathParams = {
            id: enc$.encodeSimple("id", payload.id, { explode: false, charEncoding: "percent" }),
        };

        const path = this.templateURLComponent("/couponCollections/{id}")(pathParams);

        const security = this.options$.apiKey ? { apiKey: this.options$.apiKey } : {};
        const securitySettings = this.resolveGlobalSecurity(security);

        const response = await this.fetch$(
            { security: securitySettings, method: "get", path, headers, body },
            options
        );

        const responseFields = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetCouponCollectionResponse$.inboundSchema.parse({
                ...responseFields,
                getCouponCollection: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, [400, 401, 404], "application/json")) {
            const responseBody = await response.json();
            const result = errors.ErrorModel$.inboundSchema.parse({
                ...responseFields,
                ...responseBody,
            });
            throw new errors.ErrorModel(result);
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Get all your coupon collections
     */
    async getCouponCollections(
        input: operations.GetCouponCollectionsRequest,
        options?: RequestOptions
    ): Promise<operations.GetCouponCollectionsResponse> {
        const headers = new Headers();
        headers.set("user-agent", SDK_METADATA.userAgent);
        headers.set("Accept", "application/json");

        const payload = operations.GetCouponCollectionsRequest$.outboundSchema.parse(input);
        const body = null;

        const path = this.templateURLComponent("/couponCollections")();

        const query = [
            enc$.encodeForm("limit", payload.limit, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("offset", payload.offset, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("sort", payload.sort, { explode: true, charEncoding: "percent" }),
        ]
            .filter(Boolean)
            .join("&");

        const security = this.options$.apiKey ? { apiKey: this.options$.apiKey } : {};
        const securitySettings = this.resolveGlobalSecurity(security);

        const response = await this.fetch$(
            { security: securitySettings, method: "get", path, headers, query, body },
            options
        );

        const responseFields = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetCouponCollectionsResponse$.inboundSchema.parse({
                ...responseFields,
                getCouponCollection: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, [400, 401], "application/json")) {
            const responseBody = await response.json();
            const result = errors.ErrorModel$.inboundSchema.parse({
                ...responseFields,
                ...responseBody,
            });
            throw new errors.ErrorModel(result);
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Update a coupon collection by id
     */
    async updateCouponCollection(
        input: operations.UpdateCouponCollectionRequest,
        options?: RequestOptions
    ): Promise<operations.UpdateCouponCollectionResponse> {
        const headers = new Headers();
        headers.set("user-agent", SDK_METADATA.userAgent);
        headers.set("Content-Type", "application/json");
        headers.set("Accept", "application/json");

        const payload = operations.UpdateCouponCollectionRequest$.outboundSchema.parse(input);

        const body = enc$.encodeJSON("body", payload.RequestBody, { explode: true });

        const pathParams = {
            id: enc$.encodeSimple("id", payload.id, { explode: false, charEncoding: "percent" }),
        };

        const path = this.templateURLComponent("/couponCollections/{id}")(pathParams);

        const security = this.options$.apiKey ? { apiKey: this.options$.apiKey } : {};
        const securitySettings = this.resolveGlobalSecurity(security);

        const response = await this.fetch$(
            { security: securitySettings, method: "patch", path, headers, body },
            options
        );

        const responseFields = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.UpdateCouponCollectionResponse$.inboundSchema.parse({
                ...responseFields,
                object: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, [400, 401], "application/json")) {
            const responseBody = await response.json();
            const result = errors.ErrorModel$.inboundSchema.parse({
                ...responseFields,
                ...responseBody,
            });
            throw new errors.ErrorModel(result);
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }
}
